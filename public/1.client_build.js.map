{"version":3,"sources":["webpack:///1.client_build.js","webpack:///./app/components/CodeEditor/linters/css.js","webpack:///./~/codemirror/addon/lint/css-lint.js","webpack:///./~/codemirror/mode/css/css.js","webpack:///./~/parserlib/lib/node-parserlib.js"],"names":["webpackJsonp",149,"module","exports","__webpack_require__","Reporter","lines","ruleset","this","messages","stats","parserlib","CSSLint","applyEmbeddedRuleset","text","valueMap","embedded","match","embeddedRuleset","rules","true","","false","2","1","0","toLowerCase","split","forEach","rule","pair","property","value","trim","formatters","api","util","EventTarget","version","addRule","push","id","clearRules","getRules","concat","sort","a","b","getRuleset","i","len","length","addFormatter","formatter","getFormatter","formatId","format","results","filename","options","result","startFormat","formatResults","endFormat","hasFormat","hasOwnProperty","verify","reporter","report","parser","css","Parser","starHack","ieFilters","underscoreHack","strict","replace","test","errors","init","parse","ex","error","message","line","col","rollup","prototype","constructor","type","evidence","warn","info","rollupError","rollupWarn","stat","name","_Reporter","Util","mix","receiver","supplier","prop","indexOf","values","func","desc","browsers","addListener","event","selector","part","modifier","classCount","j","k","selectors","parts","SELECTOR_PART_TYPE","modifiers","startRule","properties","boxSizing","endRule","height","heightProperties","width","widthProperties","border","border-left","border-right","padding","padding-left","padding-right","border-bottom","border-top","padding-bottom","padding-top","tags","fontFaceRule","firstSrc","ruleFailed","propertyName","toString","regex","compatiblePrefixes","variations","prefixed","inKeyFrame","arrayPush","Array","applyTo","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","border-end","border-end-color","border-end-style","border-end-width","border-image","border-radius","border-start","border-start-color","border-start-style","border-start-width","box-align","box-direction","box-flex","box-lines","box-ordinal-group","box-orient","box-pack","box-sizing","box-shadow","column-count","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-width","hyphens","line-break","margin-end","margin-start","marquee-speed","marquee-style","padding-end","padding-start","tab-size","text-size-adjust","transform","transform-origin","transition","transition-delay","transition-duration","transition-property","transition-timing-function","user-modify","user-select","word-break","writing-mode","apply","prefix","full","actual","item","propertiesSpecified","propertyGroups","slice","actualNodes","join","reportProperty","display","msg","propertiesToCheck","float","margin","margin-left","margin-right","margin-bottom","margin-top","vertical-align","stack","uri","lastProperty","count","color","background","border-color","border-top-color","border-right-color","border-bottom-color","border-left-color","background-color","colorType","RegExp","$1","toUpperCase","gradients","moz","webkit","oldWebkit","o","missing","idCount","important","invalid","lastRule","propCount","outline","classes","elementName","total","mapping","hack","textIndent","direction","headings","h1","h2","h3","h4","h5","h6","pseudo","num","needed","needsStandard","pos","-webkit-border-radius","-webkit-border-top-left-radius","-webkit-border-top-right-radius","-webkit-border-bottom-left-radius","-webkit-border-bottom-right-radius","-o-border-radius","-o-border-top-left-radius","-o-border-top-right-radius","-o-border-bottom-left-radius","-o-border-bottom-right-radius","-moz-border-radius","-moz-border-radius-topleft","-moz-border-radius-topright","-moz-border-radius-bottomleft","-moz-border-radius-bottomright","-moz-column-count","-webkit-column-count","-moz-column-gap","-webkit-column-gap","-moz-column-rule","-webkit-column-rule","-moz-column-rule-style","-webkit-column-rule-style","-moz-column-rule-color","-webkit-column-rule-color","-moz-column-rule-width","-webkit-column-rule-width","-moz-column-width","-webkit-column-width","-webkit-column-span","-webkit-columns","-moz-box-shadow","-webkit-box-shadow","-moz-transform","-webkit-transform","-o-transform","-ms-transform","-moz-transform-origin","-webkit-transform-origin","-o-transform-origin","-ms-transform-origin","-moz-box-sizing","-webkit-box-sizing","-moz-user-select","-khtml-user-select","-webkit-user-select","units","xmlEscape","str","String","readError","output","generateSource","capitalize","charAt","quiet","escapeSpecialCharacters","tests","failure","unshift","lastIndexOf","shortFilename","substring",244,"mod","CodeMirror","registerHelper","found","window","startLine","endLine","startCol","endCol","from","Pos","to","severity",246,"keySet","array","keys","tokenCComment","stream","state","ch","maybeEnd","next","tokenize","defineMode","config","parserConfig","ret","style","tp","tokenBase","tokenHooks","eatWhile","current","eat","tokenString","backUp","tokenParenthesized","peek","quote","escaped","Context","indent","prev","pushContext","context","indentation","indentUnit","popContext","pass","states","popAndPass","n","wordAsValue","word","override","valueKeywords","colorKeywords","inline","propertyKeywords","resolveMode","documentTypes","mediaTypes","mediaFeatures","mediaValueKeywords","nonStandardPropertyKeywords","fontProperties","counterDescriptors","allowNested","supportsAtComponent","top","stateArg","block","maybeprop","propBlock","_stream","parens","atBlock","atComponentBlock","atBlock_parens","restricted_atBlock_before","restricted_atBlock","keyframes","at","interpolation","startState","base","token","eatSpace","textAfter","cx","Math","max","electricChars","blockCommentStart","blockCommentEnd","fold","documentTypes_","mediaTypes_","mediaFeatures_","mediaValueKeywords_","propertyKeywords_","nonStandardPropertyKeywords_","fontProperties_","counterDescriptors_","colorKeywords_","valueKeywords_","allWords","defineMIME","/","skipToEnd",":","$","#","helperType","@","&",283,"_listeners","StringReader","_input","_line","_col","_cursor","SyntaxError","SyntaxUnit","TokenStreamBase","input","tokenData","_reader","_token","_tokenData","_lt","_ltIndex","_ltIndexCache","listener","fire","target","Error","listeners","call","removeListener","splice","getCol","getLine","eof","c","read","mark","_bookmark","cursor","reset","readTo","pattern","buffer","readWhile","filter","readMatch","matcher","source","readCount","lastMatch","fromToken","valueOf","createTokenData","tokens","nameMap","typeMap","UNKNOWN","tt","tokenTypes","channel","get","unget","mustMatch","arguments","LT","advance","LA","tokenInfo","undefined","_getToken","hide","shift","index","tokenName","tokenType","pop","Combinator","COMBINATOR_TYPE","MediaFeature","MEDIA_FEATURE_TYPE","MediaQuery","mediaType","features","MEDIA_QUERY_TYPE","_tokenStream","PropertyName","PROPERTY_NAME_TYPE","PropertyValue","PROPERTY_VALUE_TYPE","PropertyValueIterator","_i","_parts","_marks","PropertyValuePart","PROPERTY_VALUE_PART_TYPE","temp","$2","red","parseInt","green","blue","$3","alpha","$4","hue","saturation","lightness","eval","Colors","Selector","SELECTOR_TYPE","specificity","Specificity","calculate","SelectorPart","SelectorSubPart","SELECTOR_SUB_PART_TYPE","args","d","isHexDigit","h","isDigit","isWhitespace","isNewLine","nl","isNameStart","isNameChar","isIdentStart","TokenStream","Tokens","ValidationError","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","activeBorder","activecaption","appworkspace","buttonface","buttonhighlight","buttonshadow","buttontext","captiontext","graytext","greytext","highlight","highlighttext","inactiveborder","inactivecaption","inactivecaptiontext","infobackground","infotext","menu","menutext","scrollbar","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","windowframe","windowtext","DEFAULT_TYPE","proto","additions","_stylesheet","tokenStream","_charset","_skipCruft","IMPORT_SYM","_import","NAMESPACE_SYM","_namespace","EOF","MEDIA_SYM","_media","PAGE_SYM","_page","FONT_FACE_SYM","_font_face","KEYFRAMES_SYM","_keyframes","VIEWPORT_SYM","_viewport","UNKNOWN_SYM","LBRACE","RBRACE","S","_readWhitespace","_ruleset","CHARSET_SYM","_unexpectedToken","emit","charset","STRING","SEMICOLON","importToken","mediaList","URI","_media_query_list","media","IDENT","LPAREN","_media_query","COMMA","ident","expressions","_media_type","_media_expression","_media_feature","feature","expression","COLON","_expression","RPAREN","identifier","pseudoPage","_pseudo_page","_readDeclarations","_margin","marginSym","_margin_sym","TOPLEFTCORNER_SYM","TOPLEFT_SYM","TOPCENTER_SYM","TOPRIGHT_SYM","TOPRIGHTCORNER_SYM","BOTTOMLEFTCORNER_SYM","BOTTOMLEFT_SYM","BOTTOMCENTER_SYM","BOTTOMRIGHT_SYM","BOTTOMRIGHTCORNER_SYM","LEFTTOP_SYM","LEFTMIDDLE_SYM","LEFTBOTTOM_SYM","RIGHTTOP_SYM","RIGHTMIDDLE_SYM","RIGHTBOTTOM_SYM","_operator","inFunction","SLASH","PLUS","STAR","MINUS","_combinator","GREATER","TILDE","_unary_operator","_property","tokenValue","_selectors_group","_selector","nextSelector","combinator","ws","_simple_selector_sequence","selectorText","components","HASH","_class","_attrib","_pseudo","_negation","component","_type_selector","_universal","ns","_namespace_prefix","_element_name","DOT","PIPE","LBRACKET","PREFIXMATCH","SUFFIXMATCH","SUBSTRINGMATCH","EQUALS","INCLUDES","DASHMATCH","RBRACKET","colons","FUNCTION","_functional_pseudo","DIMENSION","NUMBER","LENGTH","FREQ","ANGLE","TIME","RESOLUTION","arg","subpart","NOT","_negation_arg","_declaration","expr","prio","_expr","_prio","_validateProperty","IMPORTANT_SYM","operator","_term","unary","endChar","IE_FUNCTION","_ie_function","PERCENTAGE","UNICODE_RANGE","_hexcolor","_function","lt","functionText","_keyframe_name","_keyframe_rule","keyList","_key_list","_key","CDO","CDC","checkStart","readMargins","_verifyEnd","Validation","validate","parseStyleSheet","parseMediaQuery","parsePropertyValue","parseRule","parseSelector","parseStyleAttribute","Properties","align-items","align-content","align-self","-webkit-align-items","-webkit-align-content","-webkit-align-self","alignment-adjust","alignment-baseline","multi","comma","-moz-animation-delay","-moz-animation-direction","-moz-animation-duration","-moz-animation-iteration-count","-moz-animation-name","-moz-animation-play-state","-ms-animation-delay","-ms-animation-direction","-ms-animation-duration","-ms-animation-iteration-count","-ms-animation-name","-ms-animation-play-state","-webkit-animation-delay","-webkit-animation-direction","-webkit-animation-duration","-webkit-animation-fill-mode","-webkit-animation-iteration-count","-webkit-animation-name","-webkit-animation-play-state","-o-animation-delay","-o-animation-direction","-o-animation-duration","-o-animation-iteration-count","-o-animation-name","-o-animation-play-state","azimuth","simple","behind","valid","ValidationTypes","isAny","hasNext","backface-visibility","background-attachment","background-clip","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","behavior","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-image-outset","border-image-repeat","border-image-slice","numeric","fill","border-image-source","border-image-width","border-left-style","border-left-width","slash","border-right-style","border-right-width","border-spacing","border-style","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","-moz-box-align","-moz-box-decoration-break","-moz-box-direction","-moz-box-flex","-moz-box-flex-group","-moz-box-lines","-moz-box-ordinal-group","-moz-box-orient","-moz-box-pack","-webkit-box-align","-webkit-box-decoration-break","-webkit-box-direction","-webkit-box-flex","-webkit-box-flex-group","-webkit-box-lines","-webkit-box-ordinal-group","-webkit-box-orient","-webkit-box-pack","multiProperty","Infinity","break-after","break-before","break-inside","caption-side","clear","clip","color-profile","column-fill","column-span","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","-webkit-flex","-webkit-flex-basis","-webkit-flex-direction","-webkit-flex-flow","-webkit-flex-grow","-webkit-flex-shrink","-webkit-flex-wrap","-ms-flex","-ms-flex-align","-ms-flex-direction","-ms-flex-order","-ms-flex-pack","-ms-flex-wrap","float-offset","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","grid-cell-stacking","grid-column","grid-columns","grid-column-align","grid-column-sizing","grid-column-span","grid-flow","grid-layer","grid-row","grid-rows","grid-row-align","grid-row-span","grid-row-sizing","hanging-punctuation","hyphenate-after","hyphenate-before","hyphenate-character","hyphenate-lines","hyphenate-resource","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","-webkit-justify-content","left","letter-spacing","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","mark-after","mark-before","marks","marquee-direction","marquee-play-count","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","opacity","order","-webkit-order","orphans","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","phonemes","pitch","pitch-range","play-during","pointer-events","position","presentation-level","punctuation-trim","quotes","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","size","speak","speak-header","speak-numeral","speak-punctuation","speech-rate","src","stress","string-set","table-layout","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-emphasis","text-height","text-indent","text-justify","text-outline","text-overflow","text-rendering","text-shadow","text-transform","text-wrap","-ms-touch-action","touch-action","transform-style","unicode-bidi","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-pitch-range","voice-rate","voice-stress","voice-volume","volume","white-space","white-space-collapse","widows","word-spacing","word-wrap","z-index","zoom","isFirst","previous","restore","Pseudos",":first-letter",":first-line",":before",":after","ELEMENT","CLASS","isElement","compare","other","comps","updateValues","nonascii","reader","commentToken","charToken","comparisonToken","stringToken","hashToken","numberToken","htmlCommentEndToken","identOrFunctionToken","importantToken","atRuleToken","notToken","htmlCommentStartToken","unicodeRangeToken","whitespaceToken","createToken","first","CHAR","readName","opts","comment","readComment","COMMENT","comparison","readURI","readWhitespace","readNumber","delim","string","INVALID","readUnicodeRangePart","allowQuestionMark","whitespace","number","hasDot","readString","inner","readURL","url","readEscape","cssEscape","spec","groupProperty","singleProperty","types","partial","typeCount","groups","isAnyOfGroup","isLiteral","literals","isSimple","isComplex","complex","isType","<absolute-size>","<attachment>","<attr>","<bg-image>","<gradient>","<box>","<content>","<relative-size>","<ident>","<length>","<color>","<number>","<integer>","<line>","<angle>","<uri>","<image>","<percentage>","<border-width>","<border-style>","<content-sizing>","<margin-width>","<padding-width>","<shape>","<time>","<flex-grow>","<flex-shrink>","<width>","<flex-basis>","<flex-direction>","<flex-wrap>","<bg-position>","xDir","yDir","<bg-size>","<repeat-style>","<shadow>","inset","<x-one-radius>","<flex>"],"mappings":"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G,OAAA,GACAoD,EAAAgD,EAAAhD,MAeA,OAdA,QAAAgD,EAAAtV,MAAA,KAAAgR,GAAwC,KAAAA,IAAAsE,IAAA/C,MACxC+C,EAAA/C,OACA,KAAAvB,GAAoB,SAAAsE,EAAAtV,MAAA,OAAAsV,EAAAtV,MACpB,iBAAAsV,EAAAtV,MAAA,sBAAAsV,EAAAtV,MAIS,KAAAgR,GAAA,UAAAsE,EAAAtV,MAAA,kBAAAsV,EAAAtV,QACT,KAAAgR,GAAoB,MAAAsE,EAAAtV,MAAA,WAAAsV,EAAAtV,QAEpBsS,EAAAiD,KAAAC,IAAA,EAAAF,EAAAhD,OAAAK,GACA2C,IAAA/C,OANA+C,IAAA/C,KACAD,EAAAgD,EAAAhD,SAQAA,GAGAmD,cAAA,IACAC,kBAAA,KACAC,gBAAA,KACAC,KAAA,UAYA,IAAAC,IACA,sCACApC,EAAA/C,EAAAmF,GAEAC,GACA,iEACA,uBACApC,EAAAhD,EAAAoF,GAEAC,GACA,mEACA,qEACA,uDACA,4DACA,wEACA,8DACA,4DACA,8DACA,uEACA,6CACApC,EAAAjD,EAAAqF,GAEAC,GACA,kEACA,2BACApC,EAAAlD,EAAAsF,GAEAC,GACA,8DACA,kEACA,iEACA,oEACA,yEACA,+EACA,gFACA,iEACA,2DACA,iEACA,yDACA,8DACA,oDACA,iEACA,uDACA,uEACA,+DACA,gEACA,sEACA,kEACA,sEACA,qEACA,6DACA,qEACA,qEACA,wDACA,gDACA,wDACA,qEACA,mEACA,mEACA,8EACA,qFACA,4DACA,wEACA,wEACA,sEACA,sEACA,+DACA,8DACA,8DACA,gEACA,6DACA,gEACA,4DACA,oEACA,0DACA,2DACA,kEACA,sEACA,+DACA,sCACA,iEACA,sEACA,wEACA,kEACA,iEACA,oEACA,sEACA,8DACA,yEACA,iEACA,kFACA,yDACA,wEACA,8DACA,mEACA,sEACA,8DACA,6DACA,0EACA,oFACA,mEACA,sDACA,kEACA,+DACA,uEACA,oEACA,qCAEA,0EACA,8EACA,oDACA,sEACA,6EACA,0EACA,qEACA,oEACA,2DACA1C,EAAA7C,EAAAuF,GAEAC,GACA,6EACA,4EACA,kEACA,kFACA,yCACArC,EAAAnD,EAAAwF,GAEAC,GACA,2EACA,2CACArC,EAAApD,EAAAyF,GAEAC,GACA,gEACA,wCACArC,EAAArD,EAAA0F,GAEAC,GACA,+DACA,8DACA,0EACA,kEACA,kEACA,gEACA,6DACA,4DACA,+DACA,kEACA,0DACA,oEACA,wEACA,8DACA,oEACA,uEACA,yEACA,oEACA,wEACA,qEACA,2DACA,qEACA,wEACA,+DACA,+DACA,qCACAhD,EAAA3C,EAAA2F,GAEAC,GACA,oEACA,gFACA,kEACA,wFACA,oFACA,6EACA,mFACA,8EACA,mEACA,uEACA,mEACA,qFACA,0CACA,qFACA,kFACA,qEACA,gFACA,kEACA,0BACA,8EACA,2EACA,yEACA,mDACA,oDACA,kDACA,qDACA,4EACA,kFACA,mGACA,sEACA,+EACA,4DACA,4EACA,oEACA,uEACA,kFACA,mEACA,+CACA,qEACA,sEACA,mFACA,gEACA,kEACA,qFACA,yDACA,kEACA,wDACA,oEACA,yEACA,oEACA,oDACA,uEACA,gFACA,gEACA,mEACA,yFACA,8DACA,uEACA,+EACA,yEACA,+DACA,8DACA,gDACA,oEACA,qEACA,4EACA,2FACA,+CACA,qDACA,8DACA,oEACA,uDACA,sEACA,yEACA,6EACA,iHACA,uEACA,wEACA,iEACA,wEACA,QACA,uEACA,iEACA,mEACA,qEACA,8CACA,iEACA,kEACA,iEACA,uEACA,0EACA,0DACA,4FACA,uBACAlD,EAAA1C,EAAA4F,GAEAC,EAAAV,EAAA1Y,OAAA2Y,GAAA3Y,OAAA4Y,GAAA5Y,OAAA6Y,GACA7Y,OAAA8Y,GAAA9Y,OAAA+Y,GAAA/Y,OAAAkZ,GACAlZ,OAAAmZ,EACAzG,GAAAC,eAAA,kBAAAyG,GAcA1G,EAAA2G,WAAA,YACA/C,gBACAC,aACAC,gBACAC,qBACAL,mBACAM,8BACAC,iBACAC,qBACAV,gBACAD,gBACAzB,YACA8E,IAAA,SAAA3F,EAAAC,GACA,MAAAD,GAAAgB,IAAA,MACAf,EAA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","file":"1.client_build.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 149:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t/*!\n\tCSSLint\n\tCopyright (c) 2013 Nicole Sullivan and Nicholas C. Zakas. All rights reserved.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n\t\n\t*/\n\t/* Build: v0.10.0 15-August-2013 01:07:22 */\n\tvar parserlib = __webpack_require__(283);\n\t/**\n\t * Main CSSLint object.\n\t * @class CSSLint\n\t * @static\n\t * @extends parserlib.util.EventTarget\n\t */\n\t/*global parserlib, Reporter*/\n\tvar CSSLint = function () {\n\t\n\t    var rules = [],\n\t        formatters = [],\n\t        embeddedRuleset = /\\/\\*csslint([^\\*]*)\\*\\//,\n\t        api = new parserlib.util.EventTarget();\n\t\n\t    api.version = \"0.10.0\";\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Rule Management\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Adds a new rule to the engine.\n\t     * @param {Object} rule The rule to add.\n\t     * @method addRule\n\t     */\n\t    api.addRule = function (rule) {\n\t        rules.push(rule);\n\t        rules[rule.id] = rule;\n\t    };\n\t\n\t    /**\n\t     * Clears all rule from the engine.\n\t     * @method clearRules\n\t     */\n\t    api.clearRules = function () {\n\t        rules = [];\n\t    };\n\t\n\t    /**\n\t     * Returns the rule objects.\n\t     * @return An array of rule objects.\n\t     * @method getRules\n\t     */\n\t    api.getRules = function () {\n\t        return [].concat(rules).sort(function (a, b) {\n\t            return a.id > b.id ? 1 : 0;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Returns a ruleset configuration object with all current rules.\n\t     * @return A ruleset object.\n\t     * @method getRuleset\n\t     */\n\t    api.getRuleset = function () {\n\t        var ruleset = {},\n\t            i = 0,\n\t            len = rules.length;\n\t\n\t        while (i < len) {\n\t            ruleset[rules[i++].id] = 1; //by default, everything is a warning\n\t        }\n\t\n\t        return ruleset;\n\t    };\n\t\n\t    /**\n\t     * Returns a ruleset object based on embedded rules.\n\t     * @param {String} text A string of css containing embedded rules.\n\t     * @param {Object} ruleset A ruleset object to modify.\n\t     * @return {Object} A ruleset object.\n\t     * @method getEmbeddedRuleset\n\t     */\n\t    function applyEmbeddedRuleset(text, ruleset) {\n\t        var valueMap,\n\t            embedded = text && text.match(embeddedRuleset),\n\t            rules = embedded && embedded[1];\n\t\n\t        if (rules) {\n\t            valueMap = {\n\t                \"true\": 2, // true is error\n\t                \"\": 1, // blank is warning\n\t                \"false\": 0, // false is ignore\n\t\n\t                \"2\": 2, // explicit error\n\t                \"1\": 1, // explicit warning\n\t                \"0\": 0 // explicit ignore\n\t            };\n\t\n\t            rules.toLowerCase().split(\",\").forEach(function (rule) {\n\t                var pair = rule.split(\":\"),\n\t                    property = pair[0] || \"\",\n\t                    value = pair[1] || \"\";\n\t\n\t                ruleset[property.trim()] = valueMap[value.trim()];\n\t            });\n\t        }\n\t\n\t        return ruleset;\n\t    }\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Formatters\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Adds a new formatter to the engine.\n\t     * @param {Object} formatter The formatter to add.\n\t     * @method addFormatter\n\t     */\n\t    api.addFormatter = function (formatter) {\n\t        // formatters.push(formatter);\n\t        formatters[formatter.id] = formatter;\n\t    };\n\t\n\t    /**\n\t     * Retrieves a formatter for use.\n\t     * @param {String} formatId The name of the format to retrieve.\n\t     * @return {Object} The formatter or undefined.\n\t     * @method getFormatter\n\t     */\n\t    api.getFormatter = function (formatId) {\n\t        return formatters[formatId];\n\t    };\n\t\n\t    /**\n\t     * Formats the results in a particular format for a single file.\n\t     * @param {Object} result The results returned from CSSLint.verify().\n\t     * @param {String} filename The filename for which the results apply.\n\t     * @param {String} formatId The name of the formatter to use.\n\t     * @param {Object} options (Optional) for special output handling.\n\t     * @return {String} A formatted string for the results.\n\t     * @method format\n\t     */\n\t    api.format = function (results, filename, formatId, options) {\n\t        var formatter = this.getFormatter(formatId),\n\t            result = null;\n\t\n\t        if (formatter) {\n\t            result = formatter.startFormat();\n\t            result += formatter.formatResults(results, filename, options || {});\n\t            result += formatter.endFormat();\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * Indicates if the given format is supported.\n\t     * @param {String} formatId The ID of the format to check.\n\t     * @return {Boolean} True if the format exists, false if not.\n\t     * @method hasFormat\n\t     */\n\t    api.hasFormat = function (formatId) {\n\t        return formatters.hasOwnProperty(formatId);\n\t    };\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Verification\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Starts the verification process for the given CSS text.\n\t     * @param {String} text The CSS text to verify.\n\t     * @param {Object} ruleset (Optional) List of rules to apply. If null, then\n\t     *      all rules are used. If a rule has a value of 1 then it's a warning,\n\t     *      a value of 2 means it's an error.\n\t     * @return {Object} Results of the verification.\n\t     * @method verify\n\t     */\n\t    api.verify = function (text, ruleset) {\n\t\n\t        var i = 0,\n\t            len = rules.length,\n\t            reporter,\n\t            lines,\n\t            report,\n\t            parser = new parserlib.css.Parser({ starHack: true, ieFilters: true,\n\t            underscoreHack: true, strict: false });\n\t\n\t        // normalize line endings\n\t        lines = text.replace(/\\n\\r?/g, \"$split$\").split('$split$');\n\t\n\t        if (!ruleset) {\n\t            ruleset = this.getRuleset();\n\t        }\n\t\n\t        if (embeddedRuleset.test(text)) {\n\t            ruleset = applyEmbeddedRuleset(text, ruleset);\n\t        }\n\t\n\t        reporter = new Reporter(lines, ruleset);\n\t\n\t        ruleset.errors = 2; //always report parsing errors as errors\n\t        for (i in ruleset) {\n\t            if (ruleset.hasOwnProperty(i) && ruleset[i]) {\n\t                if (rules[i]) {\n\t                    rules[i].init(parser, reporter);\n\t                }\n\t            }\n\t        }\n\t\n\t        //capture most horrible error type\n\t        try {\n\t            parser.parse(text);\n\t        } catch (ex) {\n\t            reporter.error(\"Fatal error, cannot continue: \" + ex.message, ex.line, ex.col, {});\n\t        }\n\t\n\t        report = {\n\t            messages: reporter.messages,\n\t            stats: reporter.stats,\n\t            ruleset: reporter.ruleset\n\t        };\n\t\n\t        //sort by line numbers, rollups at the bottom\n\t        report.messages.sort(function (a, b) {\n\t            if (a.rollup && !b.rollup) {\n\t                return 1;\n\t            } else if (!a.rollup && b.rollup) {\n\t                return -1;\n\t            } else {\n\t                return a.line - b.line;\n\t            }\n\t        });\n\t\n\t        return report;\n\t    };\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Publish the API\n\t    //-------------------------------------------------------------------------\n\t\n\t    return api;\n\t}();\n\t\n\t/*global CSSLint*/\n\t/**\n\t * An instance of Report is used to report results of the\n\t * verification back to the main API.\n\t * @class Reporter\n\t * @constructor\n\t * @param {String[]} lines The text lines of the source.\n\t * @param {Object} ruleset The set of rules to work with, including if\n\t *      they are errors or warnings.\n\t */\n\tfunction Reporter(lines, ruleset) {\n\t\n\t    /**\n\t     * List of messages being reported.\n\t     * @property messages\n\t     * @type String[]\n\t     */\n\t    this.messages = [];\n\t\n\t    /**\n\t     * List of statistics being reported.\n\t     * @property stats\n\t     * @type String[]\n\t     */\n\t    this.stats = [];\n\t\n\t    /**\n\t     * Lines of code being reported on. Used to provide contextual information\n\t     * for messages.\n\t     * @property lines\n\t     * @type String[]\n\t     */\n\t    this.lines = lines;\n\t\n\t    /**\n\t     * Information about the rules. Used to determine whether an issue is an\n\t     * error or warning.\n\t     * @property ruleset\n\t     * @type Object\n\t     */\n\t    this.ruleset = ruleset;\n\t}\n\t\n\tReporter.prototype = {\n\t\n\t    //restore constructor\n\t    constructor: Reporter,\n\t\n\t    /**\n\t     * Report an error.\n\t     * @param {String} message The message to store.\n\t     * @param {int} line The line number.\n\t     * @param {int} col The column number.\n\t     * @param {Object} rule The rule this message relates to.\n\t     * @method error\n\t     */\n\t    error: function error(message, line, col, rule) {\n\t        this.messages.push({\n\t            type: \"error\",\n\t            line: line,\n\t            col: col,\n\t            message: message,\n\t            evidence: this.lines[line - 1],\n\t            rule: rule || {}\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Report an warning.\n\t     * @param {String} message The message to store.\n\t     * @param {int} line The line number.\n\t     * @param {int} col The column number.\n\t     * @param {Object} rule The rule this message relates to.\n\t     * @method warn\n\t     * @deprecated Use report instead.\n\t     */\n\t    warn: function warn(message, line, col, rule) {\n\t        this.report(message, line, col, rule);\n\t    },\n\t\n\t    /**\n\t     * Report an issue.\n\t     * @param {String} message The message to store.\n\t     * @param {int} line The line number.\n\t     * @param {int} col The column number.\n\t     * @param {Object} rule The rule this message relates to.\n\t     * @method report\n\t     */\n\t    report: function report(message, line, col, rule) {\n\t        this.messages.push({\n\t            type: this.ruleset[rule.id] == 2 ? \"error\" : \"warning\",\n\t            line: line,\n\t            col: col,\n\t            message: message,\n\t            evidence: this.lines[line - 1],\n\t            rule: rule\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Report some informational text.\n\t     * @param {String} message The message to store.\n\t     * @param {int} line The line number.\n\t     * @param {int} col The column number.\n\t     * @param {Object} rule The rule this message relates to.\n\t     * @method info\n\t     */\n\t    info: function info(message, line, col, rule) {\n\t        this.messages.push({\n\t            type: \"info\",\n\t            line: line,\n\t            col: col,\n\t            message: message,\n\t            evidence: this.lines[line - 1],\n\t            rule: rule\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Report some rollup error information.\n\t     * @param {String} message The message to store.\n\t     * @param {Object} rule The rule this message relates to.\n\t     * @method rollupError\n\t     */\n\t    rollupError: function rollupError(message, rule) {\n\t        this.messages.push({\n\t            type: \"error\",\n\t            rollup: true,\n\t            message: message,\n\t            rule: rule\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Report some rollup warning information.\n\t     * @param {String} message The message to store.\n\t     * @param {Object} rule The rule this message relates to.\n\t     * @method rollupWarn\n\t     */\n\t    rollupWarn: function rollupWarn(message, rule) {\n\t        this.messages.push({\n\t            type: \"warning\",\n\t            rollup: true,\n\t            message: message,\n\t            rule: rule\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Report a statistic.\n\t     * @param {String} name The name of the stat to store.\n\t     * @param {Variant} value The value of the stat.\n\t     * @method stat\n\t     */\n\t    stat: function stat(name, value) {\n\t        this.stats[name] = value;\n\t    }\n\t};\n\t\n\t//expose for testing purposes\n\tCSSLint._Reporter = Reporter;\n\t\n\t/*global CSSLint*/\n\t\n\t/*\n\t * Utility functions that make life easier.\n\t */\n\tCSSLint.Util = {\n\t    /*\n\t     * Adds all properties from supplier onto receiver,\n\t     * overwriting if the same name already exists on\n\t     * reciever.\n\t     * @param {Object} The object to receive the properties.\n\t     * @param {Object} The object to provide the properties.\n\t     * @return {Object} The receiver\n\t     */\n\t    mix: function mix(receiver, supplier) {\n\t        var prop;\n\t\n\t        for (prop in supplier) {\n\t            if (supplier.hasOwnProperty(prop)) {\n\t                receiver[prop] = supplier[prop];\n\t            }\n\t        }\n\t\n\t        return prop;\n\t    },\n\t\n\t    /*\n\t     * Polyfill for array indexOf() method.\n\t     * @param {Array} values The array to search.\n\t     * @param {Variant} value The value to search for.\n\t     * @return {int} The index of the value if found, -1 if not.\n\t     */\n\t    indexOf: function indexOf(values, value) {\n\t        if (values.indexOf) {\n\t            return values.indexOf(value);\n\t        } else {\n\t            for (var i = 0, len = values.length; i < len; i++) {\n\t                if (values[i] === value) {\n\t                    return i;\n\t                }\n\t            }\n\t            return -1;\n\t        }\n\t    },\n\t\n\t    /*\n\t     * Polyfill for array forEach() method.\n\t     * @param {Array} values The array to operate on.\n\t     * @param {Function} func The function to call on each item.\n\t     * @return {void}\n\t     */\n\t    forEach: function forEach(values, func) {\n\t        if (values.forEach) {\n\t            return values.forEach(func);\n\t        } else {\n\t            for (var i = 0, len = values.length; i < len; i++) {\n\t                func(values[i], i, values);\n\t            }\n\t        }\n\t    }\n\t};\n\t/*global CSSLint*/\n\t/*\n\t * Rule: Don't use adjoining classes (.foo.bar).\n\t */\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"adjoining-classes\",\n\t    name: \"Disallow adjoining classes\",\n\t    desc: \"Don't use adjoining classes.\",\n\t    browsers: \"IE6\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                modifier,\n\t                classCount,\n\t                i,\n\t                j,\n\t                k;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t                for (j = 0; j < selector.parts.length; j++) {\n\t                    part = selector.parts[j];\n\t                    if (part.type == parser.SELECTOR_PART_TYPE) {\n\t                        classCount = 0;\n\t                        for (k = 0; k < part.modifiers.length; k++) {\n\t                            modifier = part.modifiers[k];\n\t                            if (modifier.type == \"class\") {\n\t                                classCount++;\n\t                            }\n\t                            if (classCount > 1) {\n\t                                reporter.report(\"Don't use adjoining classes.\", part.line, part.col, rule);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*global CSSLint*/\n\t\n\t/*\n\t * Rule: Don't use width or height when using padding or border.\n\t */\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"box-model\",\n\t    name: \"Beware of broken box size\",\n\t    desc: \"Don't use width or height when using padding or border.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            widthProperties = {\n\t            border: 1,\n\t            \"border-left\": 1,\n\t            \"border-right\": 1,\n\t            padding: 1,\n\t            \"padding-left\": 1,\n\t            \"padding-right\": 1\n\t        },\n\t            heightProperties = {\n\t            border: 1,\n\t            \"border-bottom\": 1,\n\t            \"border-top\": 1,\n\t            padding: 1,\n\t            \"padding-bottom\": 1,\n\t            \"padding-top\": 1\n\t        },\n\t            properties,\n\t            boxSizing = false;\n\t\n\t        function startRule() {\n\t            properties = {};\n\t            boxSizing = false;\n\t        }\n\t\n\t        function endRule() {\n\t            var prop, value;\n\t\n\t            if (!boxSizing) {\n\t                if (properties.height) {\n\t                    for (prop in heightProperties) {\n\t                        if (heightProperties.hasOwnProperty(prop) && properties[prop]) {\n\t                            value = properties[prop].value;\n\t                            //special case for padding\n\t                            if (!(prop == \"padding\" && value.parts.length === 2 && value.parts[0].value === 0)) {\n\t                                reporter.report(\"Using height with \" + prop + \" can sometimes make elements larger than you expect.\", properties[prop].line, properties[prop].col, rule);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (properties.width) {\n\t                    for (prop in widthProperties) {\n\t                        if (widthProperties.hasOwnProperty(prop) && properties[prop]) {\n\t                            value = properties[prop].value;\n\t\n\t                            if (!(prop == \"padding\" && value.parts.length === 2 && value.parts[1].value === 0)) {\n\t                                reporter.report(\"Using width with \" + prop + \" can sometimes make elements larger than you expect.\", properties[prop].line, properties[prop].col, rule);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t        parser.addListener(\"startpage\", startRule);\n\t        parser.addListener(\"startpagemargin\", startRule);\n\t        parser.addListener(\"startkeyframerule\", startRule);\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text.toLowerCase();\n\t\n\t            if (heightProperties[name] || widthProperties[name]) {\n\t                if (!/^0\\S*$/.test(event.value) && !(name == \"border\" && event.value == \"none\")) {\n\t                    properties[name] = { line: event.property.line, col: event.property.col, value: event.value };\n\t                }\n\t            } else {\n\t                if (/^(width|height)/i.test(name) && /^(length|percentage)/.test(event.value.parts[0].type)) {\n\t                    properties[name] = 1;\n\t                } else if (name == \"box-sizing\") {\n\t                    boxSizing = true;\n\t                }\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", endRule);\n\t        parser.addListener(\"endfontface\", endRule);\n\t        parser.addListener(\"endpage\", endRule);\n\t        parser.addListener(\"endpagemargin\", endRule);\n\t        parser.addListener(\"endkeyframerule\", endRule);\n\t    }\n\t\n\t});\n\t/*global CSSLint*/\n\t\n\t/*\n\t * Rule: box-sizing doesn't work in IE6 and IE7.\n\t */\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"box-sizing\",\n\t    name: \"Disallow use of box-sizing\",\n\t    desc: \"The box-sizing properties isn't supported in IE6 and IE7.\",\n\t    browsers: \"IE6, IE7\",\n\t    tags: [\"Compatibility\"],\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text.toLowerCase();\n\t\n\t            if (name == \"box-sizing\") {\n\t                reporter.report(\"The box-sizing property isn't supported in IE6 and IE7.\", event.line, event.col, rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Use the bulletproof @font-face syntax to avoid 404's in old IE\n\t * (http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax)\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"bulletproof-font-face\",\n\t    name: \"Use the bulletproof @font-face syntax\",\n\t    desc: \"Use the bulletproof @font-face syntax to avoid 404's in old IE (http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax).\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0,\n\t            fontFaceRule = false,\n\t            firstSrc = true,\n\t            ruleFailed = false,\n\t            line,\n\t            col;\n\t\n\t        // Mark the start of a @font-face declaration so we only test properties inside it\n\t        parser.addListener(\"startfontface\", function (event) {\n\t            fontFaceRule = true;\n\t        });\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            // If we aren't inside an @font-face declaration then just return\n\t            if (!fontFaceRule) {\n\t                return;\n\t            }\n\t\n\t            var propertyName = event.property.toString().toLowerCase(),\n\t                value = event.value.toString();\n\t\n\t            // Set the line and col numbers for use in the endfontface listener\n\t            line = event.line;\n\t            col = event.col;\n\t\n\t            // This is the property that we care about, we can ignore the rest\n\t            if (propertyName === 'src') {\n\t                var regex = /^\\s?url\\(['\"].+\\.eot\\?.*['\"]\\)\\s*format\\(['\"]embedded-opentype['\"]\\).*$/i;\n\t\n\t                // We need to handle the advanced syntax with two src properties\n\t                if (!value.match(regex) && firstSrc) {\n\t                    ruleFailed = true;\n\t                    firstSrc = false;\n\t                } else if (value.match(regex) && !firstSrc) {\n\t                    ruleFailed = false;\n\t                }\n\t            }\n\t        });\n\t\n\t        // Back to normal rules that we don't need to test\n\t        parser.addListener(\"endfontface\", function (event) {\n\t            fontFaceRule = false;\n\t\n\t            if (ruleFailed) {\n\t                reporter.report(\"@font-face declaration doesn't follow the fontspring bulletproof syntax.\", line, col, rule);\n\t            }\n\t        });\n\t    }\n\t});\n\t/*\n\t * Rule: Include all compatible vendor prefixes to reach a wider\n\t * range of users.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"compatible-vendor-prefixes\",\n\t    name: \"Require compatible vendor prefixes\",\n\t    desc: \"Include all compatible vendor prefixes to reach a wider range of users.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            compatiblePrefixes,\n\t            properties,\n\t            prop,\n\t            variations,\n\t            prefixed,\n\t            i,\n\t            len,\n\t            inKeyFrame = false,\n\t            arrayPush = Array.prototype.push,\n\t            applyTo = [];\n\t\n\t        // See http://peter.sh/experiments/vendor-prefixed-css-property-overview/ for details\n\t        compatiblePrefixes = {\n\t            \"animation\": \"webkit moz\",\n\t            \"animation-delay\": \"webkit moz\",\n\t            \"animation-direction\": \"webkit moz\",\n\t            \"animation-duration\": \"webkit moz\",\n\t            \"animation-fill-mode\": \"webkit moz\",\n\t            \"animation-iteration-count\": \"webkit moz\",\n\t            \"animation-name\": \"webkit moz\",\n\t            \"animation-play-state\": \"webkit moz\",\n\t            \"animation-timing-function\": \"webkit moz\",\n\t            \"appearance\": \"webkit moz\",\n\t            \"border-end\": \"webkit moz\",\n\t            \"border-end-color\": \"webkit moz\",\n\t            \"border-end-style\": \"webkit moz\",\n\t            \"border-end-width\": \"webkit moz\",\n\t            \"border-image\": \"webkit moz o\",\n\t            \"border-radius\": \"webkit\",\n\t            \"border-start\": \"webkit moz\",\n\t            \"border-start-color\": \"webkit moz\",\n\t            \"border-start-style\": \"webkit moz\",\n\t            \"border-start-width\": \"webkit moz\",\n\t            \"box-align\": \"webkit moz ms\",\n\t            \"box-direction\": \"webkit moz ms\",\n\t            \"box-flex\": \"webkit moz ms\",\n\t            \"box-lines\": \"webkit ms\",\n\t            \"box-ordinal-group\": \"webkit moz ms\",\n\t            \"box-orient\": \"webkit moz ms\",\n\t            \"box-pack\": \"webkit moz ms\",\n\t            \"box-sizing\": \"webkit moz\",\n\t            \"box-shadow\": \"webkit moz\",\n\t            \"column-count\": \"webkit moz ms\",\n\t            \"column-gap\": \"webkit moz ms\",\n\t            \"column-rule\": \"webkit moz ms\",\n\t            \"column-rule-color\": \"webkit moz ms\",\n\t            \"column-rule-style\": \"webkit moz ms\",\n\t            \"column-rule-width\": \"webkit moz ms\",\n\t            \"column-width\": \"webkit moz ms\",\n\t            \"hyphens\": \"epub moz\",\n\t            \"line-break\": \"webkit ms\",\n\t            \"margin-end\": \"webkit moz\",\n\t            \"margin-start\": \"webkit moz\",\n\t            \"marquee-speed\": \"webkit wap\",\n\t            \"marquee-style\": \"webkit wap\",\n\t            \"padding-end\": \"webkit moz\",\n\t            \"padding-start\": \"webkit moz\",\n\t            \"tab-size\": \"moz o\",\n\t            \"text-size-adjust\": \"webkit ms\",\n\t            \"transform\": \"webkit moz ms o\",\n\t            \"transform-origin\": \"webkit moz ms o\",\n\t            \"transition\": \"webkit moz o\",\n\t            \"transition-delay\": \"webkit moz o\",\n\t            \"transition-duration\": \"webkit moz o\",\n\t            \"transition-property\": \"webkit moz o\",\n\t            \"transition-timing-function\": \"webkit moz o\",\n\t            \"user-modify\": \"webkit moz\",\n\t            \"user-select\": \"webkit moz ms\",\n\t            \"word-break\": \"epub ms\",\n\t            \"writing-mode\": \"epub ms\"\n\t        };\n\t\n\t        for (prop in compatiblePrefixes) {\n\t            if (compatiblePrefixes.hasOwnProperty(prop)) {\n\t                variations = [];\n\t                prefixed = compatiblePrefixes[prop].split(' ');\n\t                for (i = 0, len = prefixed.length; i < len; i++) {\n\t                    variations.push('-' + prefixed[i] + '-' + prop);\n\t                }\n\t                compatiblePrefixes[prop] = variations;\n\t                arrayPush.apply(applyTo, variations);\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", function () {\n\t            properties = [];\n\t        });\n\t\n\t        parser.addListener(\"startkeyframes\", function (event) {\n\t            inKeyFrame = event.prefix || true;\n\t        });\n\t\n\t        parser.addListener(\"endkeyframes\", function (event) {\n\t            inKeyFrame = false;\n\t        });\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property;\n\t            if (CSSLint.Util.indexOf(applyTo, name.text) > -1) {\n\t\n\t                // e.g., -moz-transform is okay to be alone in @-moz-keyframes\n\t                if (!inKeyFrame || typeof inKeyFrame != \"string\" || name.text.indexOf(\"-\" + inKeyFrame + \"-\") !== 0) {\n\t                    properties.push(name);\n\t                }\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", function (event) {\n\t            if (!properties.length) {\n\t                return;\n\t            }\n\t\n\t            var propertyGroups = {},\n\t                i,\n\t                len,\n\t                name,\n\t                prop,\n\t                variations,\n\t                value,\n\t                full,\n\t                actual,\n\t                item,\n\t                propertiesSpecified;\n\t\n\t            for (i = 0, len = properties.length; i < len; i++) {\n\t                name = properties[i];\n\t\n\t                for (prop in compatiblePrefixes) {\n\t                    if (compatiblePrefixes.hasOwnProperty(prop)) {\n\t                        variations = compatiblePrefixes[prop];\n\t                        if (CSSLint.Util.indexOf(variations, name.text) > -1) {\n\t                            if (!propertyGroups[prop]) {\n\t                                propertyGroups[prop] = {\n\t                                    full: variations.slice(0),\n\t                                    actual: [],\n\t                                    actualNodes: []\n\t                                };\n\t                            }\n\t                            if (CSSLint.Util.indexOf(propertyGroups[prop].actual, name.text) === -1) {\n\t                                propertyGroups[prop].actual.push(name.text);\n\t                                propertyGroups[prop].actualNodes.push(name);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            for (prop in propertyGroups) {\n\t                if (propertyGroups.hasOwnProperty(prop)) {\n\t                    value = propertyGroups[prop];\n\t                    full = value.full;\n\t                    actual = value.actual;\n\t\n\t                    if (full.length > actual.length) {\n\t                        for (i = 0, len = full.length; i < len; i++) {\n\t                            item = full[i];\n\t                            if (CSSLint.Util.indexOf(actual, item) === -1) {\n\t                                propertiesSpecified = actual.length === 1 ? actual[0] : actual.length == 2 ? actual.join(\" and \") : actual.join(\", \");\n\t                                reporter.report(\"The property \" + item + \" is compatible with \" + propertiesSpecified + \" and should be included as well.\", value.actualNodes[0].line, value.actualNodes[0].col, rule);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t});\n\t/*\n\t * Rule: Certain properties don't play well with certain display values.\n\t * - float should not be used with inline-block\n\t * - height, width, margin-top, margin-bottom, float should not be used with inline\n\t * - vertical-align should not be used with block\n\t * - margin, float should not be used with table-*\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"display-property-grouping\",\n\t    name: \"Require properties appropriate for display\",\n\t    desc: \"Certain properties shouldn't be used with certain display property values.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        var propertiesToCheck = {\n\t            display: 1,\n\t            \"float\": \"none\",\n\t            height: 1,\n\t            width: 1,\n\t            margin: 1,\n\t            \"margin-left\": 1,\n\t            \"margin-right\": 1,\n\t            \"margin-bottom\": 1,\n\t            \"margin-top\": 1,\n\t            padding: 1,\n\t            \"padding-left\": 1,\n\t            \"padding-right\": 1,\n\t            \"padding-bottom\": 1,\n\t            \"padding-top\": 1,\n\t            \"vertical-align\": 1\n\t        },\n\t            properties;\n\t\n\t        function reportProperty(name, display, msg) {\n\t            if (properties[name]) {\n\t                if (typeof propertiesToCheck[name] != \"string\" || properties[name].value.toLowerCase() != propertiesToCheck[name]) {\n\t                    reporter.report(msg || name + \" can't be used with display: \" + display + \".\", properties[name].line, properties[name].col, rule);\n\t                }\n\t            }\n\t        }\n\t\n\t        function startRule() {\n\t            properties = {};\n\t        }\n\t\n\t        function endRule() {\n\t\n\t            var display = properties.display ? properties.display.value : null;\n\t            if (display) {\n\t                switch (display) {\n\t\n\t                    case \"inline\":\n\t                        //height, width, margin-top, margin-bottom, float should not be used with inline\n\t                        reportProperty(\"height\", display);\n\t                        reportProperty(\"width\", display);\n\t                        reportProperty(\"margin\", display);\n\t                        reportProperty(\"margin-top\", display);\n\t                        reportProperty(\"margin-bottom\", display);\n\t                        reportProperty(\"float\", display, \"display:inline has no effect on floated elements (but may be used to fix the IE6 double-margin bug).\");\n\t                        break;\n\t\n\t                    case \"block\":\n\t                        //vertical-align should not be used with block\n\t                        reportProperty(\"vertical-align\", display);\n\t                        break;\n\t\n\t                    case \"inline-block\":\n\t                        //float should not be used with inline-block\n\t                        reportProperty(\"float\", display);\n\t                        break;\n\t\n\t                    default:\n\t                        //margin, float should not be used with table\n\t                        if (display.indexOf(\"table-\") === 0) {\n\t                            reportProperty(\"margin\", display);\n\t                            reportProperty(\"margin-left\", display);\n\t                            reportProperty(\"margin-right\", display);\n\t                            reportProperty(\"margin-top\", display);\n\t                            reportProperty(\"margin-bottom\", display);\n\t                            reportProperty(\"float\", display);\n\t                        }\n\t\n\t                    //otherwise do nothing\n\t                }\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t        parser.addListener(\"startkeyframerule\", startRule);\n\t        parser.addListener(\"startpagemargin\", startRule);\n\t        parser.addListener(\"startpage\", startRule);\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text.toLowerCase();\n\t\n\t            if (propertiesToCheck[name]) {\n\t                properties[name] = { value: event.value.text, line: event.property.line, col: event.property.col };\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", endRule);\n\t        parser.addListener(\"endfontface\", endRule);\n\t        parser.addListener(\"endkeyframerule\", endRule);\n\t        parser.addListener(\"endpagemargin\", endRule);\n\t        parser.addListener(\"endpage\", endRule);\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Disallow duplicate background-images (using url).\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"duplicate-background-images\",\n\t    name: \"Disallow duplicate background images\",\n\t    desc: \"Every background-image should be unique. Use a common class for e.g. sprites.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            stack = {};\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text,\n\t                value = event.value,\n\t                i,\n\t                len;\n\t\n\t            if (name.match(/background/i)) {\n\t                for (i = 0, len = value.parts.length; i < len; i++) {\n\t                    if (value.parts[i].type == 'uri') {\n\t                        if (typeof stack[value.parts[i].uri] === 'undefined') {\n\t                            stack[value.parts[i].uri] = event;\n\t                        } else {\n\t                            reporter.report(\"Background image '\" + value.parts[i].uri + \"' was used multiple times, first declared at line \" + stack[value.parts[i].uri].line + \", col \" + stack[value.parts[i].uri].col + \".\", event.line, event.col, rule);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t});\n\t/*\n\t * Rule: Duplicate properties must appear one after the other. If an already-defined\n\t * property appears somewhere else in the rule, then it's likely an error.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"duplicate-properties\",\n\t    name: \"Disallow duplicate properties\",\n\t    desc: \"Duplicate properties must appear one after the other.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            properties,\n\t            lastProperty;\n\t\n\t        function startRule(event) {\n\t            properties = {};\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t        parser.addListener(\"startpage\", startRule);\n\t        parser.addListener(\"startpagemargin\", startRule);\n\t        parser.addListener(\"startkeyframerule\", startRule);\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var property = event.property,\n\t                name = property.text.toLowerCase();\n\t\n\t            if (properties[name] && (lastProperty != name || properties[name] == event.value.text)) {\n\t                reporter.report(\"Duplicate property '\" + event.property + \"' found.\", event.line, event.col, rule);\n\t            }\n\t\n\t            properties[name] = event.value.text;\n\t            lastProperty = name;\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Style rules without any properties defined should be removed.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"empty-rules\",\n\t    name: \"Disallow empty rules\",\n\t    desc: \"Rules without any properties specified should be removed.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        parser.addListener(\"startrule\", function () {\n\t            count = 0;\n\t        });\n\t\n\t        parser.addListener(\"property\", function () {\n\t            count++;\n\t        });\n\t\n\t        parser.addListener(\"endrule\", function (event) {\n\t            var selectors = event.selectors;\n\t            if (count === 0) {\n\t                reporter.report(\"Rule is empty.\", selectors[0].line, selectors[0].col, rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: There should be no syntax errors. (Duh.)\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"errors\",\n\t    name: \"Parsing Errors\",\n\t    desc: \"This rule looks for recoverable syntax errors.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"error\", function (event) {\n\t            reporter.error(event.message, event.line, event.col, rule);\n\t        });\n\t    }\n\t\n\t});\n\t\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"fallback-colors\",\n\t    name: \"Require fallback colors\",\n\t    desc: \"For older browsers that don't support RGBA, HSL, or HSLA, provide a fallback color.\",\n\t    browsers: \"IE6,IE7,IE8\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            lastProperty,\n\t            propertiesToCheck = {\n\t            color: 1,\n\t            background: 1,\n\t            \"border-color\": 1,\n\t            \"border-top-color\": 1,\n\t            \"border-right-color\": 1,\n\t            \"border-bottom-color\": 1,\n\t            \"border-left-color\": 1,\n\t            border: 1,\n\t            \"border-top\": 1,\n\t            \"border-right\": 1,\n\t            \"border-bottom\": 1,\n\t            \"border-left\": 1,\n\t            \"background-color\": 1\n\t        },\n\t            properties;\n\t\n\t        function startRule(event) {\n\t            properties = {};\n\t            lastProperty = null;\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t        parser.addListener(\"startpage\", startRule);\n\t        parser.addListener(\"startpagemargin\", startRule);\n\t        parser.addListener(\"startkeyframerule\", startRule);\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var property = event.property,\n\t                name = property.text.toLowerCase(),\n\t                parts = event.value.parts,\n\t                i = 0,\n\t                colorType = \"\",\n\t                len = parts.length;\n\t\n\t            if (propertiesToCheck[name]) {\n\t                while (i < len) {\n\t                    if (parts[i].type == \"color\") {\n\t                        if (\"alpha\" in parts[i] || \"hue\" in parts[i]) {\n\t\n\t                            if (/([^\\)]+)\\(/.test(parts[i])) {\n\t                                colorType = RegExp.$1.toUpperCase();\n\t                            }\n\t\n\t                            if (!lastProperty || lastProperty.property.text.toLowerCase() != name || lastProperty.colorType != \"compat\") {\n\t                                reporter.report(\"Fallback \" + name + \" (hex or RGB) should precede \" + colorType + \" \" + name + \".\", event.line, event.col, rule);\n\t                            }\n\t                        } else {\n\t                            event.colorType = \"compat\";\n\t                        }\n\t                    }\n\t\n\t                    i++;\n\t                }\n\t            }\n\t\n\t            lastProperty = event;\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: You shouldn't use more than 10 floats. If you do, there's probably\n\t * room for some abstraction.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"floats\",\n\t    name: \"Disallow too many floats\",\n\t    desc: \"This rule tests if the float property is used too many times\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t        var count = 0;\n\t\n\t        //count how many times \"float\" is used\n\t        parser.addListener(\"property\", function (event) {\n\t            if (event.property.text.toLowerCase() == \"float\" && event.value.text.toLowerCase() != \"none\") {\n\t                count++;\n\t            }\n\t        });\n\t\n\t        //report the results\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            reporter.stat(\"floats\", count);\n\t            if (count >= 10) {\n\t                reporter.rollupWarn(\"Too many floats (\" + count + \"), you're probably using them for layout. Consider using a grid system instead.\", rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Avoid too many @font-face declarations in the same stylesheet.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"font-faces\",\n\t    name: \"Don't use too many web fonts\",\n\t    desc: \"Too many different web fonts in the same stylesheet.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        parser.addListener(\"startfontface\", function () {\n\t            count++;\n\t        });\n\t\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            if (count > 5) {\n\t                reporter.rollupWarn(\"Too many @font-face declarations (\" + count + \").\", rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: You shouldn't need more than 9 font-size declarations.\n\t */\n\t\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"font-sizes\",\n\t    name: \"Disallow too many font sizes\",\n\t    desc: \"Checks the number of font-size declarations.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        //check for use of \"font-size\"\n\t        parser.addListener(\"property\", function (event) {\n\t            if (event.property == \"font-size\") {\n\t                count++;\n\t            }\n\t        });\n\t\n\t        //report the results\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            reporter.stat(\"font-sizes\", count);\n\t            if (count >= 10) {\n\t                reporter.rollupWarn(\"Too many font-size declarations (\" + count + \"), abstraction needed.\", rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: When using a vendor-prefixed gradient, make sure to use them all.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"gradients\",\n\t    name: \"Require all gradient definitions\",\n\t    desc: \"When using a vendor-prefixed gradient, make sure to use them all.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            gradients;\n\t\n\t        parser.addListener(\"startrule\", function () {\n\t            gradients = {\n\t                moz: 0,\n\t                webkit: 0,\n\t                oldWebkit: 0,\n\t                o: 0\n\t            };\n\t        });\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t\n\t            if (/\\-(moz|o|webkit)(?:\\-(?:linear|radial))\\-gradient/i.test(event.value)) {\n\t                gradients[RegExp.$1] = 1;\n\t            } else if (/\\-webkit\\-gradient/i.test(event.value)) {\n\t                gradients.oldWebkit = 1;\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", function (event) {\n\t            var missing = [];\n\t\n\t            if (!gradients.moz) {\n\t                missing.push(\"Firefox 3.6+\");\n\t            }\n\t\n\t            if (!gradients.webkit) {\n\t                missing.push(\"Webkit (Safari 5+, Chrome)\");\n\t            }\n\t\n\t            if (!gradients.oldWebkit) {\n\t                missing.push(\"Old Webkit (Safari 4+, Chrome)\");\n\t            }\n\t\n\t            if (!gradients.o) {\n\t                missing.push(\"Opera 11.1+\");\n\t            }\n\t\n\t            if (missing.length && missing.length < 4) {\n\t                reporter.report(\"Missing vendor-prefixed CSS gradients for \" + missing.join(\", \") + \".\", event.selectors[0].line, event.selectors[0].col, rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t\n\t/*\n\t * Rule: Don't use IDs for selectors.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"ids\",\n\t    name: \"Disallow IDs in selectors\",\n\t    desc: \"Selectors should not contain IDs.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                modifier,\n\t                idCount,\n\t                i,\n\t                j,\n\t                k;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t                idCount = 0;\n\t\n\t                for (j = 0; j < selector.parts.length; j++) {\n\t                    part = selector.parts[j];\n\t                    if (part.type == parser.SELECTOR_PART_TYPE) {\n\t                        for (k = 0; k < part.modifiers.length; k++) {\n\t                            modifier = part.modifiers[k];\n\t                            if (modifier.type == \"id\") {\n\t                                idCount++;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (idCount == 1) {\n\t                    reporter.report(\"Don't use IDs in selectors.\", selector.line, selector.col, rule);\n\t                } else if (idCount > 1) {\n\t                    reporter.report(idCount + \" IDs in the selector, really?\", selector.line, selector.col, rule);\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Don't use @import, use <link> instead.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"import\",\n\t    name: \"Disallow @import\",\n\t    desc: \"Don't use @import, use <link> instead.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"import\", function (event) {\n\t            reporter.report(\"@import prevents parallel downloads, use <link> instead.\", event.line, event.col, rule);\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Make sure !important is not overused, this could lead to specificity\n\t * war. Display a warning on !important declarations, an error if it's\n\t * used more at least 10 times.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"important\",\n\t    name: \"Disallow !important\",\n\t    desc: \"Be careful when using !important declaration\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        //warn that important is used and increment the declaration counter\n\t        parser.addListener(\"property\", function (event) {\n\t            if (event.important === true) {\n\t                count++;\n\t                reporter.report(\"Use of !important\", event.line, event.col, rule);\n\t            }\n\t        });\n\t\n\t        //if there are more than 10, show an error\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            reporter.stat(\"important\", count);\n\t            if (count >= 10) {\n\t                reporter.rollupWarn(\"Too many !important declarations (\" + count + \"), try to use less than 10 to avoid specificity issues.\", rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Properties should be known (listed in CSS3 specification) or\n\t * be a vendor-prefixed property.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"known-properties\",\n\t    name: \"Require use of known properties\",\n\t    desc: \"Properties should be known (listed in CSS3 specification) or be a vendor-prefixed property.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text.toLowerCase();\n\t\n\t            // the check is handled entirely by the parser-lib (https://github.com/nzakas/parser-lib)\n\t            if (event.invalid) {\n\t                reporter.report(event.invalid.message, event.line, event.col, rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: outline: none or outline: 0 should only be used in a :focus rule\n\t *       and only if there are other properties in the same rule.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"outline-none\",\n\t    name: \"Disallow outline: none\",\n\t    desc: \"Use of outline: none or outline: 0 should be limited to :focus rules.\",\n\t    browsers: \"All\",\n\t    tags: [\"Accessibility\"],\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            lastRule;\n\t\n\t        function startRule(event) {\n\t            if (event.selectors) {\n\t                lastRule = {\n\t                    line: event.line,\n\t                    col: event.col,\n\t                    selectors: event.selectors,\n\t                    propCount: 0,\n\t                    outline: false\n\t                };\n\t            } else {\n\t                lastRule = null;\n\t            }\n\t        }\n\t\n\t        function endRule(event) {\n\t            if (lastRule) {\n\t                if (lastRule.outline) {\n\t                    if (lastRule.selectors.toString().toLowerCase().indexOf(\":focus\") == -1) {\n\t                        reporter.report(\"Outlines should only be modified using :focus.\", lastRule.line, lastRule.col, rule);\n\t                    } else if (lastRule.propCount == 1) {\n\t                        reporter.report(\"Outlines shouldn't be hidden unless other visual changes are made.\", lastRule.line, lastRule.col, rule);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t        parser.addListener(\"startpage\", startRule);\n\t        parser.addListener(\"startpagemargin\", startRule);\n\t        parser.addListener(\"startkeyframerule\", startRule);\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text.toLowerCase(),\n\t                value = event.value;\n\t\n\t            if (lastRule) {\n\t                lastRule.propCount++;\n\t                if (name == \"outline\" && (value == \"none\" || value == \"0\")) {\n\t                    lastRule.outline = true;\n\t                }\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", endRule);\n\t        parser.addListener(\"endfontface\", endRule);\n\t        parser.addListener(\"endpage\", endRule);\n\t        parser.addListener(\"endpagemargin\", endRule);\n\t        parser.addListener(\"endkeyframerule\", endRule);\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Don't use classes or IDs with elements (a.foo or a#foo).\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"overqualified-elements\",\n\t    name: \"Disallow overqualified elements\",\n\t    desc: \"Don't use classes or IDs with elements (a.foo or a#foo).\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            classes = {};\n\t\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                modifier,\n\t                i,\n\t                j,\n\t                k;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t\n\t                for (j = 0; j < selector.parts.length; j++) {\n\t                    part = selector.parts[j];\n\t                    if (part.type == parser.SELECTOR_PART_TYPE) {\n\t                        for (k = 0; k < part.modifiers.length; k++) {\n\t                            modifier = part.modifiers[k];\n\t                            if (part.elementName && modifier.type == \"id\") {\n\t                                reporter.report(\"Element (\" + part + \") is overqualified, just use \" + modifier + \" without element name.\", part.line, part.col, rule);\n\t                            } else if (modifier.type == \"class\") {\n\t\n\t                                if (!classes[modifier]) {\n\t                                    classes[modifier] = [];\n\t                                }\n\t                                classes[modifier].push({ modifier: modifier, part: part });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endstylesheet\", function () {\n\t\n\t            var prop;\n\t            for (prop in classes) {\n\t                if (classes.hasOwnProperty(prop)) {\n\t\n\t                    //one use means that this is overqualified\n\t                    if (classes[prop].length == 1 && classes[prop][0].part.elementName) {\n\t                        reporter.report(\"Element (\" + classes[prop][0].part + \") is overqualified, just use \" + classes[prop][0].modifier + \" without element name.\", classes[prop][0].part.line, classes[prop][0].part.col, rule);\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Headings (h1-h6) should not be qualified (namespaced).\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"qualified-headings\",\n\t    name: \"Disallow qualified headings\",\n\t    desc: \"Headings should not be qualified (namespaced).\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                i,\n\t                j;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t\n\t                for (j = 0; j < selector.parts.length; j++) {\n\t                    part = selector.parts[j];\n\t                    if (part.type == parser.SELECTOR_PART_TYPE) {\n\t                        if (part.elementName && /h[1-6]/.test(part.elementName.toString()) && j > 0) {\n\t                            reporter.report(\"Heading (\" + part.elementName + \") should not be qualified.\", part.line, part.col, rule);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Selectors that look like regular expressions are slow and should be avoided.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"regex-selectors\",\n\t    name: \"Disallow selectors that look like regexs\",\n\t    desc: \"Selectors that look like regular expressions are slow and should be avoided.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                modifier,\n\t                i,\n\t                j,\n\t                k;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t                for (j = 0; j < selector.parts.length; j++) {\n\t                    part = selector.parts[j];\n\t                    if (part.type == parser.SELECTOR_PART_TYPE) {\n\t                        for (k = 0; k < part.modifiers.length; k++) {\n\t                            modifier = part.modifiers[k];\n\t                            if (modifier.type == \"attribute\") {\n\t                                if (/([\\~\\|\\^\\$\\*]=)/.test(modifier)) {\n\t                                    reporter.report(\"Attribute selectors with \" + RegExp.$1 + \" are slow!\", modifier.line, modifier.col, rule);\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Total number of rules should not exceed x.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"rules-count\",\n\t    name: \"Rules Count\",\n\t    desc: \"Track how many rules there are.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        //count each rule\n\t        parser.addListener(\"startrule\", function () {\n\t            count++;\n\t        });\n\t\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            reporter.stat(\"rule-count\", count);\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Warn people with approaching the IE 4095 limit\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"selector-max-approaching\",\n\t    name: \"Warn when approaching the 4095 selector limit for IE\",\n\t    desc: \"Will warn when selector count is >= 3800 selectors.\",\n\t    browsers: \"IE\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        parser.addListener('startrule', function (event) {\n\t            count += event.selectors.length;\n\t        });\n\t\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            if (count >= 3800) {\n\t                reporter.report(\"You have \" + count + \" selectors. Internet Explorer supports a maximum of 4095 selectors per stylesheet. Consider refactoring.\", 0, 0, rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t\n\t/*\n\t * Rule: Warn people past the IE 4095 limit\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"selector-max\",\n\t    name: \"Error when past the 4095 selector limit for IE\",\n\t    desc: \"Will error when selector count is > 4095.\",\n\t    browsers: \"IE\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            count = 0;\n\t\n\t        parser.addListener('startrule', function (event) {\n\t            count += event.selectors.length;\n\t        });\n\t\n\t        parser.addListener(\"endstylesheet\", function () {\n\t            if (count > 4095) {\n\t                reporter.report(\"You have \" + count + \" selectors. Internet Explorer supports a maximum of 4095 selectors per stylesheet. Consider refactoring.\", 0, 0, rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Use shorthand properties where possible.\n\t *\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"shorthand\",\n\t    name: \"Require shorthand properties\",\n\t    desc: \"Use shorthand properties where possible.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            prop,\n\t            i,\n\t            len,\n\t            propertiesToCheck = {},\n\t            properties,\n\t            mapping = {\n\t            \"margin\": [\"margin-top\", \"margin-bottom\", \"margin-left\", \"margin-right\"],\n\t            \"padding\": [\"padding-top\", \"padding-bottom\", \"padding-left\", \"padding-right\"]\n\t        };\n\t\n\t        //initialize propertiesToCheck\n\t        for (prop in mapping) {\n\t            if (mapping.hasOwnProperty(prop)) {\n\t                for (i = 0, len = mapping[prop].length; i < len; i++) {\n\t                    propertiesToCheck[mapping[prop][i]] = prop;\n\t                }\n\t            }\n\t        }\n\t\n\t        function startRule(event) {\n\t            properties = {};\n\t        }\n\t\n\t        //event handler for end of rules\n\t        function endRule(event) {\n\t\n\t            var prop, i, len, total;\n\t\n\t            //check which properties this rule has\n\t            for (prop in mapping) {\n\t                if (mapping.hasOwnProperty(prop)) {\n\t                    total = 0;\n\t\n\t                    for (i = 0, len = mapping[prop].length; i < len; i++) {\n\t                        total += properties[mapping[prop][i]] ? 1 : 0;\n\t                    }\n\t\n\t                    if (total == mapping[prop].length) {\n\t                        reporter.report(\"The properties \" + mapping[prop].join(\", \") + \" can be replaced by \" + prop + \".\", event.line, event.col, rule);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t\n\t        //check for use of \"font-size\"\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.toString().toLowerCase(),\n\t                value = event.value.parts[0].value;\n\t\n\t            if (propertiesToCheck[name]) {\n\t                properties[name] = 1;\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", endRule);\n\t        parser.addListener(\"endfontface\", endRule);\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Don't use properties with a star prefix.\n\t *\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"star-property-hack\",\n\t    name: \"Disallow properties with a star prefix\",\n\t    desc: \"Checks for the star property hack (targets IE6/7)\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        //check if property name starts with \"*\"\n\t        parser.addListener(\"property\", function (event) {\n\t            var property = event.property;\n\t\n\t            if (property.hack == \"*\") {\n\t                reporter.report(\"Property with star prefix found.\", event.property.line, event.property.col, rule);\n\t            }\n\t        });\n\t    }\n\t});\n\t/*\n\t * Rule: Don't use text-indent for image replacement if you need to support rtl.\n\t *\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"text-indent\",\n\t    name: \"Disallow negative text-indent\",\n\t    desc: \"Checks for text indent less than -99px\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            textIndent,\n\t            direction;\n\t\n\t        function startRule(event) {\n\t            textIndent = false;\n\t            direction = \"inherit\";\n\t        }\n\t\n\t        //event handler for end of rules\n\t        function endRule(event) {\n\t            if (textIndent && direction != \"ltr\") {\n\t                reporter.report(\"Negative text-indent doesn't work well with RTL. If you use text-indent for image replacement explicitly set direction for that item to ltr.\", textIndent.line, textIndent.col, rule);\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t\n\t        //check for use of \"font-size\"\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.toString().toLowerCase(),\n\t                value = event.value;\n\t\n\t            if (name == \"text-indent\" && value.parts[0].value < -99) {\n\t                textIndent = event.property;\n\t            } else if (name == \"direction\" && value == \"ltr\") {\n\t                direction = \"ltr\";\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endrule\", endRule);\n\t        parser.addListener(\"endfontface\", endRule);\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Don't use properties with a underscore prefix.\n\t *\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"underscore-property-hack\",\n\t    name: \"Disallow properties with an underscore prefix\",\n\t    desc: \"Checks for the underscore property hack (targets IE6)\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        //check if property name starts with \"_\"\n\t        parser.addListener(\"property\", function (event) {\n\t            var property = event.property;\n\t\n\t            if (property.hack == \"_\") {\n\t                reporter.report(\"Property with underscore prefix found.\", event.property.line, event.property.col, rule);\n\t            }\n\t        });\n\t    }\n\t});\n\t/*\n\t * Rule: Headings (h1-h6) should be defined only once.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"unique-headings\",\n\t    name: \"Headings should only be defined once\",\n\t    desc: \"Headings should be defined only once.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        var headings = {\n\t            h1: 0,\n\t            h2: 0,\n\t            h3: 0,\n\t            h4: 0,\n\t            h5: 0,\n\t            h6: 0\n\t        };\n\t\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                pseudo,\n\t                i,\n\t                j;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t                part = selector.parts[selector.parts.length - 1];\n\t\n\t                if (part.elementName && /(h[1-6])/i.test(part.elementName.toString())) {\n\t\n\t                    for (j = 0; j < part.modifiers.length; j++) {\n\t                        if (part.modifiers[j].type == \"pseudo\") {\n\t                            pseudo = true;\n\t                            break;\n\t                        }\n\t                    }\n\t\n\t                    if (!pseudo) {\n\t                        headings[RegExp.$1]++;\n\t                        if (headings[RegExp.$1] > 1) {\n\t                            reporter.report(\"Heading (\" + part.elementName + \") has already been defined.\", part.line, part.col, rule);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t\n\t        parser.addListener(\"endstylesheet\", function (event) {\n\t            var prop,\n\t                messages = [];\n\t\n\t            for (prop in headings) {\n\t                if (headings.hasOwnProperty(prop)) {\n\t                    if (headings[prop] > 1) {\n\t                        messages.push(headings[prop] + \" \" + prop + \"s\");\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (messages.length) {\n\t                reporter.rollupWarn(\"You have \" + messages.join(\", \") + \" defined in this stylesheet.\", rule);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Don't use universal selector because it's slow.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"universal-selector\",\n\t    name: \"Disallow universal selector\",\n\t    desc: \"The universal selector (*) is known to be slow.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"startrule\", function (event) {\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                modifier,\n\t                i,\n\t                j,\n\t                k;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t\n\t                part = selector.parts[selector.parts.length - 1];\n\t                if (part.elementName == \"*\") {\n\t                    reporter.report(rule.desc, part.line, part.col, rule);\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: Don't use unqualified attribute selectors because they're just like universal selectors.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"unqualified-attributes\",\n\t    name: \"Disallow unqualified attribute selectors\",\n\t    desc: \"Unqualified attribute selectors are known to be slow.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        parser.addListener(\"startrule\", function (event) {\n\t\n\t            var selectors = event.selectors,\n\t                selector,\n\t                part,\n\t                modifier,\n\t                i,\n\t                j,\n\t                k;\n\t\n\t            for (i = 0; i < selectors.length; i++) {\n\t                selector = selectors[i];\n\t\n\t                part = selector.parts[selector.parts.length - 1];\n\t                if (part.type == parser.SELECTOR_PART_TYPE) {\n\t                    for (k = 0; k < part.modifiers.length; k++) {\n\t                        modifier = part.modifiers[k];\n\t                        if (modifier.type == \"attribute\" && (!part.elementName || part.elementName == \"*\")) {\n\t                            reporter.report(rule.desc, part.line, part.col, rule);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: When using a vendor-prefixed property, make sure to\n\t * include the standard one.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"vendor-prefix\",\n\t    name: \"Require standard property with vendor prefix\",\n\t    desc: \"When using a vendor-prefixed property, make sure to include the standard one.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this,\n\t            properties,\n\t            num,\n\t            propertiesToCheck = {\n\t            \"-webkit-border-radius\": \"border-radius\",\n\t            \"-webkit-border-top-left-radius\": \"border-top-left-radius\",\n\t            \"-webkit-border-top-right-radius\": \"border-top-right-radius\",\n\t            \"-webkit-border-bottom-left-radius\": \"border-bottom-left-radius\",\n\t            \"-webkit-border-bottom-right-radius\": \"border-bottom-right-radius\",\n\t\n\t            \"-o-border-radius\": \"border-radius\",\n\t            \"-o-border-top-left-radius\": \"border-top-left-radius\",\n\t            \"-o-border-top-right-radius\": \"border-top-right-radius\",\n\t            \"-o-border-bottom-left-radius\": \"border-bottom-left-radius\",\n\t            \"-o-border-bottom-right-radius\": \"border-bottom-right-radius\",\n\t\n\t            \"-moz-border-radius\": \"border-radius\",\n\t            \"-moz-border-radius-topleft\": \"border-top-left-radius\",\n\t            \"-moz-border-radius-topright\": \"border-top-right-radius\",\n\t            \"-moz-border-radius-bottomleft\": \"border-bottom-left-radius\",\n\t            \"-moz-border-radius-bottomright\": \"border-bottom-right-radius\",\n\t\n\t            \"-moz-column-count\": \"column-count\",\n\t            \"-webkit-column-count\": \"column-count\",\n\t\n\t            \"-moz-column-gap\": \"column-gap\",\n\t            \"-webkit-column-gap\": \"column-gap\",\n\t\n\t            \"-moz-column-rule\": \"column-rule\",\n\t            \"-webkit-column-rule\": \"column-rule\",\n\t\n\t            \"-moz-column-rule-style\": \"column-rule-style\",\n\t            \"-webkit-column-rule-style\": \"column-rule-style\",\n\t\n\t            \"-moz-column-rule-color\": \"column-rule-color\",\n\t            \"-webkit-column-rule-color\": \"column-rule-color\",\n\t\n\t            \"-moz-column-rule-width\": \"column-rule-width\",\n\t            \"-webkit-column-rule-width\": \"column-rule-width\",\n\t\n\t            \"-moz-column-width\": \"column-width\",\n\t            \"-webkit-column-width\": \"column-width\",\n\t\n\t            \"-webkit-column-span\": \"column-span\",\n\t            \"-webkit-columns\": \"columns\",\n\t\n\t            \"-moz-box-shadow\": \"box-shadow\",\n\t            \"-webkit-box-shadow\": \"box-shadow\",\n\t\n\t            \"-moz-transform\": \"transform\",\n\t            \"-webkit-transform\": \"transform\",\n\t            \"-o-transform\": \"transform\",\n\t            \"-ms-transform\": \"transform\",\n\t\n\t            \"-moz-transform-origin\": \"transform-origin\",\n\t            \"-webkit-transform-origin\": \"transform-origin\",\n\t            \"-o-transform-origin\": \"transform-origin\",\n\t            \"-ms-transform-origin\": \"transform-origin\",\n\t\n\t            \"-moz-box-sizing\": \"box-sizing\",\n\t            \"-webkit-box-sizing\": \"box-sizing\",\n\t\n\t            \"-moz-user-select\": \"user-select\",\n\t            \"-khtml-user-select\": \"user-select\",\n\t            \"-webkit-user-select\": \"user-select\"\n\t        };\n\t\n\t        //event handler for beginning of rules\n\t        function startRule() {\n\t            properties = {};\n\t            num = 1;\n\t        }\n\t\n\t        //event handler for end of rules\n\t        function endRule(event) {\n\t            var prop,\n\t                i,\n\t                len,\n\t                standard,\n\t                needed,\n\t                actual,\n\t                needsStandard = [];\n\t\n\t            for (prop in properties) {\n\t                if (propertiesToCheck[prop]) {\n\t                    needsStandard.push({ actual: prop, needed: propertiesToCheck[prop] });\n\t                }\n\t            }\n\t\n\t            for (i = 0, len = needsStandard.length; i < len; i++) {\n\t                needed = needsStandard[i].needed;\n\t                actual = needsStandard[i].actual;\n\t\n\t                if (!properties[needed]) {\n\t                    reporter.report(\"Missing standard property '\" + needed + \"' to go along with '\" + actual + \"'.\", properties[actual][0].name.line, properties[actual][0].name.col, rule);\n\t                } else {\n\t                    //make sure standard property is last\n\t                    if (properties[needed][0].pos < properties[actual][0].pos) {\n\t                        reporter.report(\"Standard property '\" + needed + \"' should come after vendor-prefixed property '\" + actual + \"'.\", properties[actual][0].name.line, properties[actual][0].name.col, rule);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        parser.addListener(\"startrule\", startRule);\n\t        parser.addListener(\"startfontface\", startRule);\n\t        parser.addListener(\"startpage\", startRule);\n\t        parser.addListener(\"startpagemargin\", startRule);\n\t        parser.addListener(\"startkeyframerule\", startRule);\n\t\n\t        parser.addListener(\"property\", function (event) {\n\t            var name = event.property.text.toLowerCase();\n\t\n\t            if (!properties[name]) {\n\t                properties[name] = [];\n\t            }\n\t\n\t            properties[name].push({ name: event.property, value: event.value, pos: num++ });\n\t        });\n\t\n\t        parser.addListener(\"endrule\", endRule);\n\t        parser.addListener(\"endfontface\", endRule);\n\t        parser.addListener(\"endpage\", endRule);\n\t        parser.addListener(\"endpagemargin\", endRule);\n\t        parser.addListener(\"endkeyframerule\", endRule);\n\t    }\n\t\n\t});\n\t/*\n\t * Rule: You don't need to specify units when a value is 0.\n\t */\n\t/*global CSSLint*/\n\tCSSLint.addRule({\n\t\n\t    //rule information\n\t    id: \"zero-units\",\n\t    name: \"Disallow units for 0 values\",\n\t    desc: \"You don't need to specify units when a value is 0.\",\n\t    browsers: \"All\",\n\t\n\t    //initialization\n\t    init: function init(parser, reporter) {\n\t        var rule = this;\n\t\n\t        //count how many times \"float\" is used\n\t        parser.addListener(\"property\", function (event) {\n\t            var parts = event.value.parts,\n\t                i = 0,\n\t                len = parts.length;\n\t\n\t            while (i < len) {\n\t                if ((parts[i].units || parts[i].type == \"percentage\") && parts[i].value === 0 && parts[i].type != \"time\") {\n\t                    reporter.report(\"Values of 0 shouldn't have units specified.\", parts[i].line, parts[i].col, rule);\n\t                }\n\t                i++;\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t/*global CSSLint*/\n\t(function () {\n\t\n\t    /**\n\t     * Replace special characters before write to output.\n\t     *\n\t     * Rules:\n\t     *  - single quotes is the escape sequence for double-quotes\n\t     *  - &amp; is the escape sequence for &\n\t     *  - &lt; is the escape sequence for <\n\t     *  - &gt; is the escape sequence for >\n\t     *\n\t     * @param {String} message to escape\n\t     * @return escaped message as {String}\n\t     */\n\t    var xmlEscape = function xmlEscape(str) {\n\t        if (!str || str.constructor !== String) {\n\t            return \"\";\n\t        }\n\t\n\t        return str.replace(/[\\\"&><]/g, function (match) {\n\t            switch (match) {\n\t                case \"\\\"\":\n\t                    return \"&quot;\";\n\t                case \"&\":\n\t                    return \"&amp;\";\n\t                case \"<\":\n\t                    return \"&lt;\";\n\t                case \">\":\n\t                    return \"&gt;\";\n\t            }\n\t        });\n\t    };\n\t\n\t    CSSLint.addFormatter({\n\t        //format information\n\t        id: \"checkstyle-xml\",\n\t        name: \"Checkstyle XML format\",\n\t\n\t        /**\n\t         * Return opening root XML tag.\n\t         * @return {String} to prepend before all results\n\t         */\n\t        startFormat: function startFormat() {\n\t            return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><checkstyle>\";\n\t        },\n\t\n\t        /**\n\t         * Return closing root XML tag.\n\t         * @return {String} to append after all results\n\t         */\n\t        endFormat: function endFormat() {\n\t            return \"</checkstyle>\";\n\t        },\n\t\n\t        /**\n\t         * Returns message when there is a file read error.\n\t         * @param {String} filename The name of the file that caused the error.\n\t         * @param {String} message The error message\n\t         * @return {String} The error message.\n\t         */\n\t        readError: function readError(filename, message) {\n\t            return \"<file name=\\\"\" + xmlEscape(filename) + \"\\\"><error line=\\\"0\\\" column=\\\"0\\\" severty=\\\"error\\\" message=\\\"\" + xmlEscape(message) + \"\\\"></error></file>\";\n\t        },\n\t\n\t        /**\n\t         * Given CSS Lint results for a file, return output for this format.\n\t         * @param results {Object} with error and warning messages\n\t         * @param filename {String} relative file path\n\t         * @param options {Object} (UNUSED for now) specifies special handling of output\n\t         * @return {String} output for results\n\t         */\n\t        formatResults: function formatResults(results, filename, options) {\n\t            var messages = results.messages,\n\t                output = [];\n\t\n\t            /**\n\t             * Generate a source string for a rule.\n\t             * Checkstyle source strings usually resemble Java class names e.g\n\t             * net.csslint.SomeRuleName\n\t             * @param {Object} rule\n\t             * @return rule source as {String}\n\t             */\n\t            var generateSource = function generateSource(rule) {\n\t                if (!rule || !('name' in rule)) {\n\t                    return \"\";\n\t                }\n\t                return 'net.csslint.' + rule.name.replace(/\\s/g, '');\n\t            };\n\t\n\t            if (messages.length > 0) {\n\t                output.push(\"<file name=\\\"\" + filename + \"\\\">\");\n\t                CSSLint.Util.forEach(messages, function (message, i) {\n\t                    //ignore rollups for now\n\t                    if (!message.rollup) {\n\t                        output.push(\"<error line=\\\"\" + message.line + \"\\\" column=\\\"\" + message.col + \"\\\" severity=\\\"\" + message.type + \"\\\"\" + \" message=\\\"\" + xmlEscape(message.message) + \"\\\" source=\\\"\" + generateSource(message.rule) + \"\\\"/>\");\n\t                    }\n\t                });\n\t                output.push(\"</file>\");\n\t            }\n\t\n\t            return output.join(\"\");\n\t        }\n\t    });\n\t})();\n\t/*global CSSLint*/\n\tCSSLint.addFormatter({\n\t    //format information\n\t    id: \"compact\",\n\t    name: \"Compact, 'porcelain' format\",\n\t\n\t    /**\n\t     * Return content to be printed before all file results.\n\t     * @return {String} to prepend before all results\n\t     */\n\t    startFormat: function startFormat() {\n\t        return \"\";\n\t    },\n\t\n\t    /**\n\t     * Return content to be printed after all file results.\n\t     * @return {String} to append after all results\n\t     */\n\t    endFormat: function endFormat() {\n\t        return \"\";\n\t    },\n\t\n\t    /**\n\t     * Given CSS Lint results for a file, return output for this format.\n\t     * @param results {Object} with error and warning messages\n\t     * @param filename {String} relative file path\n\t     * @param options {Object} (Optional) specifies special handling of output\n\t     * @return {String} output for results\n\t     */\n\t    formatResults: function formatResults(results, filename, options) {\n\t        var messages = results.messages,\n\t            output = \"\";\n\t        options = options || {};\n\t\n\t        /**\n\t         * Capitalize and return given string.\n\t         * @param str {String} to capitalize\n\t         * @return {String} capitalized\n\t         */\n\t        var capitalize = function capitalize(str) {\n\t            return str.charAt(0).toUpperCase() + str.slice(1);\n\t        };\n\t\n\t        if (messages.length === 0) {\n\t            return options.quiet ? \"\" : filename + \": Lint Free!\";\n\t        }\n\t\n\t        CSSLint.Util.forEach(messages, function (message, i) {\n\t            if (message.rollup) {\n\t                output += filename + \": \" + capitalize(message.type) + \" - \" + message.message + \"\\n\";\n\t            } else {\n\t                output += filename + \": \" + \"line \" + message.line + \", col \" + message.col + \", \" + capitalize(message.type) + \" - \" + message.message + \"\\n\";\n\t            }\n\t        });\n\t\n\t        return output;\n\t    }\n\t});\n\t/*global CSSLint*/\n\tCSSLint.addFormatter({\n\t    //format information\n\t    id: \"csslint-xml\",\n\t    name: \"CSSLint XML format\",\n\t\n\t    /**\n\t     * Return opening root XML tag.\n\t     * @return {String} to prepend before all results\n\t     */\n\t    startFormat: function startFormat() {\n\t        return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><csslint>\";\n\t    },\n\t\n\t    /**\n\t     * Return closing root XML tag.\n\t     * @return {String} to append after all results\n\t     */\n\t    endFormat: function endFormat() {\n\t        return \"</csslint>\";\n\t    },\n\t\n\t    /**\n\t     * Given CSS Lint results for a file, return output for this format.\n\t     * @param results {Object} with error and warning messages\n\t     * @param filename {String} relative file path\n\t     * @param options {Object} (UNUSED for now) specifies special handling of output\n\t     * @return {String} output for results\n\t     */\n\t    formatResults: function formatResults(results, filename, options) {\n\t        var messages = results.messages,\n\t            output = [];\n\t\n\t        /**\n\t         * Replace special characters before write to output.\n\t         *\n\t         * Rules:\n\t         *  - single quotes is the escape sequence for double-quotes\n\t         *  - &amp; is the escape sequence for &\n\t         *  - &lt; is the escape sequence for <\n\t         *  - &gt; is the escape sequence for >\n\t         *\n\t         * @param {String} message to escape\n\t         * @return escaped message as {String}\n\t         */\n\t        var escapeSpecialCharacters = function escapeSpecialCharacters(str) {\n\t            if (!str || str.constructor !== String) {\n\t                return \"\";\n\t            }\n\t            return str.replace(/\\\"/g, \"'\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\t        };\n\t\n\t        if (messages.length > 0) {\n\t            output.push(\"<file name=\\\"\" + filename + \"\\\">\");\n\t            CSSLint.Util.forEach(messages, function (message, i) {\n\t                if (message.rollup) {\n\t                    output.push(\"<issue severity=\\\"\" + message.type + \"\\\" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n\t                } else {\n\t                    output.push(\"<issue line=\\\"\" + message.line + \"\\\" char=\\\"\" + message.col + \"\\\" severity=\\\"\" + message.type + \"\\\"\" + \" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n\t                }\n\t            });\n\t            output.push(\"</file>\");\n\t        }\n\t\n\t        return output.join(\"\");\n\t    }\n\t});\n\t/*global CSSLint*/\n\tCSSLint.addFormatter({\n\t    //format information\n\t    id: \"junit-xml\",\n\t    name: \"JUNIT XML format\",\n\t\n\t    /**\n\t     * Return opening root XML tag.\n\t     * @return {String} to prepend before all results\n\t     */\n\t    startFormat: function startFormat() {\n\t        return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><testsuites>\";\n\t    },\n\t\n\t    /**\n\t     * Return closing root XML tag.\n\t     * @return {String} to append after all results\n\t     */\n\t    endFormat: function endFormat() {\n\t        return \"</testsuites>\";\n\t    },\n\t\n\t    /**\n\t     * Given CSS Lint results for a file, return output for this format.\n\t     * @param results {Object} with error and warning messages\n\t     * @param filename {String} relative file path\n\t     * @param options {Object} (UNUSED for now) specifies special handling of output\n\t     * @return {String} output for results\n\t     */\n\t    formatResults: function formatResults(results, filename, options) {\n\t\n\t        var messages = results.messages,\n\t            output = [],\n\t            tests = {\n\t            'error': 0,\n\t            'failure': 0\n\t        };\n\t\n\t        /**\n\t         * Generate a source string for a rule.\n\t         * JUNIT source strings usually resemble Java class names e.g\n\t         * net.csslint.SomeRuleName\n\t         * @param {Object} rule\n\t         * @return rule source as {String}\n\t         */\n\t        var generateSource = function generateSource(rule) {\n\t            if (!rule || !('name' in rule)) {\n\t                return \"\";\n\t            }\n\t            return 'net.csslint.' + rule.name.replace(/\\s/g, '');\n\t        };\n\t\n\t        /**\n\t         * Replace special characters before write to output.\n\t         *\n\t         * Rules:\n\t         *  - single quotes is the escape sequence for double-quotes\n\t         *  - &lt; is the escape sequence for <\n\t         *  - &gt; is the escape sequence for >\n\t         *\n\t         * @param {String} message to escape\n\t         * @return escaped message as {String}\n\t         */\n\t        var escapeSpecialCharacters = function escapeSpecialCharacters(str) {\n\t\n\t            if (!str || str.constructor !== String) {\n\t                return \"\";\n\t            }\n\t\n\t            return str.replace(/\\\"/g, \"'\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\t        };\n\t\n\t        if (messages.length > 0) {\n\t\n\t            messages.forEach(function (message, i) {\n\t\n\t                // since junit has no warning class\n\t                // all issues as errors\n\t                var type = message.type === 'warning' ? 'error' : message.type;\n\t\n\t                //ignore rollups for now\n\t                if (!message.rollup) {\n\t\n\t                    // build the test case seperately, once joined\n\t                    // we'll add it to a custom array filtered by type\n\t                    output.push(\"<testcase time=\\\"0\\\" name=\\\"\" + generateSource(message.rule) + \"\\\">\");\n\t                    output.push(\"<\" + type + \" message=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\"><![CDATA[\" + message.line + ':' + message.col + ':' + escapeSpecialCharacters(message.evidence) + \"]]></\" + type + \">\");\n\t                    output.push(\"</testcase>\");\n\t\n\t                    tests[type] += 1;\n\t                }\n\t            });\n\t\n\t            output.unshift(\"<testsuite time=\\\"0\\\" tests=\\\"\" + messages.length + \"\\\" skipped=\\\"0\\\" errors=\\\"\" + tests.error + \"\\\" failures=\\\"\" + tests.failure + \"\\\" package=\\\"net.csslint\\\" name=\\\"\" + filename + \"\\\">\");\n\t            output.push(\"</testsuite>\");\n\t        }\n\t\n\t        return output.join(\"\");\n\t    }\n\t});\n\t/*global CSSLint*/\n\tCSSLint.addFormatter({\n\t    //format information\n\t    id: \"lint-xml\",\n\t    name: \"Lint XML format\",\n\t\n\t    /**\n\t     * Return opening root XML tag.\n\t     * @return {String} to prepend before all results\n\t     */\n\t    startFormat: function startFormat() {\n\t        return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><lint>\";\n\t    },\n\t\n\t    /**\n\t     * Return closing root XML tag.\n\t     * @return {String} to append after all results\n\t     */\n\t    endFormat: function endFormat() {\n\t        return \"</lint>\";\n\t    },\n\t\n\t    /**\n\t     * Given CSS Lint results for a file, return output for this format.\n\t     * @param results {Object} with error and warning messages\n\t     * @param filename {String} relative file path\n\t     * @param options {Object} (UNUSED for now) specifies special handling of output\n\t     * @return {String} output for results\n\t     */\n\t    formatResults: function formatResults(results, filename, options) {\n\t        var messages = results.messages,\n\t            output = [];\n\t\n\t        /**\n\t         * Replace special characters before write to output.\n\t         *\n\t         * Rules:\n\t         *  - single quotes is the escape sequence for double-quotes\n\t         *  - &amp; is the escape sequence for &\n\t         *  - &lt; is the escape sequence for <\n\t         *  - &gt; is the escape sequence for >\n\t         *\n\t         * @param {String} message to escape\n\t         * @return escaped message as {String}\n\t         */\n\t        var escapeSpecialCharacters = function escapeSpecialCharacters(str) {\n\t            if (!str || str.constructor !== String) {\n\t                return \"\";\n\t            }\n\t            return str.replace(/\\\"/g, \"'\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\t        };\n\t\n\t        if (messages.length > 0) {\n\t\n\t            output.push(\"<file name=\\\"\" + filename + \"\\\">\");\n\t            CSSLint.Util.forEach(messages, function (message, i) {\n\t                if (message.rollup) {\n\t                    output.push(\"<issue severity=\\\"\" + message.type + \"\\\" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n\t                } else {\n\t                    output.push(\"<issue line=\\\"\" + message.line + \"\\\" char=\\\"\" + message.col + \"\\\" severity=\\\"\" + message.type + \"\\\"\" + \" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n\t                }\n\t            });\n\t            output.push(\"</file>\");\n\t        }\n\t\n\t        return output.join(\"\");\n\t    }\n\t});\n\t/*global CSSLint*/\n\tCSSLint.addFormatter({\n\t    //format information\n\t    id: \"text\",\n\t    name: \"Plain Text\",\n\t\n\t    /**\n\t     * Return content to be printed before all file results.\n\t     * @return {String} to prepend before all results\n\t     */\n\t    startFormat: function startFormat() {\n\t        return \"\";\n\t    },\n\t\n\t    /**\n\t     * Return content to be printed after all file results.\n\t     * @return {String} to append after all results\n\t     */\n\t    endFormat: function endFormat() {\n\t        return \"\";\n\t    },\n\t\n\t    /**\n\t     * Given CSS Lint results for a file, return output for this format.\n\t     * @param results {Object} with error and warning messages\n\t     * @param filename {String} relative file path\n\t     * @param options {Object} (Optional) specifies special handling of output\n\t     * @return {String} output for results\n\t     */\n\t    formatResults: function formatResults(results, filename, options) {\n\t        var messages = results.messages,\n\t            output = \"\";\n\t        options = options || {};\n\t\n\t        if (messages.length === 0) {\n\t            return options.quiet ? \"\" : \"\\n\\ncsslint: No errors in \" + filename + \".\";\n\t        }\n\t\n\t        output = \"\\n\\ncsslint: There are \" + messages.length + \" problems in \" + filename + \".\";\n\t        var pos = filename.lastIndexOf(\"/\"),\n\t            shortFilename = filename;\n\t\n\t        if (pos === -1) {\n\t            pos = filename.lastIndexOf(\"\\\\\");\n\t        }\n\t        if (pos > -1) {\n\t            shortFilename = filename.substring(pos + 1);\n\t        }\n\t\n\t        CSSLint.Util.forEach(messages, function (message, i) {\n\t            output = output + \"\\n\\n\" + shortFilename;\n\t            if (message.rollup) {\n\t                output += \"\\n\" + (i + 1) + \": \" + message.type;\n\t                output += \"\\n\" + message.message;\n\t            } else {\n\t                output += \"\\n\" + (i + 1) + \": \" + message.type + \" at line \" + message.line + \", col \" + message.col;\n\t                output += \"\\n\" + message.message;\n\t                output += \"\\n\" + message.evidence;\n\t            }\n\t        });\n\t\n\t        return output;\n\t    }\n\t});\n\tmodule.exports.CSSLint = CSSLint;\n\n/***/ },\n\n/***/ 244:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// CodeMirror, copyright (c) by Marijn Haverbeke and others\n\t// Distributed under an MIT license: http://codemirror.net/LICENSE\n\t\n\t// Depends on csslint.js from https://github.com/stubbornella/csslint\n\t\n\t// declare global: CSSLint\n\t\n\t(function(mod) {\n\t  if (true) // CommonJS\n\t    mod(__webpack_require__(23));\n\t  else if (typeof define == \"function\" && define.amd) // AMD\n\t    define([\"../../lib/codemirror\"], mod);\n\t  else // Plain browser env\n\t    mod(CodeMirror);\n\t})(function(CodeMirror) {\n\t\"use strict\";\n\t\n\tCodeMirror.registerHelper(\"lint\", \"css\", function(text) {\n\t  var found = [];\n\t  if (!window.CSSLint) return found;\n\t  var results = CSSLint.verify(text), messages = results.messages, message = null;\n\t  for ( var i = 0; i < messages.length; i++) {\n\t    message = messages[i];\n\t    var startLine = message.line -1, endLine = message.line -1, startCol = message.col -1, endCol = message.col;\n\t    found.push({\n\t      from: CodeMirror.Pos(startLine, startCol),\n\t      to: CodeMirror.Pos(endLine, endCol),\n\t      message: message.message,\n\t      severity : message.type\n\t    });\n\t  }\n\t  return found;\n\t});\n\t\n\t});\n\n\n/***/ },\n\n/***/ 246:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// CodeMirror, copyright (c) by Marijn Haverbeke and others\n\t// Distributed under an MIT license: http://codemirror.net/LICENSE\n\t\n\t(function(mod) {\n\t  if (true) // CommonJS\n\t    mod(__webpack_require__(23));\n\t  else if (typeof define == \"function\" && define.amd) // AMD\n\t    define([\"../../lib/codemirror\"], mod);\n\t  else // Plain browser env\n\t    mod(CodeMirror);\n\t})(function(CodeMirror) {\n\t\"use strict\";\n\t\n\tCodeMirror.defineMode(\"css\", function(config, parserConfig) {\n\t  var inline = parserConfig.inline\n\t  if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode(\"text/css\");\n\t\n\t  var indentUnit = config.indentUnit,\n\t      tokenHooks = parserConfig.tokenHooks,\n\t      documentTypes = parserConfig.documentTypes || {},\n\t      mediaTypes = parserConfig.mediaTypes || {},\n\t      mediaFeatures = parserConfig.mediaFeatures || {},\n\t      mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n\t      propertyKeywords = parserConfig.propertyKeywords || {},\n\t      nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n\t      fontProperties = parserConfig.fontProperties || {},\n\t      counterDescriptors = parserConfig.counterDescriptors || {},\n\t      colorKeywords = parserConfig.colorKeywords || {},\n\t      valueKeywords = parserConfig.valueKeywords || {},\n\t      allowNested = parserConfig.allowNested,\n\t      supportsAtComponent = parserConfig.supportsAtComponent === true;\n\t\n\t  var type, override;\n\t  function ret(style, tp) { type = tp; return style; }\n\t\n\t  // Tokenizers\n\t\n\t  function tokenBase(stream, state) {\n\t    var ch = stream.next();\n\t    if (tokenHooks[ch]) {\n\t      var result = tokenHooks[ch](stream, state);\n\t      if (result !== false) return result;\n\t    }\n\t    if (ch == \"@\") {\n\t      stream.eatWhile(/[\\w\\\\\\-]/);\n\t      return ret(\"def\", stream.current());\n\t    } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\n\t      return ret(null, \"compare\");\n\t    } else if (ch == \"\\\"\" || ch == \"'\") {\n\t      state.tokenize = tokenString(ch);\n\t      return state.tokenize(stream, state);\n\t    } else if (ch == \"#\") {\n\t      stream.eatWhile(/[\\w\\\\\\-]/);\n\t      return ret(\"atom\", \"hash\");\n\t    } else if (ch == \"!\") {\n\t      stream.match(/^\\s*\\w*/);\n\t      return ret(\"keyword\", \"important\");\n\t    } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\n\t      stream.eatWhile(/[\\w.%]/);\n\t      return ret(\"number\", \"unit\");\n\t    } else if (ch === \"-\") {\n\t      if (/[\\d.]/.test(stream.peek())) {\n\t        stream.eatWhile(/[\\w.%]/);\n\t        return ret(\"number\", \"unit\");\n\t      } else if (stream.match(/^-[\\w\\\\\\-]+/)) {\n\t        stream.eatWhile(/[\\w\\\\\\-]/);\n\t        if (stream.match(/^\\s*:/, false))\n\t          return ret(\"variable-2\", \"variable-definition\");\n\t        return ret(\"variable-2\", \"variable\");\n\t      } else if (stream.match(/^\\w+-/)) {\n\t        return ret(\"meta\", \"meta\");\n\t      }\n\t    } else if (/[,+>*\\/]/.test(ch)) {\n\t      return ret(null, \"select-op\");\n\t    } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n\t      return ret(\"qualifier\", \"qualifier\");\n\t    } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n\t      return ret(null, ch);\n\t    } else if ((ch == \"u\" && stream.match(/rl(-prefix)?\\(/)) ||\n\t               (ch == \"d\" && stream.match(\"omain(\")) ||\n\t               (ch == \"r\" && stream.match(\"egexp(\"))) {\n\t      stream.backUp(1);\n\t      state.tokenize = tokenParenthesized;\n\t      return ret(\"property\", \"word\");\n\t    } else if (/[\\w\\\\\\-]/.test(ch)) {\n\t      stream.eatWhile(/[\\w\\\\\\-]/);\n\t      return ret(\"property\", \"word\");\n\t    } else {\n\t      return ret(null, null);\n\t    }\n\t  }\n\t\n\t  function tokenString(quote) {\n\t    return function(stream, state) {\n\t      var escaped = false, ch;\n\t      while ((ch = stream.next()) != null) {\n\t        if (ch == quote && !escaped) {\n\t          if (quote == \")\") stream.backUp(1);\n\t          break;\n\t        }\n\t        escaped = !escaped && ch == \"\\\\\";\n\t      }\n\t      if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n\t      return ret(\"string\", \"string\");\n\t    };\n\t  }\n\t\n\t  function tokenParenthesized(stream, state) {\n\t    stream.next(); // Must be '('\n\t    if (!stream.match(/\\s*[\\\"\\')]/, false))\n\t      state.tokenize = tokenString(\")\");\n\t    else\n\t      state.tokenize = null;\n\t    return ret(null, \"(\");\n\t  }\n\t\n\t  // Context management\n\t\n\t  function Context(type, indent, prev) {\n\t    this.type = type;\n\t    this.indent = indent;\n\t    this.prev = prev;\n\t  }\n\t\n\t  function pushContext(state, stream, type, indent) {\n\t    state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\n\t    return type;\n\t  }\n\t\n\t  function popContext(state) {\n\t    if (state.context.prev)\n\t      state.context = state.context.prev;\n\t    return state.context.type;\n\t  }\n\t\n\t  function pass(type, stream, state) {\n\t    return states[state.context.type](type, stream, state);\n\t  }\n\t  function popAndPass(type, stream, state, n) {\n\t    for (var i = n || 1; i > 0; i--)\n\t      state.context = state.context.prev;\n\t    return pass(type, stream, state);\n\t  }\n\t\n\t  // Parser\n\t\n\t  function wordAsValue(stream) {\n\t    var word = stream.current().toLowerCase();\n\t    if (valueKeywords.hasOwnProperty(word))\n\t      override = \"atom\";\n\t    else if (colorKeywords.hasOwnProperty(word))\n\t      override = \"keyword\";\n\t    else\n\t      override = \"variable\";\n\t  }\n\t\n\t  var states = {};\n\t\n\t  states.top = function(type, stream, state) {\n\t    if (type == \"{\") {\n\t      return pushContext(state, stream, \"block\");\n\t    } else if (type == \"}\" && state.context.prev) {\n\t      return popContext(state);\n\t    } else if (supportsAtComponent && /@component/.test(type)) {\n\t      return pushContext(state, stream, \"atComponentBlock\");\n\t    } else if (/^@(-moz-)?document$/.test(type)) {\n\t      return pushContext(state, stream, \"documentTypes\");\n\t    } else if (/^@(media|supports|(-moz-)?document|import)$/.test(type)) {\n\t      return pushContext(state, stream, \"atBlock\");\n\t    } else if (/^@(font-face|counter-style)/.test(type)) {\n\t      state.stateArg = type;\n\t      return \"restricted_atBlock_before\";\n\t    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {\n\t      return \"keyframes\";\n\t    } else if (type && type.charAt(0) == \"@\") {\n\t      return pushContext(state, stream, \"at\");\n\t    } else if (type == \"hash\") {\n\t      override = \"builtin\";\n\t    } else if (type == \"word\") {\n\t      override = \"tag\";\n\t    } else if (type == \"variable-definition\") {\n\t      return \"maybeprop\";\n\t    } else if (type == \"interpolation\") {\n\t      return pushContext(state, stream, \"interpolation\");\n\t    } else if (type == \":\") {\n\t      return \"pseudo\";\n\t    } else if (allowNested && type == \"(\") {\n\t      return pushContext(state, stream, \"parens\");\n\t    }\n\t    return state.context.type;\n\t  };\n\t\n\t  states.block = function(type, stream, state) {\n\t    if (type == \"word\") {\n\t      var word = stream.current().toLowerCase();\n\t      if (propertyKeywords.hasOwnProperty(word)) {\n\t        override = \"property\";\n\t        return \"maybeprop\";\n\t      } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n\t        override = \"string-2\";\n\t        return \"maybeprop\";\n\t      } else if (allowNested) {\n\t        override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\n\t        return \"block\";\n\t      } else {\n\t        override += \" error\";\n\t        return \"maybeprop\";\n\t      }\n\t    } else if (type == \"meta\") {\n\t      return \"block\";\n\t    } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\n\t      override = \"error\";\n\t      return \"block\";\n\t    } else {\n\t      return states.top(type, stream, state);\n\t    }\n\t  };\n\t\n\t  states.maybeprop = function(type, stream, state) {\n\t    if (type == \":\") return pushContext(state, stream, \"prop\");\n\t    return pass(type, stream, state);\n\t  };\n\t\n\t  states.prop = function(type, stream, state) {\n\t    if (type == \";\") return popContext(state);\n\t    if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\n\t    if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\n\t    if (type == \"(\") return pushContext(state, stream, \"parens\");\n\t\n\t    if (type == \"hash\" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\n\t      override += \" error\";\n\t    } else if (type == \"word\") {\n\t      wordAsValue(stream);\n\t    } else if (type == \"interpolation\") {\n\t      return pushContext(state, stream, \"interpolation\");\n\t    }\n\t    return \"prop\";\n\t  };\n\t\n\t  states.propBlock = function(type, _stream, state) {\n\t    if (type == \"}\") return popContext(state);\n\t    if (type == \"word\") { override = \"property\"; return \"maybeprop\"; }\n\t    return state.context.type;\n\t  };\n\t\n\t  states.parens = function(type, stream, state) {\n\t    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n\t    if (type == \")\") return popContext(state);\n\t    if (type == \"(\") return pushContext(state, stream, \"parens\");\n\t    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n\t    if (type == \"word\") wordAsValue(stream);\n\t    return \"parens\";\n\t  };\n\t\n\t  states.pseudo = function(type, stream, state) {\n\t    if (type == \"word\") {\n\t      override = \"variable-3\";\n\t      return state.context.type;\n\t    }\n\t    return pass(type, stream, state);\n\t  };\n\t\n\t  states.documentTypes = function(type, stream, state) {\n\t    if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\n\t      override = \"tag\";\n\t      return state.context.type;\n\t    } else {\n\t      return states.atBlock(type, stream, state);\n\t    }\n\t  };\n\t\n\t  states.atBlock = function(type, stream, state) {\n\t    if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n\t    if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\n\t    if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\n\t\n\t    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n\t\n\t    if (type == \"word\") {\n\t      var word = stream.current().toLowerCase();\n\t      if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\")\n\t        override = \"keyword\";\n\t      else if (mediaTypes.hasOwnProperty(word))\n\t        override = \"attribute\";\n\t      else if (mediaFeatures.hasOwnProperty(word))\n\t        override = \"property\";\n\t      else if (mediaValueKeywords.hasOwnProperty(word))\n\t        override = \"keyword\";\n\t      else if (propertyKeywords.hasOwnProperty(word))\n\t        override = \"property\";\n\t      else if (nonStandardPropertyKeywords.hasOwnProperty(word))\n\t        override = \"string-2\";\n\t      else if (valueKeywords.hasOwnProperty(word))\n\t        override = \"atom\";\n\t      else if (colorKeywords.hasOwnProperty(word))\n\t        override = \"keyword\";\n\t      else\n\t        override = \"error\";\n\t    }\n\t    return state.context.type;\n\t  };\n\t\n\t  states.atComponentBlock = function(type, stream, state) {\n\t    if (type == \"}\")\n\t      return popAndPass(type, stream, state);\n\t    if (type == \"{\")\n\t      return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\n\t    if (type == \"word\")\n\t      override = \"error\";\n\t    return state.context.type;\n\t  };\n\t\n\t  states.atBlock_parens = function(type, stream, state) {\n\t    if (type == \")\") return popContext(state);\n\t    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\n\t    return states.atBlock(type, stream, state);\n\t  };\n\t\n\t  states.restricted_atBlock_before = function(type, stream, state) {\n\t    if (type == \"{\")\n\t      return pushContext(state, stream, \"restricted_atBlock\");\n\t    if (type == \"word\" && state.stateArg == \"@counter-style\") {\n\t      override = \"variable\";\n\t      return \"restricted_atBlock_before\";\n\t    }\n\t    return pass(type, stream, state);\n\t  };\n\t\n\t  states.restricted_atBlock = function(type, stream, state) {\n\t    if (type == \"}\") {\n\t      state.stateArg = null;\n\t      return popContext(state);\n\t    }\n\t    if (type == \"word\") {\n\t      if ((state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||\n\t          (state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))\n\t        override = \"error\";\n\t      else\n\t        override = \"property\";\n\t      return \"maybeprop\";\n\t    }\n\t    return \"restricted_atBlock\";\n\t  };\n\t\n\t  states.keyframes = function(type, stream, state) {\n\t    if (type == \"word\") { override = \"variable\"; return \"keyframes\"; }\n\t    if (type == \"{\") return pushContext(state, stream, \"top\");\n\t    return pass(type, stream, state);\n\t  };\n\t\n\t  states.at = function(type, stream, state) {\n\t    if (type == \";\") return popContext(state);\n\t    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n\t    if (type == \"word\") override = \"tag\";\n\t    else if (type == \"hash\") override = \"builtin\";\n\t    return \"at\";\n\t  };\n\t\n\t  states.interpolation = function(type, stream, state) {\n\t    if (type == \"}\") return popContext(state);\n\t    if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\n\t    if (type == \"word\") override = \"variable\";\n\t    else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\n\t    return \"interpolation\";\n\t  };\n\t\n\t  return {\n\t    startState: function(base) {\n\t      return {tokenize: null,\n\t              state: inline ? \"block\" : \"top\",\n\t              stateArg: null,\n\t              context: new Context(inline ? \"block\" : \"top\", base || 0, null)};\n\t    },\n\t\n\t    token: function(stream, state) {\n\t      if (!state.tokenize && stream.eatSpace()) return null;\n\t      var style = (state.tokenize || tokenBase)(stream, state);\n\t      if (style && typeof style == \"object\") {\n\t        type = style[1];\n\t        style = style[0];\n\t      }\n\t      override = style;\n\t      state.state = states[state.state](type, stream, state);\n\t      return override;\n\t    },\n\t\n\t    indent: function(state, textAfter) {\n\t      var cx = state.context, ch = textAfter && textAfter.charAt(0);\n\t      var indent = cx.indent;\n\t      if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\n\t      if (cx.prev) {\n\t        if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" ||\n\t                          cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\n\t          // Resume indentation from parent context.\n\t          cx = cx.prev;\n\t          indent = cx.indent;\n\t        } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") ||\n\t            ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\n\t          // Dedent relative to current context.\n\t          indent = Math.max(0, cx.indent - indentUnit);\n\t          cx = cx.prev;\n\t        }\n\t      }\n\t      return indent;\n\t    },\n\t\n\t    electricChars: \"}\",\n\t    blockCommentStart: \"/*\",\n\t    blockCommentEnd: \"*/\",\n\t    fold: \"brace\"\n\t  };\n\t});\n\t\n\t  function keySet(array) {\n\t    var keys = {};\n\t    for (var i = 0; i < array.length; ++i) {\n\t      keys[array[i]] = true;\n\t    }\n\t    return keys;\n\t  }\n\t\n\t  var documentTypes_ = [\n\t    \"domain\", \"regexp\", \"url\", \"url-prefix\"\n\t  ], documentTypes = keySet(documentTypes_);\n\t\n\t  var mediaTypes_ = [\n\t    \"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\",\n\t    \"tty\", \"tv\", \"embossed\"\n\t  ], mediaTypes = keySet(mediaTypes_);\n\t\n\t  var mediaFeatures_ = [\n\t    \"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\",\n\t    \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\",\n\t    \"min-device-height\", \"max-device-height\", \"aspect-ratio\",\n\t    \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\",\n\t    \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\",\n\t    \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\",\n\t    \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\",\n\t    \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\",\n\t    \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\",\n\t    \"pointer\", \"any-pointer\", \"hover\", \"any-hover\"\n\t  ], mediaFeatures = keySet(mediaFeatures_);\n\t\n\t  var mediaValueKeywords_ = [\n\t    \"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\",\n\t    \"interlace\", \"progressive\"\n\t  ], mediaValueKeywords = keySet(mediaValueKeywords_);\n\t\n\t  var propertyKeywords_ = [\n\t    \"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\",\n\t    \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\",\n\t    \"animation-direction\", \"animation-duration\", \"animation-fill-mode\",\n\t    \"animation-iteration-count\", \"animation-name\", \"animation-play-state\",\n\t    \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\",\n\t    \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\",\n\t    \"background-color\", \"background-image\", \"background-origin\", \"background-position\",\n\t    \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\",\n\t    \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\",\n\t    \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\",\n\t    \"border-bottom-left-radius\", \"border-bottom-right-radius\",\n\t    \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\",\n\t    \"border-color\", \"border-image\", \"border-image-outset\",\n\t    \"border-image-repeat\", \"border-image-slice\", \"border-image-source\",\n\t    \"border-image-width\", \"border-left\", \"border-left-color\",\n\t    \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\",\n\t    \"border-right-color\", \"border-right-style\", \"border-right-width\",\n\t    \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\",\n\t    \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\",\n\t    \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\",\n\t    \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\",\n\t    \"caption-side\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\",\n\t    \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\",\n\t    \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\",\n\t    \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\",\n\t    \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\",\n\t    \"dominant-baseline\", \"drop-initial-after-adjust\",\n\t    \"drop-initial-after-align\", \"drop-initial-before-adjust\",\n\t    \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\",\n\t    \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\",\n\t    \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\",\n\t    \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\",\n\t    \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\",\n\t    \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\",\n\t    \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\",\n\t    \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\",\n\t    \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\",\n\t    \"grid-auto-position\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\",\n\t    \"grid-column-start\", \"grid-row\", \"grid-row-end\", \"grid-row-start\",\n\t    \"grid-template\", \"grid-template-areas\", \"grid-template-columns\",\n\t    \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\",\n\t    \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\",\n\t    \"inline-box-align\", \"justify-content\", \"left\", \"letter-spacing\",\n\t    \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\",\n\t    \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\",\n\t    \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\",\n\t    \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\",\n\t    \"marker-offset\", \"marks\", \"marquee-direction\", \"marquee-loop\",\n\t    \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\",\n\t    \"max-width\", \"min-height\", \"min-width\", \"move-to\", \"nav-down\", \"nav-index\",\n\t    \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\",\n\t    \"opacity\", \"order\", \"orphans\", \"outline\",\n\t    \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\",\n\t    \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\",\n\t    \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\",\n\t    \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\",\n\t    \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\",\n\t    \"perspective-origin\", \"pitch\", \"pitch-range\", \"play-during\", \"position\",\n\t    \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\",\n\t    \"region-break-before\", \"region-break-inside\", \"region-fragment\",\n\t    \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\",\n\t    \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\",\n\t    \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\",\n\t    \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\",\n\t    \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\",\n\t    \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\",\n\t    \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\",\n\t    \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\",\n\t    \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\",\n\t    \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\",\n\t    \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\",\n\t    \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\",\n\t    \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\",\n\t    \"transition\", \"transition-delay\", \"transition-duration\",\n\t    \"transition-property\", \"transition-timing-function\", \"unicode-bidi\",\n\t    \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\",\n\t    \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\",\n\t    \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"word-break\",\n\t    \"word-spacing\", \"word-wrap\", \"z-index\",\n\t    // SVG-specific\n\t    \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\",\n\t    \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\",\n\t    \"color-interpolation\", \"color-interpolation-filters\",\n\t    \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\",\n\t    \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\",\n\t    \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\",\n\t    \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\",\n\t    \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\",\n\t    \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"\n\t  ], propertyKeywords = keySet(propertyKeywords_);\n\t\n\t  var nonStandardPropertyKeywords_ = [\n\t    \"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\",\n\t    \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\",\n\t    \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\",\n\t    \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\",\n\t    \"searchfield-results-decoration\", \"zoom\"\n\t  ], nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\n\t\n\t  var fontProperties_ = [\n\t    \"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\",\n\t    \"font-stretch\", \"font-weight\", \"font-style\"\n\t  ], fontProperties = keySet(fontProperties_);\n\t\n\t  var counterDescriptors_ = [\n\t    \"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\",\n\t    \"speak-as\", \"suffix\", \"symbols\", \"system\"\n\t  ], counterDescriptors = keySet(counterDescriptors_);\n\t\n\t  var colorKeywords_ = [\n\t    \"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\",\n\t    \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\",\n\t    \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\",\n\t    \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\",\n\t    \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\",\n\t    \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\",\n\t    \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\",\n\t    \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\",\n\t    \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\",\n\t    \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\",\n\t    \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\",\n\t    \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\",\n\t    \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\",\n\t    \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\",\n\t    \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\",\n\t    \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\n\t    \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\",\n\t    \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\",\n\t    \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\",\n\t    \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\",\n\t    \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\",\n\t    \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\",\n\t    \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\",\n\t    \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\",\n\t    \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\",\n\t    \"whitesmoke\", \"yellow\", \"yellowgreen\"\n\t  ], colorKeywords = keySet(colorKeywords_);\n\t\n\t  var valueKeywords_ = [\n\t    \"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\",\n\t    \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\",\n\t    \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\",\n\t    \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\",\n\t    \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\",\n\t    \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\",\n\t    \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\",\n\t    \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\",\n\t    \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\",\n\t    \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\",\n\t    \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\",\n\t    \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\",\n\t    \"compact\", \"condensed\", \"contain\", \"content\",\n\t    \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\",\n\t    \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\",\n\t    \"decimal-leading-zero\", \"default\", \"default-button\", \"destination-atop\",\n\t    \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\",\n\t    \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\",\n\t    \"dot-dash\", \"dot-dot-dash\",\n\t    \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\",\n\t    \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\",\n\t    \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\",\n\t    \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\",\n\t    \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\",\n\t    \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\",\n\t    \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\",\n\t    \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\",\n\t    \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\",\n\t    \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\",\n\t    \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"groove\",\n\t    \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\",\n\t    \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\",\n\t    \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"icon\", \"ignore\",\n\t    \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\",\n\t    \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\",\n\t    \"inline-block\", \"inline-flex\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\",\n\t    \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\",\n\t    \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\",\n\t    \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\",\n\t    \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\",\n\t    \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\",\n\t    \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\",\n\t    \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\",\n\t    \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\",\n\t    \"media-controls-background\", \"media-current-time-display\",\n\t    \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\",\n\t    \"media-return-to-realtime-button\", \"media-rewind-button\",\n\t    \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\",\n\t    \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\",\n\t    \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\",\n\t    \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\",\n\t    \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\",\n\t    \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiply\", \"myanmar\", \"n-resize\",\n\t    \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\",\n\t    \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\",\n\t    \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"open-quote\",\n\t    \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\",\n\t    \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\",\n\t    \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\",\n\t    \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\",\n\t    \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\",\n\t    \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\",\n\t    \"relative\", \"repeat\", \"repeating-linear-gradient\",\n\t    \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\",\n\t    \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\",\n\t    \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\",\n\t    \"s-resize\", \"sans-serif\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\",\n\t    \"scroll\", \"scrollbar\", \"se-resize\", \"searchfield\",\n\t    \"searchfield-cancel-button\", \"searchfield-decoration\",\n\t    \"searchfield-results-button\", \"searchfield-results-decoration\",\n\t    \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\",\n\t    \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\",\n\t    \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\",\n\t    \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\",\n\t    \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\",\n\t    \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"spell-out\", \"square\",\n\t    \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\",\n\t    \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"table\",\n\t    \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\",\n\t    \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\",\n\t    \"tamil\",\n\t    \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\",\n\t    \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\",\n\t    \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\",\n\t    \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\",\n\t    \"trad-chinese-formal\", \"trad-chinese-informal\",\n\t    \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\",\n\t    \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"up\",\n\t    \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\",\n\t    \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\",\n\t    \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\",\n\t    \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\",\n\t    \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\",\n\t    \"xx-large\", \"xx-small\"\n\t  ], valueKeywords = keySet(valueKeywords_);\n\t\n\t  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_)\n\t    .concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_)\n\t    .concat(valueKeywords_);\n\t  CodeMirror.registerHelper(\"hintWords\", \"css\", allWords);\n\t\n\t  function tokenCComment(stream, state) {\n\t    var maybeEnd = false, ch;\n\t    while ((ch = stream.next()) != null) {\n\t      if (maybeEnd && ch == \"/\") {\n\t        state.tokenize = null;\n\t        break;\n\t      }\n\t      maybeEnd = (ch == \"*\");\n\t    }\n\t    return [\"comment\", \"comment\"];\n\t  }\n\t\n\t  CodeMirror.defineMIME(\"text/css\", {\n\t    documentTypes: documentTypes,\n\t    mediaTypes: mediaTypes,\n\t    mediaFeatures: mediaFeatures,\n\t    mediaValueKeywords: mediaValueKeywords,\n\t    propertyKeywords: propertyKeywords,\n\t    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n\t    fontProperties: fontProperties,\n\t    counterDescriptors: counterDescriptors,\n\t    colorKeywords: colorKeywords,\n\t    valueKeywords: valueKeywords,\n\t    tokenHooks: {\n\t      \"/\": function(stream, state) {\n\t        if (!stream.eat(\"*\")) return false;\n\t        state.tokenize = tokenCComment;\n\t        return tokenCComment(stream, state);\n\t      }\n\t    },\n\t    name: \"css\"\n\t  });\n\t\n\t  CodeMirror.defineMIME(\"text/x-scss\", {\n\t    mediaTypes: mediaTypes,\n\t    mediaFeatures: mediaFeatures,\n\t    mediaValueKeywords: mediaValueKeywords,\n\t    propertyKeywords: propertyKeywords,\n\t    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n\t    colorKeywords: colorKeywords,\n\t    valueKeywords: valueKeywords,\n\t    fontProperties: fontProperties,\n\t    allowNested: true,\n\t    tokenHooks: {\n\t      \"/\": function(stream, state) {\n\t        if (stream.eat(\"/\")) {\n\t          stream.skipToEnd();\n\t          return [\"comment\", \"comment\"];\n\t        } else if (stream.eat(\"*\")) {\n\t          state.tokenize = tokenCComment;\n\t          return tokenCComment(stream, state);\n\t        } else {\n\t          return [\"operator\", \"operator\"];\n\t        }\n\t      },\n\t      \":\": function(stream) {\n\t        if (stream.match(/\\s*\\{/))\n\t          return [null, \"{\"];\n\t        return false;\n\t      },\n\t      \"$\": function(stream) {\n\t        stream.match(/^[\\w-]+/);\n\t        if (stream.match(/^\\s*:/, false))\n\t          return [\"variable-2\", \"variable-definition\"];\n\t        return [\"variable-2\", \"variable\"];\n\t      },\n\t      \"#\": function(stream) {\n\t        if (!stream.eat(\"{\")) return false;\n\t        return [null, \"interpolation\"];\n\t      }\n\t    },\n\t    name: \"css\",\n\t    helperType: \"scss\"\n\t  });\n\t\n\t  CodeMirror.defineMIME(\"text/x-less\", {\n\t    mediaTypes: mediaTypes,\n\t    mediaFeatures: mediaFeatures,\n\t    mediaValueKeywords: mediaValueKeywords,\n\t    propertyKeywords: propertyKeywords,\n\t    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n\t    colorKeywords: colorKeywords,\n\t    valueKeywords: valueKeywords,\n\t    fontProperties: fontProperties,\n\t    allowNested: true,\n\t    tokenHooks: {\n\t      \"/\": function(stream, state) {\n\t        if (stream.eat(\"/\")) {\n\t          stream.skipToEnd();\n\t          return [\"comment\", \"comment\"];\n\t        } else if (stream.eat(\"*\")) {\n\t          state.tokenize = tokenCComment;\n\t          return tokenCComment(stream, state);\n\t        } else {\n\t          return [\"operator\", \"operator\"];\n\t        }\n\t      },\n\t      \"@\": function(stream) {\n\t        if (stream.eat(\"{\")) return [null, \"interpolation\"];\n\t        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/, false)) return false;\n\t        stream.eatWhile(/[\\w\\\\\\-]/);\n\t        if (stream.match(/^\\s*:/, false))\n\t          return [\"variable-2\", \"variable-definition\"];\n\t        return [\"variable-2\", \"variable\"];\n\t      },\n\t      \"&\": function() {\n\t        return [\"atom\", \"atom\"];\n\t      }\n\t    },\n\t    name: \"css\",\n\t    helperType: \"less\"\n\t  });\n\t\n\t  CodeMirror.defineMIME(\"text/x-gss\", {\n\t    documentTypes: documentTypes,\n\t    mediaTypes: mediaTypes,\n\t    mediaFeatures: mediaFeatures,\n\t    propertyKeywords: propertyKeywords,\n\t    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n\t    fontProperties: fontProperties,\n\t    counterDescriptors: counterDescriptors,\n\t    colorKeywords: colorKeywords,\n\t    valueKeywords: valueKeywords,\n\t    supportsAtComponent: true,\n\t    tokenHooks: {\n\t      \"/\": function(stream, state) {\n\t        if (!stream.eat(\"*\")) return false;\n\t        state.tokenize = tokenCComment;\n\t        return tokenCComment(stream, state);\n\t      }\n\t    },\n\t    name: \"css\",\n\t    helperType: \"gss\"\n\t  });\n\t\n\t});\n\n\n/***/ },\n\n/***/ 283:\n/***/ function(module, exports) {\n\n\t/*!\n\tParser-Lib\n\tCopyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n\t\n\t*/\n\t/* Version v0.2.5, Build time: 7-May-2014 03:37:38 */\n\tvar parserlib = {};\n\t(function(){\n\t\n\t/**\n\t * A generic base to inherit from for any object\n\t * that needs event handling.\n\t * @class EventTarget\n\t * @constructor\n\t */\n\tfunction EventTarget(){\n\t\n\t    /**\n\t     * The array of listeners for various events.\n\t     * @type Object\n\t     * @property _listeners\n\t     * @private\n\t     */\n\t    this._listeners = {};\n\t}\n\t\n\tEventTarget.prototype = {\n\t\n\t    //restore constructor\n\t    constructor: EventTarget,\n\t\n\t    /**\n\t     * Adds a listener for a given event type.\n\t     * @param {String} type The type of event to add a listener for.\n\t     * @param {Function} listener The function to call when the event occurs.\n\t     * @return {void}\n\t     * @method addListener\n\t     */\n\t    addListener: function(type, listener){\n\t        if (!this._listeners[type]){\n\t            this._listeners[type] = [];\n\t        }\n\t\n\t        this._listeners[type].push(listener);\n\t    },\n\t\n\t    /**\n\t     * Fires an event based on the passed-in object.\n\t     * @param {Object|String} event An object with at least a 'type' attribute\n\t     *      or a string indicating the event name.\n\t     * @return {void}\n\t     * @method fire\n\t     */\n\t    fire: function(event){\n\t        if (typeof event == \"string\"){\n\t            event = { type: event };\n\t        }\n\t        if (typeof event.target != \"undefined\"){\n\t            event.target = this;\n\t        }\n\t\n\t        if (typeof event.type == \"undefined\"){\n\t            throw new Error(\"Event object missing 'type' property.\");\n\t        }\n\t\n\t        if (this._listeners[event.type]){\n\t\n\t            //create a copy of the array and use that so listeners can't chane\n\t            var listeners = this._listeners[event.type].concat();\n\t            for (var i=0, len=listeners.length; i < len; i++){\n\t                listeners[i].call(this, event);\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Removes a listener for a given event type.\n\t     * @param {String} type The type of event to remove a listener from.\n\t     * @param {Function} listener The function to remove from the event.\n\t     * @return {void}\n\t     * @method removeListener\n\t     */\n\t    removeListener: function(type, listener){\n\t        if (this._listeners[type]){\n\t            var listeners = this._listeners[type];\n\t            for (var i=0, len=listeners.length; i < len; i++){\n\t                if (listeners[i] === listener){\n\t                    listeners.splice(i, 1);\n\t                    break;\n\t                }\n\t            }\n\t\n\t\n\t        }\n\t    }\n\t};\n\t/**\n\t * Convenient way to read through strings.\n\t * @namespace parserlib.util\n\t * @class StringReader\n\t * @constructor\n\t * @param {String} text The text to read.\n\t */\n\tfunction StringReader(text){\n\t\n\t    /**\n\t     * The input text with line endings normalized.\n\t     * @property _input\n\t     * @type String\n\t     * @private\n\t     */\n\t    this._input = text.replace(/\\n\\r?/g, \"\\n\");\n\t\n\t\n\t    /**\n\t     * The row for the character to be read next.\n\t     * @property _line\n\t     * @type int\n\t     * @private\n\t     */\n\t    this._line = 1;\n\t\n\t\n\t    /**\n\t     * The column for the character to be read next.\n\t     * @property _col\n\t     * @type int\n\t     * @private\n\t     */\n\t    this._col = 1;\n\t\n\t    /**\n\t     * The index of the character in the input to be read next.\n\t     * @property _cursor\n\t     * @type int\n\t     * @private\n\t     */\n\t    this._cursor = 0;\n\t}\n\t\n\tStringReader.prototype = {\n\t\n\t    //restore constructor\n\t    constructor: StringReader,\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Position info\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Returns the column of the character to be read next.\n\t     * @return {int} The column of the character to be read next.\n\t     * @method getCol\n\t     */\n\t    getCol: function(){\n\t        return this._col;\n\t    },\n\t\n\t    /**\n\t     * Returns the row of the character to be read next.\n\t     * @return {int} The row of the character to be read next.\n\t     * @method getLine\n\t     */\n\t    getLine: function(){\n\t        return this._line ;\n\t    },\n\t\n\t    /**\n\t     * Determines if you're at the end of the input.\n\t     * @return {Boolean} True if there's no more input, false otherwise.\n\t     * @method eof\n\t     */\n\t    eof: function(){\n\t        return (this._cursor == this._input.length);\n\t    },\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Basic reading\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Reads the next character without advancing the cursor.\n\t     * @param {int} count How many characters to look ahead (default is 1).\n\t     * @return {String} The next character or null if there is no next character.\n\t     * @method peek\n\t     */\n\t    peek: function(count){\n\t        var c = null;\n\t        count = (typeof count == \"undefined\" ? 1 : count);\n\t\n\t        //if we're not at the end of the input...\n\t        if (this._cursor < this._input.length){\n\t\n\t            //get character and increment cursor and column\n\t            c = this._input.charAt(this._cursor + count - 1);\n\t        }\n\t\n\t        return c;\n\t    },\n\t\n\t    /**\n\t     * Reads the next character from the input and adjusts the row and column\n\t     * accordingly.\n\t     * @return {String} The next character or null if there is no next character.\n\t     * @method read\n\t     */\n\t    read: function(){\n\t        var c = null;\n\t\n\t        //if we're not at the end of the input...\n\t        if (this._cursor < this._input.length){\n\t\n\t            //if the last character was a newline, increment row count\n\t            //and reset column count\n\t            if (this._input.charAt(this._cursor) == \"\\n\"){\n\t                this._line++;\n\t                this._col=1;\n\t            } else {\n\t                this._col++;\n\t            }\n\t\n\t            //get character and increment cursor and column\n\t            c = this._input.charAt(this._cursor++);\n\t        }\n\t\n\t        return c;\n\t    },\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Misc\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Saves the current location so it can be returned to later.\n\t     * @method mark\n\t     * @return {void}\n\t     */\n\t    mark: function(){\n\t        this._bookmark = {\n\t            cursor: this._cursor,\n\t            line:   this._line,\n\t            col:    this._col\n\t        };\n\t    },\n\t\n\t    reset: function(){\n\t        if (this._bookmark){\n\t            this._cursor = this._bookmark.cursor;\n\t            this._line = this._bookmark.line;\n\t            this._col = this._bookmark.col;\n\t            delete this._bookmark;\n\t        }\n\t    },\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Advanced reading\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Reads up to and including the given string. Throws an error if that\n\t     * string is not found.\n\t     * @param {String} pattern The string to read.\n\t     * @return {String} The string when it is found.\n\t     * @throws Error when the string pattern is not found.\n\t     * @method readTo\n\t     */\n\t    readTo: function(pattern){\n\t\n\t        var buffer = \"\",\n\t            c;\n\t\n\t        /*\n\t         * First, buffer must be the same length as the pattern.\n\t         * Then, buffer must end with the pattern or else reach the\n\t         * end of the input.\n\t         */\n\t        while (buffer.length < pattern.length || buffer.lastIndexOf(pattern) != buffer.length - pattern.length){\n\t            c = this.read();\n\t            if (c){\n\t                buffer += c;\n\t            } else {\n\t                throw new Error(\"Expected \\\"\" + pattern + \"\\\" at line \" + this._line  + \", col \" + this._col + \".\");\n\t            }\n\t        }\n\t\n\t        return buffer;\n\t\n\t    },\n\t\n\t    /**\n\t     * Reads characters while each character causes the given\n\t     * filter function to return true. The function is passed\n\t     * in each character and either returns true to continue\n\t     * reading or false to stop.\n\t     * @param {Function} filter The function to read on each character.\n\t     * @return {String} The string made up of all characters that passed the\n\t     *      filter check.\n\t     * @method readWhile\n\t     */\n\t    readWhile: function(filter){\n\t\n\t        var buffer = \"\",\n\t            c = this.read();\n\t\n\t        while(c !== null && filter(c)){\n\t            buffer += c;\n\t            c = this.read();\n\t        }\n\t\n\t        return buffer;\n\t\n\t    },\n\t\n\t    /**\n\t     * Reads characters that match either text or a regular expression and\n\t     * returns those characters. If a match is found, the row and column\n\t     * are adjusted; if no match is found, the reader's state is unchanged.\n\t     * reading or false to stop.\n\t     * @param {String|RegExp} matchter If a string, then the literal string\n\t     *      value is searched for. If a regular expression, then any string\n\t     *      matching the pattern is search for.\n\t     * @return {String} The string made up of all characters that matched or\n\t     *      null if there was no match.\n\t     * @method readMatch\n\t     */\n\t    readMatch: function(matcher){\n\t\n\t        var source = this._input.substring(this._cursor),\n\t            value = null;\n\t\n\t        //if it's a string, just do a straight match\n\t        if (typeof matcher == \"string\"){\n\t            if (source.indexOf(matcher) === 0){\n\t                value = this.readCount(matcher.length);\n\t            }\n\t        } else if (matcher instanceof RegExp){\n\t            if (matcher.test(source)){\n\t                value = this.readCount(RegExp.lastMatch.length);\n\t            }\n\t        }\n\t\n\t        return value;\n\t    },\n\t\n\t\n\t    /**\n\t     * Reads a given number of characters. If the end of the input is reached,\n\t     * it reads only the remaining characters and does not throw an error.\n\t     * @param {int} count The number of characters to read.\n\t     * @return {String} The string made up the read characters.\n\t     * @method readCount\n\t     */\n\t    readCount: function(count){\n\t        var buffer = \"\";\n\t\n\t        while(count--){\n\t            buffer += this.read();\n\t        }\n\t\n\t        return buffer;\n\t    }\n\t\n\t};\n\t/**\n\t * Type to use when a syntax error occurs.\n\t * @class SyntaxError\n\t * @namespace parserlib.util\n\t * @constructor\n\t * @param {String} message The error message.\n\t * @param {int} line The line at which the error occurred.\n\t * @param {int} col The column at which the error occurred.\n\t */\n\tfunction SyntaxError(message, line, col){\n\t\n\t    /**\n\t     * The column at which the error occurred.\n\t     * @type int\n\t     * @property col\n\t     */\n\t    this.col = col;\n\t\n\t    /**\n\t     * The line at which the error occurred.\n\t     * @type int\n\t     * @property line\n\t     */\n\t    this.line = line;\n\t\n\t    /**\n\t     * The text representation of the unit.\n\t     * @type String\n\t     * @property text\n\t     */\n\t    this.message = message;\n\t\n\t}\n\t\n\t//inherit from Error\n\tSyntaxError.prototype = new Error();\n\t/**\n\t * Base type to represent a single syntactic unit.\n\t * @class SyntaxUnit\n\t * @namespace parserlib.util\n\t * @constructor\n\t * @param {String} text The text of the unit.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction SyntaxUnit(text, line, col, type){\n\t\n\t\n\t    /**\n\t     * The column of text on which the unit resides.\n\t     * @type int\n\t     * @property col\n\t     */\n\t    this.col = col;\n\t\n\t    /**\n\t     * The line of text on which the unit resides.\n\t     * @type int\n\t     * @property line\n\t     */\n\t    this.line = line;\n\t\n\t    /**\n\t     * The text representation of the unit.\n\t     * @type String\n\t     * @property text\n\t     */\n\t    this.text = text;\n\t\n\t    /**\n\t     * The type of syntax unit.\n\t     * @type int\n\t     * @property type\n\t     */\n\t    this.type = type;\n\t}\n\t\n\t/**\n\t * Create a new syntax unit based solely on the given token.\n\t * Convenience method for creating a new syntax unit when\n\t * it represents a single token instead of multiple.\n\t * @param {Object} token The token object to represent.\n\t * @return {parserlib.util.SyntaxUnit} The object representing the token.\n\t * @static\n\t * @method fromToken\n\t */\n\tSyntaxUnit.fromToken = function(token){\n\t    return new SyntaxUnit(token.value, token.startLine, token.startCol);\n\t};\n\t\n\tSyntaxUnit.prototype = {\n\t\n\t    //restore constructor\n\t    constructor: SyntaxUnit,\n\t\n\t    /**\n\t     * Returns the text representation of the unit.\n\t     * @return {String} The text representation of the unit.\n\t     * @method valueOf\n\t     */\n\t    valueOf: function(){\n\t        return this.toString();\n\t    },\n\t\n\t    /**\n\t     * Returns the text representation of the unit.\n\t     * @return {String} The text representation of the unit.\n\t     * @method toString\n\t     */\n\t    toString: function(){\n\t        return this.text;\n\t    }\n\t\n\t};\n\t/*global StringReader, SyntaxError*/\n\t\n\t/**\n\t * Generic TokenStream providing base functionality.\n\t * @class TokenStreamBase\n\t * @namespace parserlib.util\n\t * @constructor\n\t * @param {String|StringReader} input The text to tokenize or a reader from\n\t *      which to read the input.\n\t */\n\tfunction TokenStreamBase(input, tokenData){\n\t\n\t    /**\n\t     * The string reader for easy access to the text.\n\t     * @type StringReader\n\t     * @property _reader\n\t     * @private\n\t     */\n\t    this._reader = input ? new StringReader(input.toString()) : null;\n\t\n\t    /**\n\t     * Token object for the last consumed token.\n\t     * @type Token\n\t     * @property _token\n\t     * @private\n\t     */\n\t    this._token = null;\n\t\n\t    /**\n\t     * The array of token information.\n\t     * @type Array\n\t     * @property _tokenData\n\t     * @private\n\t     */\n\t    this._tokenData = tokenData;\n\t\n\t    /**\n\t     * Lookahead token buffer.\n\t     * @type Array\n\t     * @property _lt\n\t     * @private\n\t     */\n\t    this._lt = [];\n\t\n\t    /**\n\t     * Lookahead token buffer index.\n\t     * @type int\n\t     * @property _ltIndex\n\t     * @private\n\t     */\n\t    this._ltIndex = 0;\n\t\n\t    this._ltIndexCache = [];\n\t}\n\t\n\t/**\n\t * Accepts an array of token information and outputs\n\t * an array of token data containing key-value mappings\n\t * and matching functions that the TokenStream needs.\n\t * @param {Array} tokens An array of token descriptors.\n\t * @return {Array} An array of processed token data.\n\t * @method createTokenData\n\t * @static\n\t */\n\tTokenStreamBase.createTokenData = function(tokens){\n\t\n\t    var nameMap     = [],\n\t        typeMap     = {},\n\t        tokenData     = tokens.concat([]),\n\t        i            = 0,\n\t        len            = tokenData.length+1;\n\t\n\t    tokenData.UNKNOWN = -1;\n\t    tokenData.unshift({name:\"EOF\"});\n\t\n\t    for (; i < len; i++){\n\t        nameMap.push(tokenData[i].name);\n\t        tokenData[tokenData[i].name] = i;\n\t        if (tokenData[i].text){\n\t            typeMap[tokenData[i].text] = i;\n\t        }\n\t    }\n\t\n\t    tokenData.name = function(tt){\n\t        return nameMap[tt];\n\t    };\n\t\n\t    tokenData.type = function(c){\n\t        return typeMap[c];\n\t    };\n\t\n\t    return tokenData;\n\t};\n\t\n\tTokenStreamBase.prototype = {\n\t\n\t    //restore constructor\n\t    constructor: TokenStreamBase,\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Matching methods\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Determines if the next token matches the given token type.\n\t     * If so, that token is consumed; if not, the token is placed\n\t     * back onto the token stream. You can pass in any number of\n\t     * token types and this will return true if any of the token\n\t     * types is found.\n\t     * @param {int|int[]} tokenTypes Either a single token type or an array of\n\t     *      token types that the next token might be. If an array is passed,\n\t     *      it's assumed that the token can be any of these.\n\t     * @param {variant} channel (Optional) The channel to read from. If not\n\t     *      provided, reads from the default (unnamed) channel.\n\t     * @return {Boolean} True if the token type matches, false if not.\n\t     * @method match\n\t     */\n\t    match: function(tokenTypes, channel){\n\t\n\t        //always convert to an array, makes things easier\n\t        if (!(tokenTypes instanceof Array)){\n\t            tokenTypes = [tokenTypes];\n\t        }\n\t\n\t        var tt  = this.get(channel),\n\t            i   = 0,\n\t            len = tokenTypes.length;\n\t\n\t        while(i < len){\n\t            if (tt == tokenTypes[i++]){\n\t                return true;\n\t            }\n\t        }\n\t\n\t        //no match found, put the token back\n\t        this.unget();\n\t        return false;\n\t    },\n\t\n\t    /**\n\t     * Determines if the next token matches the given token type.\n\t     * If so, that token is consumed; if not, an error is thrown.\n\t     * @param {int|int[]} tokenTypes Either a single token type or an array of\n\t     *      token types that the next token should be. If an array is passed,\n\t     *      it's assumed that the token must be one of these.\n\t     * @param {variant} channel (Optional) The channel to read from. If not\n\t     *      provided, reads from the default (unnamed) channel.\n\t     * @return {void}\n\t     * @method mustMatch\n\t     */\n\t    mustMatch: function(tokenTypes, channel){\n\t\n\t        var token;\n\t\n\t        //always convert to an array, makes things easier\n\t        if (!(tokenTypes instanceof Array)){\n\t            tokenTypes = [tokenTypes];\n\t        }\n\t\n\t        if (!this.match.apply(this, arguments)){\n\t            token = this.LT(1);\n\t            throw new SyntaxError(\"Expected \" + this._tokenData[tokenTypes[0]].name +\n\t                \" at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n\t        }\n\t    },\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Consuming methods\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Keeps reading from the token stream until either one of the specified\n\t     * token types is found or until the end of the input is reached.\n\t     * @param {int|int[]} tokenTypes Either a single token type or an array of\n\t     *      token types that the next token should be. If an array is passed,\n\t     *      it's assumed that the token must be one of these.\n\t     * @param {variant} channel (Optional) The channel to read from. If not\n\t     *      provided, reads from the default (unnamed) channel.\n\t     * @return {void}\n\t     * @method advance\n\t     */\n\t    advance: function(tokenTypes, channel){\n\t\n\t        while(this.LA(0) !== 0 && !this.match(tokenTypes, channel)){\n\t            this.get();\n\t        }\n\t\n\t        return this.LA(0);\n\t    },\n\t\n\t    /**\n\t     * Consumes the next token from the token stream.\n\t     * @return {int} The token type of the token that was just consumed.\n\t     * @method get\n\t     */\n\t    get: function(channel){\n\t\n\t        var tokenInfo   = this._tokenData,\n\t            reader      = this._reader,\n\t            value,\n\t            i           =0,\n\t            len         = tokenInfo.length,\n\t            found       = false,\n\t            token,\n\t            info;\n\t\n\t        //check the lookahead buffer first\n\t        if (this._lt.length && this._ltIndex >= 0 && this._ltIndex < this._lt.length){\n\t\n\t            i++;\n\t            this._token = this._lt[this._ltIndex++];\n\t            info = tokenInfo[this._token.type];\n\t\n\t            //obey channels logic\n\t            while((info.channel !== undefined && channel !== info.channel) &&\n\t                    this._ltIndex < this._lt.length){\n\t                this._token = this._lt[this._ltIndex++];\n\t                info = tokenInfo[this._token.type];\n\t                i++;\n\t            }\n\t\n\t            //here be dragons\n\t            if ((info.channel === undefined || channel === info.channel) &&\n\t                    this._ltIndex <= this._lt.length){\n\t                this._ltIndexCache.push(i);\n\t                return this._token.type;\n\t            }\n\t        }\n\t\n\t        //call token retriever method\n\t        token = this._getToken();\n\t\n\t        //if it should be hidden, don't save a token\n\t        if (token.type > -1 && !tokenInfo[token.type].hide){\n\t\n\t            //apply token channel\n\t            token.channel = tokenInfo[token.type].channel;\n\t\n\t            //save for later\n\t            this._token = token;\n\t            this._lt.push(token);\n\t\n\t            //save space that will be moved (must be done before array is truncated)\n\t            this._ltIndexCache.push(this._lt.length - this._ltIndex + i);\n\t\n\t            //keep the buffer under 5 items\n\t            if (this._lt.length > 5){\n\t                this._lt.shift();\n\t            }\n\t\n\t            //also keep the shift buffer under 5 items\n\t            if (this._ltIndexCache.length > 5){\n\t                this._ltIndexCache.shift();\n\t            }\n\t\n\t            //update lookahead index\n\t            this._ltIndex = this._lt.length;\n\t        }\n\t\n\t        /*\n\t         * Skip to the next token if:\n\t         * 1. The token type is marked as hidden.\n\t         * 2. The token type has a channel specified and it isn't the current channel.\n\t         */\n\t        info = tokenInfo[token.type];\n\t        if (info &&\n\t                (info.hide ||\n\t                (info.channel !== undefined && channel !== info.channel))){\n\t            return this.get(channel);\n\t        } else {\n\t            //return just the type\n\t            return token.type;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Looks ahead a certain number of tokens and returns the token type at\n\t     * that position. This will throw an error if you lookahead past the\n\t     * end of input, past the size of the lookahead buffer, or back past\n\t     * the first token in the lookahead buffer.\n\t     * @param {int} The index of the token type to retrieve. 0 for the\n\t     *      current token, 1 for the next, -1 for the previous, etc.\n\t     * @return {int} The token type of the token in the given position.\n\t     * @method LA\n\t     */\n\t    LA: function(index){\n\t        var total = index,\n\t            tt;\n\t        if (index > 0){\n\t            //TODO: Store 5 somewhere\n\t            if (index > 5){\n\t                throw new Error(\"Too much lookahead.\");\n\t            }\n\t\n\t            //get all those tokens\n\t            while(total){\n\t                tt = this.get();\n\t                total--;\n\t            }\n\t\n\t            //unget all those tokens\n\t            while(total < index){\n\t                this.unget();\n\t                total++;\n\t            }\n\t        } else if (index < 0){\n\t\n\t            if(this._lt[this._ltIndex+index]){\n\t                tt = this._lt[this._ltIndex+index].type;\n\t            } else {\n\t                throw new Error(\"Too much lookbehind.\");\n\t            }\n\t\n\t        } else {\n\t            tt = this._token.type;\n\t        }\n\t\n\t        return tt;\n\t\n\t    },\n\t\n\t    /**\n\t     * Looks ahead a certain number of tokens and returns the token at\n\t     * that position. This will throw an error if you lookahead past the\n\t     * end of input, past the size of the lookahead buffer, or back past\n\t     * the first token in the lookahead buffer.\n\t     * @param {int} The index of the token type to retrieve. 0 for the\n\t     *      current token, 1 for the next, -1 for the previous, etc.\n\t     * @return {Object} The token of the token in the given position.\n\t     * @method LA\n\t     */\n\t    LT: function(index){\n\t\n\t        //lookahead first to prime the token buffer\n\t        this.LA(index);\n\t\n\t        //now find the token, subtract one because _ltIndex is already at the next index\n\t        return this._lt[this._ltIndex+index-1];\n\t    },\n\t\n\t    /**\n\t     * Returns the token type for the next token in the stream without\n\t     * consuming it.\n\t     * @return {int} The token type of the next token in the stream.\n\t     * @method peek\n\t     */\n\t    peek: function(){\n\t        return this.LA(1);\n\t    },\n\t\n\t    /**\n\t     * Returns the actual token object for the last consumed token.\n\t     * @return {Token} The token object for the last consumed token.\n\t     * @method token\n\t     */\n\t    token: function(){\n\t        return this._token;\n\t    },\n\t\n\t    /**\n\t     * Returns the name of the token for the given token type.\n\t     * @param {int} tokenType The type of token to get the name of.\n\t     * @return {String} The name of the token or \"UNKNOWN_TOKEN\" for any\n\t     *      invalid token type.\n\t     * @method tokenName\n\t     */\n\t    tokenName: function(tokenType){\n\t        if (tokenType < 0 || tokenType > this._tokenData.length){\n\t            return \"UNKNOWN_TOKEN\";\n\t        } else {\n\t            return this._tokenData[tokenType].name;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns the token type value for the given token name.\n\t     * @param {String} tokenName The name of the token whose value should be returned.\n\t     * @return {int} The token type value for the given token name or -1\n\t     *      for an unknown token.\n\t     * @method tokenName\n\t     */\n\t    tokenType: function(tokenName){\n\t        return this._tokenData[tokenName] || -1;\n\t    },\n\t\n\t    /**\n\t     * Returns the last consumed token to the token stream.\n\t     * @method unget\n\t     */\n\t    unget: function(){\n\t        //if (this._ltIndex > -1){\n\t        if (this._ltIndexCache.length){\n\t            this._ltIndex -= this._ltIndexCache.pop();//--;\n\t            this._token = this._lt[this._ltIndex - 1];\n\t        } else {\n\t            throw new Error(\"Too much lookahead.\");\n\t        }\n\t    }\n\t\n\t};\n\t\n\t\n\tparserlib.util = {\n\tStringReader: StringReader,\n\tSyntaxError : SyntaxError,\n\tSyntaxUnit  : SyntaxUnit,\n\tEventTarget : EventTarget,\n\tTokenStreamBase : TokenStreamBase\n\t};\n\t})();\n\t/*\n\tParser-Lib\n\tCopyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n\t\n\t*/\n\t/* Version v0.2.5, Build time: 7-May-2014 03:37:38 */\n\t(function(){\n\tvar EventTarget = parserlib.util.EventTarget,\n\tTokenStreamBase = parserlib.util.TokenStreamBase,\n\tStringReader = parserlib.util.StringReader,\n\tSyntaxError = parserlib.util.SyntaxError,\n\tSyntaxUnit  = parserlib.util.SyntaxUnit;\n\t\n\tvar Colors = {\n\t    aliceblue       :\"#f0f8ff\",\n\t    antiquewhite    :\"#faebd7\",\n\t    aqua            :\"#00ffff\",\n\t    aquamarine      :\"#7fffd4\",\n\t    azure           :\"#f0ffff\",\n\t    beige           :\"#f5f5dc\",\n\t    bisque          :\"#ffe4c4\",\n\t    black           :\"#000000\",\n\t    blanchedalmond  :\"#ffebcd\",\n\t    blue            :\"#0000ff\",\n\t    blueviolet      :\"#8a2be2\",\n\t    brown           :\"#a52a2a\",\n\t    burlywood       :\"#deb887\",\n\t    cadetblue       :\"#5f9ea0\",\n\t    chartreuse      :\"#7fff00\",\n\t    chocolate       :\"#d2691e\",\n\t    coral           :\"#ff7f50\",\n\t    cornflowerblue  :\"#6495ed\",\n\t    cornsilk        :\"#fff8dc\",\n\t    crimson         :\"#dc143c\",\n\t    cyan            :\"#00ffff\",\n\t    darkblue        :\"#00008b\",\n\t    darkcyan        :\"#008b8b\",\n\t    darkgoldenrod   :\"#b8860b\",\n\t    darkgray        :\"#a9a9a9\",\n\t    darkgrey        :\"#a9a9a9\",\n\t    darkgreen       :\"#006400\",\n\t    darkkhaki       :\"#bdb76b\",\n\t    darkmagenta     :\"#8b008b\",\n\t    darkolivegreen  :\"#556b2f\",\n\t    darkorange      :\"#ff8c00\",\n\t    darkorchid      :\"#9932cc\",\n\t    darkred         :\"#8b0000\",\n\t    darksalmon      :\"#e9967a\",\n\t    darkseagreen    :\"#8fbc8f\",\n\t    darkslateblue   :\"#483d8b\",\n\t    darkslategray   :\"#2f4f4f\",\n\t    darkslategrey   :\"#2f4f4f\",\n\t    darkturquoise   :\"#00ced1\",\n\t    darkviolet      :\"#9400d3\",\n\t    deeppink        :\"#ff1493\",\n\t    deepskyblue     :\"#00bfff\",\n\t    dimgray         :\"#696969\",\n\t    dimgrey         :\"#696969\",\n\t    dodgerblue      :\"#1e90ff\",\n\t    firebrick       :\"#b22222\",\n\t    floralwhite     :\"#fffaf0\",\n\t    forestgreen     :\"#228b22\",\n\t    fuchsia         :\"#ff00ff\",\n\t    gainsboro       :\"#dcdcdc\",\n\t    ghostwhite      :\"#f8f8ff\",\n\t    gold            :\"#ffd700\",\n\t    goldenrod       :\"#daa520\",\n\t    gray            :\"#808080\",\n\t    grey            :\"#808080\",\n\t    green           :\"#008000\",\n\t    greenyellow     :\"#adff2f\",\n\t    honeydew        :\"#f0fff0\",\n\t    hotpink         :\"#ff69b4\",\n\t    indianred       :\"#cd5c5c\",\n\t    indigo          :\"#4b0082\",\n\t    ivory           :\"#fffff0\",\n\t    khaki           :\"#f0e68c\",\n\t    lavender        :\"#e6e6fa\",\n\t    lavenderblush   :\"#fff0f5\",\n\t    lawngreen       :\"#7cfc00\",\n\t    lemonchiffon    :\"#fffacd\",\n\t    lightblue       :\"#add8e6\",\n\t    lightcoral      :\"#f08080\",\n\t    lightcyan       :\"#e0ffff\",\n\t    lightgoldenrodyellow  :\"#fafad2\",\n\t    lightgray       :\"#d3d3d3\",\n\t    lightgrey       :\"#d3d3d3\",\n\t    lightgreen      :\"#90ee90\",\n\t    lightpink       :\"#ffb6c1\",\n\t    lightsalmon     :\"#ffa07a\",\n\t    lightseagreen   :\"#20b2aa\",\n\t    lightskyblue    :\"#87cefa\",\n\t    lightslategray  :\"#778899\",\n\t    lightslategrey  :\"#778899\",\n\t    lightsteelblue  :\"#b0c4de\",\n\t    lightyellow     :\"#ffffe0\",\n\t    lime            :\"#00ff00\",\n\t    limegreen       :\"#32cd32\",\n\t    linen           :\"#faf0e6\",\n\t    magenta         :\"#ff00ff\",\n\t    maroon          :\"#800000\",\n\t    mediumaquamarine:\"#66cdaa\",\n\t    mediumblue      :\"#0000cd\",\n\t    mediumorchid    :\"#ba55d3\",\n\t    mediumpurple    :\"#9370d8\",\n\t    mediumseagreen  :\"#3cb371\",\n\t    mediumslateblue :\"#7b68ee\",\n\t    mediumspringgreen   :\"#00fa9a\",\n\t    mediumturquoise :\"#48d1cc\",\n\t    mediumvioletred :\"#c71585\",\n\t    midnightblue    :\"#191970\",\n\t    mintcream       :\"#f5fffa\",\n\t    mistyrose       :\"#ffe4e1\",\n\t    moccasin        :\"#ffe4b5\",\n\t    navajowhite     :\"#ffdead\",\n\t    navy            :\"#000080\",\n\t    oldlace         :\"#fdf5e6\",\n\t    olive           :\"#808000\",\n\t    olivedrab       :\"#6b8e23\",\n\t    orange          :\"#ffa500\",\n\t    orangered       :\"#ff4500\",\n\t    orchid          :\"#da70d6\",\n\t    palegoldenrod   :\"#eee8aa\",\n\t    palegreen       :\"#98fb98\",\n\t    paleturquoise   :\"#afeeee\",\n\t    palevioletred   :\"#d87093\",\n\t    papayawhip      :\"#ffefd5\",\n\t    peachpuff       :\"#ffdab9\",\n\t    peru            :\"#cd853f\",\n\t    pink            :\"#ffc0cb\",\n\t    plum            :\"#dda0dd\",\n\t    powderblue      :\"#b0e0e6\",\n\t    purple          :\"#800080\",\n\t    red             :\"#ff0000\",\n\t    rosybrown       :\"#bc8f8f\",\n\t    royalblue       :\"#4169e1\",\n\t    saddlebrown     :\"#8b4513\",\n\t    salmon          :\"#fa8072\",\n\t    sandybrown      :\"#f4a460\",\n\t    seagreen        :\"#2e8b57\",\n\t    seashell        :\"#fff5ee\",\n\t    sienna          :\"#a0522d\",\n\t    silver          :\"#c0c0c0\",\n\t    skyblue         :\"#87ceeb\",\n\t    slateblue       :\"#6a5acd\",\n\t    slategray       :\"#708090\",\n\t    slategrey       :\"#708090\",\n\t    snow            :\"#fffafa\",\n\t    springgreen     :\"#00ff7f\",\n\t    steelblue       :\"#4682b4\",\n\t    tan             :\"#d2b48c\",\n\t    teal            :\"#008080\",\n\t    thistle         :\"#d8bfd8\",\n\t    tomato          :\"#ff6347\",\n\t    turquoise       :\"#40e0d0\",\n\t    violet          :\"#ee82ee\",\n\t    wheat           :\"#f5deb3\",\n\t    white           :\"#ffffff\",\n\t    whitesmoke      :\"#f5f5f5\",\n\t    yellow          :\"#ffff00\",\n\t    yellowgreen     :\"#9acd32\",\n\t    //CSS2 system colors http://www.w3.org/TR/css3-color/#css2-system\n\t    activeBorder        :\"Active window border.\",\n\t    activecaption       :\"Active window caption.\",\n\t    appworkspace        :\"Background color of multiple document interface.\",\n\t    background          :\"Desktop background.\",\n\t    buttonface          :\"The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n\t    buttonhighlight     :\"The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n\t    buttonshadow        :\"The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n\t    buttontext          :\"Text on push buttons.\",\n\t    captiontext         :\"Text in caption, size box, and scrollbar arrow box.\",\n\t    graytext            :\"Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.\",\n\t    greytext            :\"Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.\",\n\t    highlight           :\"Item(s) selected in a control.\",\n\t    highlighttext       :\"Text of item(s) selected in a control.\",\n\t    inactiveborder      :\"Inactive window border.\",\n\t    inactivecaption     :\"Inactive window caption.\",\n\t    inactivecaptiontext :\"Color of text in an inactive caption.\",\n\t    infobackground      :\"Background color for tooltip controls.\",\n\t    infotext            :\"Text color for tooltip controls.\",\n\t    menu                :\"Menu background.\",\n\t    menutext            :\"Text in menus.\",\n\t    scrollbar           :\"Scroll bar gray area.\",\n\t    threeddarkshadow    :\"The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n\t    threedface          :\"The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n\t    threedhighlight     :\"The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n\t    threedlightshadow   :\"The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n\t    threedshadow        :\"The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n\t    window              :\"Window background.\",\n\t    windowframe         :\"Window frame.\",\n\t    windowtext          :\"Text in windows.\"\n\t};\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents a selector combinator (whitespace, +, >).\n\t * @namespace parserlib.css\n\t * @class Combinator\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {String} text The text representation of the unit.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction Combinator(text, line, col){\n\t\n\t    SyntaxUnit.call(this, text, line, col, Parser.COMBINATOR_TYPE);\n\t\n\t    /**\n\t     * The type of modifier.\n\t     * @type String\n\t     * @property type\n\t     */\n\t    this.type = \"unknown\";\n\t\n\t    //pretty simple\n\t    if (/^\\s+$/.test(text)){\n\t        this.type = \"descendant\";\n\t    } else if (text == \">\"){\n\t        this.type = \"child\";\n\t    } else if (text == \"+\"){\n\t        this.type = \"adjacent-sibling\";\n\t    } else if (text == \"~\"){\n\t        this.type = \"sibling\";\n\t    }\n\t\n\t}\n\t\n\tCombinator.prototype = new SyntaxUnit();\n\tCombinator.prototype.constructor = Combinator;\n\t\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents a media feature, such as max-width:500.\n\t * @namespace parserlib.css\n\t * @class MediaFeature\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {SyntaxUnit} name The name of the feature.\n\t * @param {SyntaxUnit} value The value of the feature or null if none.\n\t */\n\tfunction MediaFeature(name, value){\n\t\n\t    SyntaxUnit.call(this, \"(\" + name + (value !== null ? \":\" + value : \"\") + \")\", name.startLine, name.startCol, Parser.MEDIA_FEATURE_TYPE);\n\t\n\t    /**\n\t     * The name of the media feature\n\t     * @type String\n\t     * @property name\n\t     */\n\t    this.name = name;\n\t\n\t    /**\n\t     * The value for the feature or null if there is none.\n\t     * @type SyntaxUnit\n\t     * @property value\n\t     */\n\t    this.value = value;\n\t}\n\t\n\tMediaFeature.prototype = new SyntaxUnit();\n\tMediaFeature.prototype.constructor = MediaFeature;\n\t\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents an individual media query.\n\t * @namespace parserlib.css\n\t * @class MediaQuery\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {String} modifier The modifier \"not\" or \"only\" (or null).\n\t * @param {String} mediaType The type of media (i.e., \"print\").\n\t * @param {Array} parts Array of selectors parts making up this selector.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction MediaQuery(modifier, mediaType, features, line, col){\n\t\n\t    SyntaxUnit.call(this, (modifier ? modifier + \" \": \"\") + (mediaType ? mediaType : \"\") + (mediaType && features.length > 0 ? \" and \" : \"\") + features.join(\" and \"), line, col, Parser.MEDIA_QUERY_TYPE);\n\t\n\t    /**\n\t     * The media modifier (\"not\" or \"only\")\n\t     * @type String\n\t     * @property modifier\n\t     */\n\t    this.modifier = modifier;\n\t\n\t    /**\n\t     * The mediaType (i.e., \"print\")\n\t     * @type String\n\t     * @property mediaType\n\t     */\n\t    this.mediaType = mediaType;\n\t\n\t    /**\n\t     * The parts that make up the selector.\n\t     * @type Array\n\t     * @property features\n\t     */\n\t    this.features = features;\n\t\n\t}\n\t\n\tMediaQuery.prototype = new SyntaxUnit();\n\tMediaQuery.prototype.constructor = MediaQuery;\n\t\n\t/*global Tokens, TokenStream, SyntaxError, Properties, Validation, ValidationError, SyntaxUnit,\n\t    PropertyValue, PropertyValuePart, SelectorPart, SelectorSubPart, Selector,\n\t    PropertyName, Combinator, MediaFeature, MediaQuery, EventTarget */\n\t\n\t/**\n\t * A CSS3 parser.\n\t * @namespace parserlib.css\n\t * @class Parser\n\t * @constructor\n\t * @param {Object} options (Optional) Various options for the parser:\n\t *      starHack (true|false) to allow IE6 star hack as valid,\n\t *      underscoreHack (true|false) to interpret leading underscores\n\t *      as IE6-7 targeting for known properties, ieFilters (true|false)\n\t *      to indicate that IE < 8 filters should be accepted and not throw\n\t *      syntax errors.\n\t */\n\tfunction Parser(options){\n\t\n\t    //inherit event functionality\n\t    EventTarget.call(this);\n\t\n\t\n\t    this.options = options || {};\n\t\n\t    this._tokenStream = null;\n\t}\n\t\n\t//Static constants\n\tParser.DEFAULT_TYPE = 0;\n\tParser.COMBINATOR_TYPE = 1;\n\tParser.MEDIA_FEATURE_TYPE = 2;\n\tParser.MEDIA_QUERY_TYPE = 3;\n\tParser.PROPERTY_NAME_TYPE = 4;\n\tParser.PROPERTY_VALUE_TYPE = 5;\n\tParser.PROPERTY_VALUE_PART_TYPE = 6;\n\tParser.SELECTOR_TYPE = 7;\n\tParser.SELECTOR_PART_TYPE = 8;\n\tParser.SELECTOR_SUB_PART_TYPE = 9;\n\t\n\tParser.prototype = function(){\n\t\n\t    var proto = new EventTarget(),  //new prototype\n\t        prop,\n\t        additions =  {\n\t\n\t            //restore constructor\n\t            constructor: Parser,\n\t\n\t            //instance constants - yuck\n\t            DEFAULT_TYPE : 0,\n\t            COMBINATOR_TYPE : 1,\n\t            MEDIA_FEATURE_TYPE : 2,\n\t            MEDIA_QUERY_TYPE : 3,\n\t            PROPERTY_NAME_TYPE : 4,\n\t            PROPERTY_VALUE_TYPE : 5,\n\t            PROPERTY_VALUE_PART_TYPE : 6,\n\t            SELECTOR_TYPE : 7,\n\t            SELECTOR_PART_TYPE : 8,\n\t            SELECTOR_SUB_PART_TYPE : 9,\n\t\n\t            //-----------------------------------------------------------------\n\t            // Grammar\n\t            //-----------------------------------------------------------------\n\t\n\t            _stylesheet: function(){\n\t\n\t                /*\n\t                 * stylesheet\n\t                 *  : [ CHARSET_SYM S* STRING S* ';' ]?\n\t                 *    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*\n\t                 *    [ namespace [S|CDO|CDC]* ]*\n\t                 *    [ [ ruleset | media | page | font_face | keyframes ] [S|CDO|CDC]* ]*\n\t                 *  ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    charset     = null,\n\t                    count,\n\t                    token,\n\t                    tt;\n\t\n\t                this.fire(\"startstylesheet\");\n\t\n\t                //try to read character set\n\t                this._charset();\n\t\n\t                this._skipCruft();\n\t\n\t                //try to read imports - may be more than one\n\t                while (tokenStream.peek() == Tokens.IMPORT_SYM){\n\t                    this._import();\n\t                    this._skipCruft();\n\t                }\n\t\n\t                //try to read namespaces - may be more than one\n\t                while (tokenStream.peek() == Tokens.NAMESPACE_SYM){\n\t                    this._namespace();\n\t                    this._skipCruft();\n\t                }\n\t\n\t                //get the next token\n\t                tt = tokenStream.peek();\n\t\n\t                //try to read the rest\n\t                while(tt > Tokens.EOF){\n\t\n\t                    try {\n\t\n\t                        switch(tt){\n\t                            case Tokens.MEDIA_SYM:\n\t                                this._media();\n\t                                this._skipCruft();\n\t                                break;\n\t                            case Tokens.PAGE_SYM:\n\t                                this._page();\n\t                                this._skipCruft();\n\t                                break;\n\t                            case Tokens.FONT_FACE_SYM:\n\t                                this._font_face();\n\t                                this._skipCruft();\n\t                                break;\n\t                            case Tokens.KEYFRAMES_SYM:\n\t                                this._keyframes();\n\t                                this._skipCruft();\n\t                                break;\n\t                            case Tokens.VIEWPORT_SYM:\n\t                                this._viewport();\n\t                                this._skipCruft();\n\t                                break;\n\t                            case Tokens.UNKNOWN_SYM:  //unknown @ rule\n\t                                tokenStream.get();\n\t                                if (!this.options.strict){\n\t\n\t                                    //fire error event\n\t                                    this.fire({\n\t                                        type:       \"error\",\n\t                                        error:      null,\n\t                                        message:    \"Unknown @ rule: \" + tokenStream.LT(0).value + \".\",\n\t                                        line:       tokenStream.LT(0).startLine,\n\t                                        col:        tokenStream.LT(0).startCol\n\t                                    });\n\t\n\t                                    //skip braces\n\t                                    count=0;\n\t                                    while (tokenStream.advance([Tokens.LBRACE, Tokens.RBRACE]) == Tokens.LBRACE){\n\t                                        count++;    //keep track of nesting depth\n\t                                    }\n\t\n\t                                    while(count){\n\t                                        tokenStream.advance([Tokens.RBRACE]);\n\t                                        count--;\n\t                                    }\n\t\n\t                                } else {\n\t                                    //not a syntax error, rethrow it\n\t                                    throw new SyntaxError(\"Unknown @ rule.\", tokenStream.LT(0).startLine, tokenStream.LT(0).startCol);\n\t                                }\n\t                                break;\n\t                            case Tokens.S:\n\t                                this._readWhitespace();\n\t                                break;\n\t                            default:\n\t                                if(!this._ruleset()){\n\t\n\t                                    //error handling for known issues\n\t                                    switch(tt){\n\t                                        case Tokens.CHARSET_SYM:\n\t                                            token = tokenStream.LT(1);\n\t                                            this._charset(false);\n\t                                            throw new SyntaxError(\"@charset not allowed here.\", token.startLine, token.startCol);\n\t                                        case Tokens.IMPORT_SYM:\n\t                                            token = tokenStream.LT(1);\n\t                                            this._import(false);\n\t                                            throw new SyntaxError(\"@import not allowed here.\", token.startLine, token.startCol);\n\t                                        case Tokens.NAMESPACE_SYM:\n\t                                            token = tokenStream.LT(1);\n\t                                            this._namespace(false);\n\t                                            throw new SyntaxError(\"@namespace not allowed here.\", token.startLine, token.startCol);\n\t                                        default:\n\t                                            tokenStream.get();  //get the last token\n\t                                            this._unexpectedToken(tokenStream.token());\n\t                                    }\n\t\n\t                                }\n\t                        }\n\t                    } catch(ex) {\n\t                        if (ex instanceof SyntaxError && !this.options.strict){\n\t                            this.fire({\n\t                                type:       \"error\",\n\t                                error:      ex,\n\t                                message:    ex.message,\n\t                                line:       ex.line,\n\t                                col:        ex.col\n\t                            });\n\t                        } else {\n\t                            throw ex;\n\t                        }\n\t                    }\n\t\n\t                    tt = tokenStream.peek();\n\t                }\n\t\n\t                if (tt != Tokens.EOF){\n\t                    this._unexpectedToken(tokenStream.token());\n\t                }\n\t\n\t                this.fire(\"endstylesheet\");\n\t            },\n\t\n\t            _charset: function(emit){\n\t                var tokenStream = this._tokenStream,\n\t                    charset,\n\t                    token,\n\t                    line,\n\t                    col;\n\t\n\t                if (tokenStream.match(Tokens.CHARSET_SYM)){\n\t                    line = tokenStream.token().startLine;\n\t                    col = tokenStream.token().startCol;\n\t\n\t                    this._readWhitespace();\n\t                    tokenStream.mustMatch(Tokens.STRING);\n\t\n\t                    token = tokenStream.token();\n\t                    charset = token.value;\n\t\n\t                    this._readWhitespace();\n\t                    tokenStream.mustMatch(Tokens.SEMICOLON);\n\t\n\t                    if (emit !== false){\n\t                        this.fire({\n\t                            type:   \"charset\",\n\t                            charset:charset,\n\t                            line:   line,\n\t                            col:    col\n\t                        });\n\t                    }\n\t                }\n\t            },\n\t\n\t            _import: function(emit){\n\t                /*\n\t                 * import\n\t                 *   : IMPORT_SYM S*\n\t                 *    [STRING|URI] S* media_query_list? ';' S*\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    tt,\n\t                    uri,\n\t                    importToken,\n\t                    mediaList   = [];\n\t\n\t                //read import symbol\n\t                tokenStream.mustMatch(Tokens.IMPORT_SYM);\n\t                importToken = tokenStream.token();\n\t                this._readWhitespace();\n\t\n\t                tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);\n\t\n\t                //grab the URI value\n\t                uri = tokenStream.token().value.replace(/^(?:url\\()?[\"']?([^\"']+?)[\"']?\\)?$/, \"$1\");\n\t\n\t                this._readWhitespace();\n\t\n\t                mediaList = this._media_query_list();\n\t\n\t                //must end with a semicolon\n\t                tokenStream.mustMatch(Tokens.SEMICOLON);\n\t                this._readWhitespace();\n\t\n\t                if (emit !== false){\n\t                    this.fire({\n\t                        type:   \"import\",\n\t                        uri:    uri,\n\t                        media:  mediaList,\n\t                        line:   importToken.startLine,\n\t                        col:    importToken.startCol\n\t                    });\n\t                }\n\t\n\t            },\n\t\n\t            _namespace: function(emit){\n\t                /*\n\t                 * namespace\n\t                 *   : NAMESPACE_SYM S* [namespace_prefix S*]? [STRING|URI] S* ';' S*\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    line,\n\t                    col,\n\t                    prefix,\n\t                    uri;\n\t\n\t                //read import symbol\n\t                tokenStream.mustMatch(Tokens.NAMESPACE_SYM);\n\t                line = tokenStream.token().startLine;\n\t                col = tokenStream.token().startCol;\n\t                this._readWhitespace();\n\t\n\t                //it's a namespace prefix - no _namespace_prefix() method because it's just an IDENT\n\t                if (tokenStream.match(Tokens.IDENT)){\n\t                    prefix = tokenStream.token().value;\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);\n\t                /*if (!tokenStream.match(Tokens.STRING)){\n\t                    tokenStream.mustMatch(Tokens.URI);\n\t                }*/\n\t\n\t                //grab the URI value\n\t                uri = tokenStream.token().value.replace(/(?:url\\()?[\"']([^\"']+)[\"']\\)?/, \"$1\");\n\t\n\t                this._readWhitespace();\n\t\n\t                //must end with a semicolon\n\t                tokenStream.mustMatch(Tokens.SEMICOLON);\n\t                this._readWhitespace();\n\t\n\t                if (emit !== false){\n\t                    this.fire({\n\t                        type:   \"namespace\",\n\t                        prefix: prefix,\n\t                        uri:    uri,\n\t                        line:   line,\n\t                        col:    col\n\t                    });\n\t                }\n\t\n\t            },\n\t\n\t            _media: function(){\n\t                /*\n\t                 * media\n\t                 *   : MEDIA_SYM S* media_query_list S* '{' S* ruleset* '}' S*\n\t                 *   ;\n\t                 */\n\t                var tokenStream     = this._tokenStream,\n\t                    line,\n\t                    col,\n\t                    mediaList;//       = [];\n\t\n\t                //look for @media\n\t                tokenStream.mustMatch(Tokens.MEDIA_SYM);\n\t                line = tokenStream.token().startLine;\n\t                col = tokenStream.token().startCol;\n\t\n\t                this._readWhitespace();\n\t\n\t                mediaList = this._media_query_list();\n\t\n\t                tokenStream.mustMatch(Tokens.LBRACE);\n\t                this._readWhitespace();\n\t\n\t                this.fire({\n\t                    type:   \"startmedia\",\n\t                    media:  mediaList,\n\t                    line:   line,\n\t                    col:    col\n\t                });\n\t\n\t                while(true) {\n\t                    if (tokenStream.peek() == Tokens.PAGE_SYM){\n\t                        this._page();\n\t                    } else if (tokenStream.peek() == Tokens.FONT_FACE_SYM){\n\t                        this._font_face();\n\t                    } else if (tokenStream.peek() == Tokens.VIEWPORT_SYM){\n\t                        this._viewport();\n\t                    } else if (!this._ruleset()){\n\t                        break;\n\t                    }\n\t                }\n\t\n\t                tokenStream.mustMatch(Tokens.RBRACE);\n\t                this._readWhitespace();\n\t\n\t                this.fire({\n\t                    type:   \"endmedia\",\n\t                    media:  mediaList,\n\t                    line:   line,\n\t                    col:    col\n\t                });\n\t            },\n\t\n\t\n\t            //CSS3 Media Queries\n\t            _media_query_list: function(){\n\t                /*\n\t                 * media_query_list\n\t                 *   : S* [media_query [ ',' S* media_query ]* ]?\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    mediaList   = [];\n\t\n\t\n\t                this._readWhitespace();\n\t\n\t                if (tokenStream.peek() == Tokens.IDENT || tokenStream.peek() == Tokens.LPAREN){\n\t                    mediaList.push(this._media_query());\n\t                }\n\t\n\t                while(tokenStream.match(Tokens.COMMA)){\n\t                    this._readWhitespace();\n\t                    mediaList.push(this._media_query());\n\t                }\n\t\n\t                return mediaList;\n\t            },\n\t\n\t            /*\n\t             * Note: \"expression\" in the grammar maps to the _media_expression\n\t             * method.\n\t\n\t             */\n\t            _media_query: function(){\n\t                /*\n\t                 * media_query\n\t                 *   : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*\n\t                 *   | expression [ AND S* expression ]*\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    type        = null,\n\t                    ident       = null,\n\t                    token       = null,\n\t                    expressions = [];\n\t\n\t                if (tokenStream.match(Tokens.IDENT)){\n\t                    ident = tokenStream.token().value.toLowerCase();\n\t\n\t                    //since there's no custom tokens for these, need to manually check\n\t                    if (ident != \"only\" && ident != \"not\"){\n\t                        tokenStream.unget();\n\t                        ident = null;\n\t                    } else {\n\t                        token = tokenStream.token();\n\t                    }\n\t                }\n\t\n\t                this._readWhitespace();\n\t\n\t                if (tokenStream.peek() == Tokens.IDENT){\n\t                    type = this._media_type();\n\t                    if (token === null){\n\t                        token = tokenStream.token();\n\t                    }\n\t                } else if (tokenStream.peek() == Tokens.LPAREN){\n\t                    if (token === null){\n\t                        token = tokenStream.LT(1);\n\t                    }\n\t                    expressions.push(this._media_expression());\n\t                }\n\t\n\t                if (type === null && expressions.length === 0){\n\t                    return null;\n\t                } else {\n\t                    this._readWhitespace();\n\t                    while (tokenStream.match(Tokens.IDENT)){\n\t                        if (tokenStream.token().value.toLowerCase() != \"and\"){\n\t                            this._unexpectedToken(tokenStream.token());\n\t                        }\n\t\n\t                        this._readWhitespace();\n\t                        expressions.push(this._media_expression());\n\t                    }\n\t                }\n\t\n\t                return new MediaQuery(ident, type, expressions, token.startLine, token.startCol);\n\t            },\n\t\n\t            //CSS3 Media Queries\n\t            _media_type: function(){\n\t                /*\n\t                 * media_type\n\t                 *   : IDENT\n\t                 *   ;\n\t                 */\n\t                return this._media_feature();\n\t            },\n\t\n\t            /**\n\t             * Note: in CSS3 Media Queries, this is called \"expression\".\n\t             * Renamed here to avoid conflict with CSS3 Selectors\n\t             * definition of \"expression\". Also note that \"expr\" in the\n\t             * grammar now maps to \"expression\" from CSS3 selectors.\n\t             * @method _media_expression\n\t             * @private\n\t             */\n\t            _media_expression: function(){\n\t                /*\n\t                 * expression\n\t                 *  : '(' S* media_feature S* [ ':' S* expr ]? ')' S*\n\t                 *  ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    feature     = null,\n\t                    token,\n\t                    expression  = null;\n\t\n\t                tokenStream.mustMatch(Tokens.LPAREN);\n\t\n\t                feature = this._media_feature();\n\t                this._readWhitespace();\n\t\n\t                if (tokenStream.match(Tokens.COLON)){\n\t                    this._readWhitespace();\n\t                    token = tokenStream.LT(1);\n\t                    expression = this._expression();\n\t                }\n\t\n\t                tokenStream.mustMatch(Tokens.RPAREN);\n\t                this._readWhitespace();\n\t\n\t                return new MediaFeature(feature, (expression ? new SyntaxUnit(expression, token.startLine, token.startCol) : null));\n\t            },\n\t\n\t            //CSS3 Media Queries\n\t            _media_feature: function(){\n\t                /*\n\t                 * media_feature\n\t                 *   : IDENT\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream;\n\t\n\t                tokenStream.mustMatch(Tokens.IDENT);\n\t\n\t                return SyntaxUnit.fromToken(tokenStream.token());\n\t            },\n\t\n\t            //CSS3 Paged Media\n\t            _page: function(){\n\t                /*\n\t                 * page:\n\t                 *    PAGE_SYM S* IDENT? pseudo_page? S*\n\t                 *    '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*\n\t                 *    ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    line,\n\t                    col,\n\t                    identifier  = null,\n\t                    pseudoPage  = null;\n\t\n\t                //look for @page\n\t                tokenStream.mustMatch(Tokens.PAGE_SYM);\n\t                line = tokenStream.token().startLine;\n\t                col = tokenStream.token().startCol;\n\t\n\t                this._readWhitespace();\n\t\n\t                if (tokenStream.match(Tokens.IDENT)){\n\t                    identifier = tokenStream.token().value;\n\t\n\t                    //The value 'auto' may not be used as a page name and MUST be treated as a syntax error.\n\t                    if (identifier.toLowerCase() === \"auto\"){\n\t                        this._unexpectedToken(tokenStream.token());\n\t                    }\n\t                }\n\t\n\t                //see if there's a colon upcoming\n\t                if (tokenStream.peek() == Tokens.COLON){\n\t                    pseudoPage = this._pseudo_page();\n\t                }\n\t\n\t                this._readWhitespace();\n\t\n\t                this.fire({\n\t                    type:   \"startpage\",\n\t                    id:     identifier,\n\t                    pseudo: pseudoPage,\n\t                    line:   line,\n\t                    col:    col\n\t                });\n\t\n\t                this._readDeclarations(true, true);\n\t\n\t                this.fire({\n\t                    type:   \"endpage\",\n\t                    id:     identifier,\n\t                    pseudo: pseudoPage,\n\t                    line:   line,\n\t                    col:    col\n\t                });\n\t\n\t            },\n\t\n\t            //CSS3 Paged Media\n\t            _margin: function(){\n\t                /*\n\t                 * margin :\n\t                 *    margin_sym S* '{' declaration [ ';' S* declaration? ]* '}' S*\n\t                 *    ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    line,\n\t                    col,\n\t                    marginSym   = this._margin_sym();\n\t\n\t                if (marginSym){\n\t                    line = tokenStream.token().startLine;\n\t                    col = tokenStream.token().startCol;\n\t\n\t                    this.fire({\n\t                        type: \"startpagemargin\",\n\t                        margin: marginSym,\n\t                        line:   line,\n\t                        col:    col\n\t                    });\n\t\n\t                    this._readDeclarations(true);\n\t\n\t                    this.fire({\n\t                        type: \"endpagemargin\",\n\t                        margin: marginSym,\n\t                        line:   line,\n\t                        col:    col\n\t                    });\n\t                    return true;\n\t                } else {\n\t                    return false;\n\t                }\n\t            },\n\t\n\t            //CSS3 Paged Media\n\t            _margin_sym: function(){\n\t\n\t                /*\n\t                 * margin_sym :\n\t                 *    TOPLEFTCORNER_SYM |\n\t                 *    TOPLEFT_SYM |\n\t                 *    TOPCENTER_SYM |\n\t                 *    TOPRIGHT_SYM |\n\t                 *    TOPRIGHTCORNER_SYM |\n\t                 *    BOTTOMLEFTCORNER_SYM |\n\t                 *    BOTTOMLEFT_SYM |\n\t                 *    BOTTOMCENTER_SYM |\n\t                 *    BOTTOMRIGHT_SYM |\n\t                 *    BOTTOMRIGHTCORNER_SYM |\n\t                 *    LEFTTOP_SYM |\n\t                 *    LEFTMIDDLE_SYM |\n\t                 *    LEFTBOTTOM_SYM |\n\t                 *    RIGHTTOP_SYM |\n\t                 *    RIGHTMIDDLE_SYM |\n\t                 *    RIGHTBOTTOM_SYM\n\t                 *    ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream;\n\t\n\t                if(tokenStream.match([Tokens.TOPLEFTCORNER_SYM, Tokens.TOPLEFT_SYM,\n\t                        Tokens.TOPCENTER_SYM, Tokens.TOPRIGHT_SYM, Tokens.TOPRIGHTCORNER_SYM,\n\t                        Tokens.BOTTOMLEFTCORNER_SYM, Tokens.BOTTOMLEFT_SYM,\n\t                        Tokens.BOTTOMCENTER_SYM, Tokens.BOTTOMRIGHT_SYM,\n\t                        Tokens.BOTTOMRIGHTCORNER_SYM, Tokens.LEFTTOP_SYM,\n\t                        Tokens.LEFTMIDDLE_SYM, Tokens.LEFTBOTTOM_SYM, Tokens.RIGHTTOP_SYM,\n\t                        Tokens.RIGHTMIDDLE_SYM, Tokens.RIGHTBOTTOM_SYM]))\n\t                {\n\t                    return SyntaxUnit.fromToken(tokenStream.token());\n\t                } else {\n\t                    return null;\n\t                }\n\t\n\t            },\n\t\n\t            _pseudo_page: function(){\n\t                /*\n\t                 * pseudo_page\n\t                 *   : ':' IDENT\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream;\n\t\n\t                tokenStream.mustMatch(Tokens.COLON);\n\t                tokenStream.mustMatch(Tokens.IDENT);\n\t\n\t                //TODO: CSS3 Paged Media says only \"left\", \"center\", and \"right\" are allowed\n\t\n\t                return tokenStream.token().value;\n\t            },\n\t\n\t            _font_face: function(){\n\t                /*\n\t                 * font_face\n\t                 *   : FONT_FACE_SYM S*\n\t                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    line,\n\t                    col;\n\t\n\t                //look for @page\n\t                tokenStream.mustMatch(Tokens.FONT_FACE_SYM);\n\t                line = tokenStream.token().startLine;\n\t                col = tokenStream.token().startCol;\n\t\n\t                this._readWhitespace();\n\t\n\t                this.fire({\n\t                    type:   \"startfontface\",\n\t                    line:   line,\n\t                    col:    col\n\t                });\n\t\n\t                this._readDeclarations(true);\n\t\n\t                this.fire({\n\t                    type:   \"endfontface\",\n\t                    line:   line,\n\t                    col:    col\n\t                });\n\t            },\n\t\n\t            _viewport: function(){\n\t                /*\n\t                 * viewport\n\t                 *   : VIEWPORT_SYM S*\n\t                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*\n\t                 *   ;\n\t                 */\n\t                 var tokenStream = this._tokenStream,\n\t                    line,\n\t                    col;\n\t\n\t                    tokenStream.mustMatch(Tokens.VIEWPORT_SYM);\n\t                    line = tokenStream.token().startLine;\n\t                    col = tokenStream.token().startCol;\n\t\n\t                    this._readWhitespace();\n\t\n\t                    this.fire({\n\t                        type:   \"startviewport\",\n\t                        line:   line,\n\t                        col:    col\n\t                    });\n\t\n\t                    this._readDeclarations(true);\n\t\n\t                    this.fire({\n\t                        type:   \"endviewport\",\n\t                        line:   line,\n\t                        col:    col\n\t                    });\n\t\n\t            },\n\t\n\t            _operator: function(inFunction){\n\t\n\t                /*\n\t                 * operator (outside function)\n\t                 *  : '/' S* | ',' S* | /( empty )/\n\t                 * operator (inside function)\n\t                 *  : '/' S* | '+' S* | '*' S* | '-' S* /( empty )/\n\t                 *  ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    token       = null;\n\t\n\t                if (tokenStream.match([Tokens.SLASH, Tokens.COMMA]) ||\n\t                    (inFunction && tokenStream.match([Tokens.PLUS, Tokens.STAR, Tokens.MINUS]))){\n\t                    token =  tokenStream.token();\n\t                    this._readWhitespace();\n\t                }\n\t                return token ? PropertyValuePart.fromToken(token) : null;\n\t\n\t            },\n\t\n\t            _combinator: function(){\n\t\n\t                /*\n\t                 * combinator\n\t                 *  : PLUS S* | GREATER S* | TILDE S* | S+\n\t                 *  ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    value       = null,\n\t                    token;\n\t\n\t                if(tokenStream.match([Tokens.PLUS, Tokens.GREATER, Tokens.TILDE])){\n\t                    token = tokenStream.token();\n\t                    value = new Combinator(token.value, token.startLine, token.startCol);\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                return value;\n\t            },\n\t\n\t            _unary_operator: function(){\n\t\n\t                /*\n\t                 * unary_operator\n\t                 *  : '-' | '+'\n\t                 *  ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream;\n\t\n\t                if (tokenStream.match([Tokens.MINUS, Tokens.PLUS])){\n\t                    return tokenStream.token().value;\n\t                } else {\n\t                    return null;\n\t                }\n\t            },\n\t\n\t            _property: function(){\n\t\n\t                /*\n\t                 * property\n\t                 *   : IDENT S*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    value       = null,\n\t                    hack        = null,\n\t                    tokenValue,\n\t                    token,\n\t                    line,\n\t                    col;\n\t\n\t                //check for star hack - throws error if not allowed\n\t                if (tokenStream.peek() == Tokens.STAR && this.options.starHack){\n\t                    tokenStream.get();\n\t                    token = tokenStream.token();\n\t                    hack = token.value;\n\t                    line = token.startLine;\n\t                    col = token.startCol;\n\t                }\n\t\n\t                if(tokenStream.match(Tokens.IDENT)){\n\t                    token = tokenStream.token();\n\t                    tokenValue = token.value;\n\t\n\t                    //check for underscore hack - no error if not allowed because it's valid CSS syntax\n\t                    if (tokenValue.charAt(0) == \"_\" && this.options.underscoreHack){\n\t                        hack = \"_\";\n\t                        tokenValue = tokenValue.substring(1);\n\t                    }\n\t\n\t                    value = new PropertyName(tokenValue, hack, (line||token.startLine), (col||token.startCol));\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                return value;\n\t            },\n\t\n\t            //Augmented with CSS3 Selectors\n\t            _ruleset: function(){\n\t                /*\n\t                 * ruleset\n\t                 *   : selectors_group\n\t                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    tt,\n\t                    selectors;\n\t\n\t\n\t                /*\n\t                 * Error Recovery: If even a single selector fails to parse,\n\t                 * then the entire ruleset should be thrown away.\n\t                 */\n\t                try {\n\t                    selectors = this._selectors_group();\n\t                } catch (ex){\n\t                    if (ex instanceof SyntaxError && !this.options.strict){\n\t\n\t                        //fire error event\n\t                        this.fire({\n\t                            type:       \"error\",\n\t                            error:      ex,\n\t                            message:    ex.message,\n\t                            line:       ex.line,\n\t                            col:        ex.col\n\t                        });\n\t\n\t                        //skip over everything until closing brace\n\t                        tt = tokenStream.advance([Tokens.RBRACE]);\n\t                        if (tt == Tokens.RBRACE){\n\t                            //if there's a right brace, the rule is finished so don't do anything\n\t                        } else {\n\t                            //otherwise, rethrow the error because it wasn't handled properly\n\t                            throw ex;\n\t                        }\n\t\n\t                    } else {\n\t                        //not a syntax error, rethrow it\n\t                        throw ex;\n\t                    }\n\t\n\t                    //trigger parser to continue\n\t                    return true;\n\t                }\n\t\n\t                //if it got here, all selectors parsed\n\t                if (selectors){\n\t\n\t                    this.fire({\n\t                        type:       \"startrule\",\n\t                        selectors:  selectors,\n\t                        line:       selectors[0].line,\n\t                        col:        selectors[0].col\n\t                    });\n\t\n\t                    this._readDeclarations(true);\n\t\n\t                    this.fire({\n\t                        type:       \"endrule\",\n\t                        selectors:  selectors,\n\t                        line:       selectors[0].line,\n\t                        col:        selectors[0].col\n\t                    });\n\t\n\t                }\n\t\n\t                return selectors;\n\t\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _selectors_group: function(){\n\t\n\t                /*\n\t                 * selectors_group\n\t                 *   : selector [ COMMA S* selector ]*\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    selectors   = [],\n\t                    selector;\n\t\n\t                selector = this._selector();\n\t                if (selector !== null){\n\t\n\t                    selectors.push(selector);\n\t                    while(tokenStream.match(Tokens.COMMA)){\n\t                        this._readWhitespace();\n\t                        selector = this._selector();\n\t                        if (selector !== null){\n\t                            selectors.push(selector);\n\t                        } else {\n\t                            this._unexpectedToken(tokenStream.LT(1));\n\t                        }\n\t                    }\n\t                }\n\t\n\t                return selectors.length ? selectors : null;\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _selector: function(){\n\t                /*\n\t                 * selector\n\t                 *   : simple_selector_sequence [ combinator simple_selector_sequence ]*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    selector    = [],\n\t                    nextSelector = null,\n\t                    combinator  = null,\n\t                    ws          = null;\n\t\n\t                //if there's no simple selector, then there's no selector\n\t                nextSelector = this._simple_selector_sequence();\n\t                if (nextSelector === null){\n\t                    return null;\n\t                }\n\t\n\t                selector.push(nextSelector);\n\t\n\t                do {\n\t\n\t                    //look for a combinator\n\t                    combinator = this._combinator();\n\t\n\t                    if (combinator !== null){\n\t                        selector.push(combinator);\n\t                        nextSelector = this._simple_selector_sequence();\n\t\n\t                        //there must be a next selector\n\t                        if (nextSelector === null){\n\t                            this._unexpectedToken(tokenStream.LT(1));\n\t                        } else {\n\t\n\t                            //nextSelector is an instance of SelectorPart\n\t                            selector.push(nextSelector);\n\t                        }\n\t                    } else {\n\t\n\t                        //if there's not whitespace, we're done\n\t                        if (this._readWhitespace()){\n\t\n\t                            //add whitespace separator\n\t                            ws = new Combinator(tokenStream.token().value, tokenStream.token().startLine, tokenStream.token().startCol);\n\t\n\t                            //combinator is not required\n\t                            combinator = this._combinator();\n\t\n\t                            //selector is required if there's a combinator\n\t                            nextSelector = this._simple_selector_sequence();\n\t                            if (nextSelector === null){\n\t                                if (combinator !== null){\n\t                                    this._unexpectedToken(tokenStream.LT(1));\n\t                                }\n\t                            } else {\n\t\n\t                                if (combinator !== null){\n\t                                    selector.push(combinator);\n\t                                } else {\n\t                                    selector.push(ws);\n\t                                }\n\t\n\t                                selector.push(nextSelector);\n\t                            }\n\t                        } else {\n\t                            break;\n\t                        }\n\t\n\t                    }\n\t                } while(true);\n\t\n\t                return new Selector(selector, selector[0].line, selector[0].col);\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _simple_selector_sequence: function(){\n\t                /*\n\t                 * simple_selector_sequence\n\t                 *   : [ type_selector | universal ]\n\t                 *     [ HASH | class | attrib | pseudo | negation ]*\n\t                 *   | [ HASH | class | attrib | pseudo | negation ]+\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t\n\t                    //parts of a simple selector\n\t                    elementName = null,\n\t                    modifiers   = [],\n\t\n\t                    //complete selector text\n\t                    selectorText= \"\",\n\t\n\t                    //the different parts after the element name to search for\n\t                    components  = [\n\t                        //HASH\n\t                        function(){\n\t                            return tokenStream.match(Tokens.HASH) ?\n\t                                    new SelectorSubPart(tokenStream.token().value, \"id\", tokenStream.token().startLine, tokenStream.token().startCol) :\n\t                                    null;\n\t                        },\n\t                        this._class,\n\t                        this._attrib,\n\t                        this._pseudo,\n\t                        this._negation\n\t                    ],\n\t                    i           = 0,\n\t                    len         = components.length,\n\t                    component   = null,\n\t                    found       = false,\n\t                    line,\n\t                    col;\n\t\n\t\n\t                //get starting line and column for the selector\n\t                line = tokenStream.LT(1).startLine;\n\t                col = tokenStream.LT(1).startCol;\n\t\n\t                elementName = this._type_selector();\n\t                if (!elementName){\n\t                    elementName = this._universal();\n\t                }\n\t\n\t                if (elementName !== null){\n\t                    selectorText += elementName;\n\t                }\n\t\n\t                while(true){\n\t\n\t                    //whitespace means we're done\n\t                    if (tokenStream.peek() === Tokens.S){\n\t                        break;\n\t                    }\n\t\n\t                    //check for each component\n\t                    while(i < len && component === null){\n\t                        component = components[i++].call(this);\n\t                    }\n\t\n\t                    if (component === null){\n\t\n\t                        //we don't have a selector\n\t                        if (selectorText === \"\"){\n\t                            return null;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    } else {\n\t                        i = 0;\n\t                        modifiers.push(component);\n\t                        selectorText += component.toString();\n\t                        component = null;\n\t                    }\n\t                }\n\t\n\t\n\t                return selectorText !== \"\" ?\n\t                        new SelectorPart(elementName, modifiers, selectorText, line, col) :\n\t                        null;\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _type_selector: function(){\n\t                /*\n\t                 * type_selector\n\t                 *   : [ namespace_prefix ]? element_name\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    ns          = this._namespace_prefix(),\n\t                    elementName = this._element_name();\n\t\n\t                if (!elementName){\n\t                    /*\n\t                     * Need to back out the namespace that was read due to both\n\t                     * type_selector and universal reading namespace_prefix\n\t                     * first. Kind of hacky, but only way I can figure out\n\t                     * right now how to not change the grammar.\n\t                     */\n\t                    if (ns){\n\t                        tokenStream.unget();\n\t                        if (ns.length > 1){\n\t                            tokenStream.unget();\n\t                        }\n\t                    }\n\t\n\t                    return null;\n\t                } else {\n\t                    if (ns){\n\t                        elementName.text = ns + elementName.text;\n\t                        elementName.col -= ns.length;\n\t                    }\n\t                    return elementName;\n\t                }\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _class: function(){\n\t                /*\n\t                 * class\n\t                 *   : '.' IDENT\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    token;\n\t\n\t                if (tokenStream.match(Tokens.DOT)){\n\t                    tokenStream.mustMatch(Tokens.IDENT);\n\t                    token = tokenStream.token();\n\t                    return new SelectorSubPart(\".\" + token.value, \"class\", token.startLine, token.startCol - 1);\n\t                } else {\n\t                    return null;\n\t                }\n\t\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _element_name: function(){\n\t                /*\n\t                 * element_name\n\t                 *   : IDENT\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    token;\n\t\n\t                if (tokenStream.match(Tokens.IDENT)){\n\t                    token = tokenStream.token();\n\t                    return new SelectorSubPart(token.value, \"elementName\", token.startLine, token.startCol);\n\t\n\t                } else {\n\t                    return null;\n\t                }\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _namespace_prefix: function(){\n\t                /*\n\t                 * namespace_prefix\n\t                 *   : [ IDENT | '*' ]? '|'\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    value       = \"\";\n\t\n\t                //verify that this is a namespace prefix\n\t                if (tokenStream.LA(1) === Tokens.PIPE || tokenStream.LA(2) === Tokens.PIPE){\n\t\n\t                    if(tokenStream.match([Tokens.IDENT, Tokens.STAR])){\n\t                        value += tokenStream.token().value;\n\t                    }\n\t\n\t                    tokenStream.mustMatch(Tokens.PIPE);\n\t                    value += \"|\";\n\t\n\t                }\n\t\n\t                return value.length ? value : null;\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _universal: function(){\n\t                /*\n\t                 * universal\n\t                 *   : [ namespace_prefix ]? '*'\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    value       = \"\",\n\t                    ns;\n\t\n\t                ns = this._namespace_prefix();\n\t                if(ns){\n\t                    value += ns;\n\t                }\n\t\n\t                if(tokenStream.match(Tokens.STAR)){\n\t                    value += \"*\";\n\t                }\n\t\n\t                return value.length ? value : null;\n\t\n\t           },\n\t\n\t            //CSS3 Selectors\n\t            _attrib: function(){\n\t                /*\n\t                 * attrib\n\t                 *   : '[' S* [ namespace_prefix ]? IDENT S*\n\t                 *         [ [ PREFIXMATCH |\n\t                 *             SUFFIXMATCH |\n\t                 *             SUBSTRINGMATCH |\n\t                 *             '=' |\n\t                 *             INCLUDES |\n\t                 *             DASHMATCH ] S* [ IDENT | STRING ] S*\n\t                 *         ]? ']'\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    value       = null,\n\t                    ns,\n\t                    token;\n\t\n\t                if (tokenStream.match(Tokens.LBRACKET)){\n\t                    token = tokenStream.token();\n\t                    value = token.value;\n\t                    value += this._readWhitespace();\n\t\n\t                    ns = this._namespace_prefix();\n\t\n\t                    if (ns){\n\t                        value += ns;\n\t                    }\n\t\n\t                    tokenStream.mustMatch(Tokens.IDENT);\n\t                    value += tokenStream.token().value;\n\t                    value += this._readWhitespace();\n\t\n\t                    if(tokenStream.match([Tokens.PREFIXMATCH, Tokens.SUFFIXMATCH, Tokens.SUBSTRINGMATCH,\n\t                            Tokens.EQUALS, Tokens.INCLUDES, Tokens.DASHMATCH])){\n\t\n\t                        value += tokenStream.token().value;\n\t                        value += this._readWhitespace();\n\t\n\t                        tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);\n\t                        value += tokenStream.token().value;\n\t                        value += this._readWhitespace();\n\t                    }\n\t\n\t                    tokenStream.mustMatch(Tokens.RBRACKET);\n\t\n\t                    return new SelectorSubPart(value + \"]\", \"attribute\", token.startLine, token.startCol);\n\t                } else {\n\t                    return null;\n\t                }\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _pseudo: function(){\n\t\n\t                /*\n\t                 * pseudo\n\t                 *   : ':' ':'? [ IDENT | functional_pseudo ]\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    pseudo      = null,\n\t                    colons      = \":\",\n\t                    line,\n\t                    col;\n\t\n\t                if (tokenStream.match(Tokens.COLON)){\n\t\n\t                    if (tokenStream.match(Tokens.COLON)){\n\t                        colons += \":\";\n\t                    }\n\t\n\t                    if (tokenStream.match(Tokens.IDENT)){\n\t                        pseudo = tokenStream.token().value;\n\t                        line = tokenStream.token().startLine;\n\t                        col = tokenStream.token().startCol - colons.length;\n\t                    } else if (tokenStream.peek() == Tokens.FUNCTION){\n\t                        line = tokenStream.LT(1).startLine;\n\t                        col = tokenStream.LT(1).startCol - colons.length;\n\t                        pseudo = this._functional_pseudo();\n\t                    }\n\t\n\t                    if (pseudo){\n\t                        pseudo = new SelectorSubPart(colons + pseudo, \"pseudo\", line, col);\n\t                    }\n\t                }\n\t\n\t                return pseudo;\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _functional_pseudo: function(){\n\t                /*\n\t                 * functional_pseudo\n\t                 *   : FUNCTION S* expression ')'\n\t                 *   ;\n\t                */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    value = null;\n\t\n\t                if(tokenStream.match(Tokens.FUNCTION)){\n\t                    value = tokenStream.token().value;\n\t                    value += this._readWhitespace();\n\t                    value += this._expression();\n\t                    tokenStream.mustMatch(Tokens.RPAREN);\n\t                    value += \")\";\n\t                }\n\t\n\t                return value;\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _expression: function(){\n\t                /*\n\t                 * expression\n\t                 *   : [ [ PLUS | '-' | DIMENSION | NUMBER | STRING | IDENT ] S* ]+\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    value       = \"\";\n\t\n\t                while(tokenStream.match([Tokens.PLUS, Tokens.MINUS, Tokens.DIMENSION,\n\t                        Tokens.NUMBER, Tokens.STRING, Tokens.IDENT, Tokens.LENGTH,\n\t                        Tokens.FREQ, Tokens.ANGLE, Tokens.TIME,\n\t                        Tokens.RESOLUTION, Tokens.SLASH])){\n\t\n\t                    value += tokenStream.token().value;\n\t                    value += this._readWhitespace();\n\t                }\n\t\n\t                return value.length ? value : null;\n\t\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _negation: function(){\n\t                /*\n\t                 * negation\n\t                 *   : NOT S* negation_arg S* ')'\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    line,\n\t                    col,\n\t                    value       = \"\",\n\t                    arg,\n\t                    subpart     = null;\n\t\n\t                if (tokenStream.match(Tokens.NOT)){\n\t                    value = tokenStream.token().value;\n\t                    line = tokenStream.token().startLine;\n\t                    col = tokenStream.token().startCol;\n\t                    value += this._readWhitespace();\n\t                    arg = this._negation_arg();\n\t                    value += arg;\n\t                    value += this._readWhitespace();\n\t                    tokenStream.match(Tokens.RPAREN);\n\t                    value += tokenStream.token().value;\n\t\n\t                    subpart = new SelectorSubPart(value, \"not\", line, col);\n\t                    subpart.args.push(arg);\n\t                }\n\t\n\t                return subpart;\n\t            },\n\t\n\t            //CSS3 Selectors\n\t            _negation_arg: function(){\n\t                /*\n\t                 * negation_arg\n\t                 *   : type_selector | universal | HASH | class | attrib | pseudo\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    args        = [\n\t                        this._type_selector,\n\t                        this._universal,\n\t                        function(){\n\t                            return tokenStream.match(Tokens.HASH) ?\n\t                                    new SelectorSubPart(tokenStream.token().value, \"id\", tokenStream.token().startLine, tokenStream.token().startCol) :\n\t                                    null;\n\t                        },\n\t                        this._class,\n\t                        this._attrib,\n\t                        this._pseudo\n\t                    ],\n\t                    arg         = null,\n\t                    i           = 0,\n\t                    len         = args.length,\n\t                    elementName,\n\t                    line,\n\t                    col,\n\t                    part;\n\t\n\t                line = tokenStream.LT(1).startLine;\n\t                col = tokenStream.LT(1).startCol;\n\t\n\t                while(i < len && arg === null){\n\t\n\t                    arg = args[i].call(this);\n\t                    i++;\n\t                }\n\t\n\t                //must be a negation arg\n\t                if (arg === null){\n\t                    this._unexpectedToken(tokenStream.LT(1));\n\t                }\n\t\n\t                //it's an element name\n\t                if (arg.type == \"elementName\"){\n\t                    part = new SelectorPart(arg, [], arg.toString(), line, col);\n\t                } else {\n\t                    part = new SelectorPart(null, [arg], arg.toString(), line, col);\n\t                }\n\t\n\t                return part;\n\t            },\n\t\n\t            _declaration: function(){\n\t\n\t                /*\n\t                 * declaration\n\t                 *   : property ':' S* expr prio?\n\t                 *   | /( empty )/\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    property    = null,\n\t                    expr        = null,\n\t                    prio        = null,\n\t                    error       = null,\n\t                    invalid     = null,\n\t                    propertyName= \"\";\n\t\n\t                property = this._property();\n\t                if (property !== null){\n\t\n\t                    tokenStream.mustMatch(Tokens.COLON);\n\t                    this._readWhitespace();\n\t\n\t                    expr = this._expr();\n\t\n\t                    //if there's no parts for the value, it's an error\n\t                    if (!expr || expr.length === 0){\n\t                        this._unexpectedToken(tokenStream.LT(1));\n\t                    }\n\t\n\t                    prio = this._prio();\n\t\n\t                    /*\n\t                     * If hacks should be allowed, then only check the root\n\t                     * property. If hacks should not be allowed, treat\n\t                     * _property or *property as invalid properties.\n\t                     */\n\t                    propertyName = property.toString();\n\t                    if (this.options.starHack && property.hack == \"*\" ||\n\t                            this.options.underscoreHack && property.hack == \"_\") {\n\t\n\t                        propertyName = property.text;\n\t                    }\n\t\n\t                    try {\n\t                        this._validateProperty(propertyName, expr);\n\t                    } catch (ex) {\n\t                        invalid = ex;\n\t                    }\n\t\n\t                    this.fire({\n\t                        type:       \"property\",\n\t                        property:   property,\n\t                        value:      expr,\n\t                        important:  prio,\n\t                        line:       property.line,\n\t                        col:        property.col,\n\t                        invalid:    invalid\n\t                    });\n\t\n\t                    return true;\n\t                } else {\n\t                    return false;\n\t                }\n\t            },\n\t\n\t            _prio: function(){\n\t                /*\n\t                 * prio\n\t                 *   : IMPORTANT_SYM S*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    result      = tokenStream.match(Tokens.IMPORTANT_SYM);\n\t\n\t                this._readWhitespace();\n\t                return result;\n\t            },\n\t\n\t            _expr: function(inFunction){\n\t                /*\n\t                 * expr\n\t                 *   : term [ operator term ]*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    values      = [],\n\t\t\t\t\t\t//valueParts\t= [],\n\t                    value       = null,\n\t                    operator    = null;\n\t\n\t                value = this._term(inFunction);\n\t                if (value !== null){\n\t\n\t                    values.push(value);\n\t\n\t                    do {\n\t                        operator = this._operator(inFunction);\n\t\n\t                        //if there's an operator, keep building up the value parts\n\t                        if (operator){\n\t                            values.push(operator);\n\t                        } /*else {\n\t                            //if there's not an operator, you have a full value\n\t\t\t\t\t\t\t\tvalues.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));\n\t\t\t\t\t\t\t\tvalueParts = [];\n\t\t\t\t\t\t\t}*/\n\t\n\t                        value = this._term(inFunction);\n\t\n\t                        if (value === null){\n\t                            break;\n\t                        } else {\n\t                            values.push(value);\n\t                        }\n\t                    } while(true);\n\t                }\n\t\n\t\t\t\t\t//cleanup\n\t                /*if (valueParts.length){\n\t                    values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));\n\t                }*/\n\t\n\t                return values.length > 0 ? new PropertyValue(values, values[0].line, values[0].col) : null;\n\t            },\n\t\n\t            _term: function(inFunction){\n\t\n\t                /*\n\t                 * term\n\t                 *   : unary_operator?\n\t                 *     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | ANGLE S* |\n\t                 *       TIME S* | FREQ S* | function | ie_function ]\n\t                 *   | STRING S* | IDENT S* | URI S* | UNICODERANGE S* | hexcolor\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    unary       = null,\n\t                    value       = null,\n\t                    endChar     = null,\n\t                    token,\n\t                    line,\n\t                    col;\n\t\n\t                //returns the operator or null\n\t                unary = this._unary_operator();\n\t                if (unary !== null){\n\t                    line = tokenStream.token().startLine;\n\t                    col = tokenStream.token().startCol;\n\t                }\n\t\n\t                //exception for IE filters\n\t                if (tokenStream.peek() == Tokens.IE_FUNCTION && this.options.ieFilters){\n\t\n\t                    value = this._ie_function();\n\t                    if (unary === null){\n\t                        line = tokenStream.token().startLine;\n\t                        col = tokenStream.token().startCol;\n\t                    }\n\t\n\t                //see if it's a simple block\n\t                } else if (inFunction && tokenStream.match([Tokens.LPAREN, Tokens.LBRACE, Tokens.LBRACKET])){\n\t\n\t                    token = tokenStream.token();\n\t                    endChar = token.endChar;\n\t                    value = token.value + this._expr(inFunction).text;\n\t                    if (unary === null){\n\t                        line = tokenStream.token().startLine;\n\t                        col = tokenStream.token().startCol;\n\t                    }\n\t                    tokenStream.mustMatch(Tokens.type(endChar));\n\t                    value += endChar;\n\t                    this._readWhitespace();\n\t\n\t                //see if there's a simple match\n\t                } else if (tokenStream.match([Tokens.NUMBER, Tokens.PERCENTAGE, Tokens.LENGTH,\n\t                        Tokens.ANGLE, Tokens.TIME,\n\t                        Tokens.FREQ, Tokens.STRING, Tokens.IDENT, Tokens.URI, Tokens.UNICODE_RANGE])){\n\t\n\t                    value = tokenStream.token().value;\n\t                    if (unary === null){\n\t                        line = tokenStream.token().startLine;\n\t                        col = tokenStream.token().startCol;\n\t                    }\n\t                    this._readWhitespace();\n\t                } else {\n\t\n\t                    //see if it's a color\n\t                    token = this._hexcolor();\n\t                    if (token === null){\n\t\n\t                        //if there's no unary, get the start of the next token for line/col info\n\t                        if (unary === null){\n\t                            line = tokenStream.LT(1).startLine;\n\t                            col = tokenStream.LT(1).startCol;\n\t                        }\n\t\n\t                        //has to be a function\n\t                        if (value === null){\n\t\n\t                            /*\n\t                             * This checks for alpha(opacity=0) style of IE\n\t                             * functions. IE_FUNCTION only presents progid: style.\n\t                             */\n\t                            if (tokenStream.LA(3) == Tokens.EQUALS && this.options.ieFilters){\n\t                                value = this._ie_function();\n\t                            } else {\n\t                                value = this._function();\n\t                            }\n\t                        }\n\t\n\t                        /*if (value === null){\n\t                            return null;\n\t                            //throw new Error(\"Expected identifier at line \" + tokenStream.token().startLine + \", character \" +  tokenStream.token().startCol + \".\");\n\t                        }*/\n\t\n\t                    } else {\n\t                        value = token.value;\n\t                        if (unary === null){\n\t                            line = token.startLine;\n\t                            col = token.startCol;\n\t                        }\n\t                    }\n\t\n\t                }\n\t\n\t                return value !== null ?\n\t                        new PropertyValuePart(unary !== null ? unary + value : value, line, col) :\n\t                        null;\n\t\n\t            },\n\t\n\t            _function: function(){\n\t\n\t                /*\n\t                 * function\n\t                 *   : FUNCTION S* expr ')' S*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    functionText = null,\n\t                    expr        = null,\n\t                    lt;\n\t\n\t                if (tokenStream.match(Tokens.FUNCTION)){\n\t                    functionText = tokenStream.token().value;\n\t                    this._readWhitespace();\n\t                    expr = this._expr(true);\n\t                    functionText += expr;\n\t\n\t                    //START: Horrible hack in case it's an IE filter\n\t                    if (this.options.ieFilters && tokenStream.peek() == Tokens.EQUALS){\n\t                        do {\n\t\n\t                            if (this._readWhitespace()){\n\t                                functionText += tokenStream.token().value;\n\t                            }\n\t\n\t                            //might be second time in the loop\n\t                            if (tokenStream.LA(0) == Tokens.COMMA){\n\t                                functionText += tokenStream.token().value;\n\t                            }\n\t\n\t                            tokenStream.match(Tokens.IDENT);\n\t                            functionText += tokenStream.token().value;\n\t\n\t                            tokenStream.match(Tokens.EQUALS);\n\t                            functionText += tokenStream.token().value;\n\t\n\t                            //functionText += this._term();\n\t                            lt = tokenStream.peek();\n\t                            while(lt != Tokens.COMMA && lt != Tokens.S && lt != Tokens.RPAREN){\n\t                                tokenStream.get();\n\t                                functionText += tokenStream.token().value;\n\t                                lt = tokenStream.peek();\n\t                            }\n\t                        } while(tokenStream.match([Tokens.COMMA, Tokens.S]));\n\t                    }\n\t\n\t                    //END: Horrible Hack\n\t\n\t                    tokenStream.match(Tokens.RPAREN);\n\t                    functionText += \")\";\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                return functionText;\n\t            },\n\t\n\t            _ie_function: function(){\n\t\n\t                /* (My own extension)\n\t                 * ie_function\n\t                 *   : IE_FUNCTION S* IDENT '=' term [S* ','? IDENT '=' term]+ ')' S*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    functionText = null,\n\t                    expr        = null,\n\t                    lt;\n\t\n\t                //IE function can begin like a regular function, too\n\t                if (tokenStream.match([Tokens.IE_FUNCTION, Tokens.FUNCTION])){\n\t                    functionText = tokenStream.token().value;\n\t\n\t                    do {\n\t\n\t                        if (this._readWhitespace()){\n\t                            functionText += tokenStream.token().value;\n\t                        }\n\t\n\t                        //might be second time in the loop\n\t                        if (tokenStream.LA(0) == Tokens.COMMA){\n\t                            functionText += tokenStream.token().value;\n\t                        }\n\t\n\t                        tokenStream.match(Tokens.IDENT);\n\t                        functionText += tokenStream.token().value;\n\t\n\t                        tokenStream.match(Tokens.EQUALS);\n\t                        functionText += tokenStream.token().value;\n\t\n\t                        //functionText += this._term();\n\t                        lt = tokenStream.peek();\n\t                        while(lt != Tokens.COMMA && lt != Tokens.S && lt != Tokens.RPAREN){\n\t                            tokenStream.get();\n\t                            functionText += tokenStream.token().value;\n\t                            lt = tokenStream.peek();\n\t                        }\n\t                    } while(tokenStream.match([Tokens.COMMA, Tokens.S]));\n\t\n\t                    tokenStream.match(Tokens.RPAREN);\n\t                    functionText += \")\";\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                return functionText;\n\t            },\n\t\n\t            _hexcolor: function(){\n\t                /*\n\t                 * There is a constraint on the color that it must\n\t                 * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])\n\t                 * after the \"#\"; e.g., \"#000\" is OK, but \"#abcd\" is not.\n\t                 *\n\t                 * hexcolor\n\t                 *   : HASH S*\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    token = null,\n\t                    color;\n\t\n\t                if(tokenStream.match(Tokens.HASH)){\n\t\n\t                    //need to do some validation here\n\t\n\t                    token = tokenStream.token();\n\t                    color = token.value;\n\t                    if (!/#[a-f0-9]{3,6}/i.test(color)){\n\t                        throw new SyntaxError(\"Expected a hex color but found '\" + color + \"' at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n\t                    }\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                return token;\n\t            },\n\t\n\t            //-----------------------------------------------------------------\n\t            // Animations methods\n\t            //-----------------------------------------------------------------\n\t\n\t            _keyframes: function(){\n\t\n\t                /*\n\t                 * keyframes:\n\t                 *   : KEYFRAMES_SYM S* keyframe_name S* '{' S* keyframe_rule* '}' {\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    token,\n\t                    tt,\n\t                    name,\n\t                    prefix = \"\";\n\t\n\t                tokenStream.mustMatch(Tokens.KEYFRAMES_SYM);\n\t                token = tokenStream.token();\n\t                if (/^@\\-([^\\-]+)\\-/.test(token.value)) {\n\t                    prefix = RegExp.$1;\n\t                }\n\t\n\t                this._readWhitespace();\n\t                name = this._keyframe_name();\n\t\n\t                this._readWhitespace();\n\t                tokenStream.mustMatch(Tokens.LBRACE);\n\t\n\t                this.fire({\n\t                    type:   \"startkeyframes\",\n\t                    name:   name,\n\t                    prefix: prefix,\n\t                    line:   token.startLine,\n\t                    col:    token.startCol\n\t                });\n\t\n\t                this._readWhitespace();\n\t                tt = tokenStream.peek();\n\t\n\t                //check for key\n\t                while(tt == Tokens.IDENT || tt == Tokens.PERCENTAGE) {\n\t                    this._keyframe_rule();\n\t                    this._readWhitespace();\n\t                    tt = tokenStream.peek();\n\t                }\n\t\n\t                this.fire({\n\t                    type:   \"endkeyframes\",\n\t                    name:   name,\n\t                    prefix: prefix,\n\t                    line:   token.startLine,\n\t                    col:    token.startCol\n\t                });\n\t\n\t                this._readWhitespace();\n\t                tokenStream.mustMatch(Tokens.RBRACE);\n\t\n\t            },\n\t\n\t            _keyframe_name: function(){\n\t\n\t                /*\n\t                 * keyframe_name:\n\t                 *   : IDENT\n\t                 *   | STRING\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    token;\n\t\n\t                tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);\n\t                return SyntaxUnit.fromToken(tokenStream.token());\n\t            },\n\t\n\t            _keyframe_rule: function(){\n\t\n\t                /*\n\t                 * keyframe_rule:\n\t                 *   : key_list S*\n\t                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    token,\n\t                    keyList = this._key_list();\n\t\n\t                this.fire({\n\t                    type:   \"startkeyframerule\",\n\t                    keys:   keyList,\n\t                    line:   keyList[0].line,\n\t                    col:    keyList[0].col\n\t                });\n\t\n\t                this._readDeclarations(true);\n\t\n\t                this.fire({\n\t                    type:   \"endkeyframerule\",\n\t                    keys:   keyList,\n\t                    line:   keyList[0].line,\n\t                    col:    keyList[0].col\n\t                });\n\t\n\t            },\n\t\n\t            _key_list: function(){\n\t\n\t                /*\n\t                 * key_list:\n\t                 *   : key [ S* ',' S* key]*\n\t                 *   ;\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    token,\n\t                    key,\n\t                    keyList = [];\n\t\n\t                //must be least one key\n\t                keyList.push(this._key());\n\t\n\t                this._readWhitespace();\n\t\n\t                while(tokenStream.match(Tokens.COMMA)){\n\t                    this._readWhitespace();\n\t                    keyList.push(this._key());\n\t                    this._readWhitespace();\n\t                }\n\t\n\t                return keyList;\n\t            },\n\t\n\t            _key: function(){\n\t                /*\n\t                 * There is a restriction that IDENT can be only \"from\" or \"to\".\n\t                 *\n\t                 * key\n\t                 *   : PERCENTAGE\n\t                 *   | IDENT\n\t                 *   ;\n\t                 */\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    token;\n\t\n\t                if (tokenStream.match(Tokens.PERCENTAGE)){\n\t                    return SyntaxUnit.fromToken(tokenStream.token());\n\t                } else if (tokenStream.match(Tokens.IDENT)){\n\t                    token = tokenStream.token();\n\t\n\t                    if (/from|to/i.test(token.value)){\n\t                        return SyntaxUnit.fromToken(token);\n\t                    }\n\t\n\t                    tokenStream.unget();\n\t                }\n\t\n\t                //if it gets here, there wasn't a valid token, so time to explode\n\t                this._unexpectedToken(tokenStream.LT(1));\n\t            },\n\t\n\t            //-----------------------------------------------------------------\n\t            // Helper methods\n\t            //-----------------------------------------------------------------\n\t\n\t            /**\n\t             * Not part of CSS grammar, but useful for skipping over\n\t             * combination of white space and HTML-style comments.\n\t             * @return {void}\n\t             * @method _skipCruft\n\t             * @private\n\t             */\n\t            _skipCruft: function(){\n\t                while(this._tokenStream.match([Tokens.S, Tokens.CDO, Tokens.CDC])){\n\t                    //noop\n\t                }\n\t            },\n\t\n\t            /**\n\t             * Not part of CSS grammar, but this pattern occurs frequently\n\t             * in the official CSS grammar. Split out here to eliminate\n\t             * duplicate code.\n\t             * @param {Boolean} checkStart Indicates if the rule should check\n\t             *      for the left brace at the beginning.\n\t             * @param {Boolean} readMargins Indicates if the rule should check\n\t             *      for margin patterns.\n\t             * @return {void}\n\t             * @method _readDeclarations\n\t             * @private\n\t             */\n\t            _readDeclarations: function(checkStart, readMargins){\n\t                /*\n\t                 * Reads the pattern\n\t                 * S* '{' S* declaration [ ';' S* declaration ]* '}' S*\n\t                 * or\n\t                 * S* '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*\n\t                 * Note that this is how it is described in CSS3 Paged Media, but is actually incorrect.\n\t                 * A semicolon is only necessary following a declaration is there's another declaration\n\t                 * or margin afterwards.\n\t                 */\n\t                var tokenStream = this._tokenStream,\n\t                    tt;\n\t\n\t\n\t                this._readWhitespace();\n\t\n\t                if (checkStart){\n\t                    tokenStream.mustMatch(Tokens.LBRACE);\n\t                }\n\t\n\t                this._readWhitespace();\n\t\n\t                try {\n\t\n\t                    while(true){\n\t\n\t                        if (tokenStream.match(Tokens.SEMICOLON) || (readMargins && this._margin())){\n\t                            //noop\n\t                        } else if (this._declaration()){\n\t                            if (!tokenStream.match(Tokens.SEMICOLON)){\n\t                                break;\n\t                            }\n\t                        } else {\n\t                            break;\n\t                        }\n\t\n\t                        //if ((!this._margin() && !this._declaration()) || !tokenStream.match(Tokens.SEMICOLON)){\n\t                        //    break;\n\t                        //}\n\t                        this._readWhitespace();\n\t                    }\n\t\n\t                    tokenStream.mustMatch(Tokens.RBRACE);\n\t                    this._readWhitespace();\n\t\n\t                } catch (ex) {\n\t                    if (ex instanceof SyntaxError && !this.options.strict){\n\t\n\t                        //fire error event\n\t                        this.fire({\n\t                            type:       \"error\",\n\t                            error:      ex,\n\t                            message:    ex.message,\n\t                            line:       ex.line,\n\t                            col:        ex.col\n\t                        });\n\t\n\t                        //see if there's another declaration\n\t                        tt = tokenStream.advance([Tokens.SEMICOLON, Tokens.RBRACE]);\n\t                        if (tt == Tokens.SEMICOLON){\n\t                            //if there's a semicolon, then there might be another declaration\n\t                            this._readDeclarations(false, readMargins);\n\t                        } else if (tt != Tokens.RBRACE){\n\t                            //if there's a right brace, the rule is finished so don't do anything\n\t                            //otherwise, rethrow the error because it wasn't handled properly\n\t                            throw ex;\n\t                        }\n\t\n\t                    } else {\n\t                        //not a syntax error, rethrow it\n\t                        throw ex;\n\t                    }\n\t                }\n\t\n\t            },\n\t\n\t            /**\n\t             * In some cases, you can end up with two white space tokens in a\n\t             * row. Instead of making a change in every function that looks for\n\t             * white space, this function is used to match as much white space\n\t             * as necessary.\n\t             * @method _readWhitespace\n\t             * @return {String} The white space if found, empty string if not.\n\t             * @private\n\t             */\n\t            _readWhitespace: function(){\n\t\n\t                var tokenStream = this._tokenStream,\n\t                    ws = \"\";\n\t\n\t                while(tokenStream.match(Tokens.S)){\n\t                    ws += tokenStream.token().value;\n\t                }\n\t\n\t                return ws;\n\t            },\n\t\n\t\n\t            /**\n\t             * Throws an error when an unexpected token is found.\n\t             * @param {Object} token The token that was found.\n\t             * @method _unexpectedToken\n\t             * @return {void}\n\t             * @private\n\t             */\n\t            _unexpectedToken: function(token){\n\t                throw new SyntaxError(\"Unexpected token '\" + token.value + \"' at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n\t            },\n\t\n\t            /**\n\t             * Helper method used for parsing subparts of a style sheet.\n\t             * @return {void}\n\t             * @method _verifyEnd\n\t             * @private\n\t             */\n\t            _verifyEnd: function(){\n\t                if (this._tokenStream.LA(1) != Tokens.EOF){\n\t                    this._unexpectedToken(this._tokenStream.LT(1));\n\t                }\n\t            },\n\t\n\t            //-----------------------------------------------------------------\n\t            // Validation methods\n\t            //-----------------------------------------------------------------\n\t            _validateProperty: function(property, value){\n\t                Validation.validate(property, value);\n\t            },\n\t\n\t            //-----------------------------------------------------------------\n\t            // Parsing methods\n\t            //-----------------------------------------------------------------\n\t\n\t            parse: function(input){\n\t                this._tokenStream = new TokenStream(input, Tokens);\n\t                this._stylesheet();\n\t            },\n\t\n\t            parseStyleSheet: function(input){\n\t                //just passthrough\n\t                return this.parse(input);\n\t            },\n\t\n\t            parseMediaQuery: function(input){\n\t                this._tokenStream = new TokenStream(input, Tokens);\n\t                var result = this._media_query();\n\t\n\t                //if there's anything more, then it's an invalid selector\n\t                this._verifyEnd();\n\t\n\t                //otherwise return result\n\t                return result;\n\t            },\n\t\n\t            /**\n\t             * Parses a property value (everything after the semicolon).\n\t             * @return {parserlib.css.PropertyValue} The property value.\n\t             * @throws parserlib.util.SyntaxError If an unexpected token is found.\n\t             * @method parserPropertyValue\n\t             */\n\t            parsePropertyValue: function(input){\n\t\n\t                this._tokenStream = new TokenStream(input, Tokens);\n\t                this._readWhitespace();\n\t\n\t                var result = this._expr();\n\t\n\t                //okay to have a trailing white space\n\t                this._readWhitespace();\n\t\n\t                //if there's anything more, then it's an invalid selector\n\t                this._verifyEnd();\n\t\n\t                //otherwise return result\n\t                return result;\n\t            },\n\t\n\t            /**\n\t             * Parses a complete CSS rule, including selectors and\n\t             * properties.\n\t             * @param {String} input The text to parser.\n\t             * @return {Boolean} True if the parse completed successfully, false if not.\n\t             * @method parseRule\n\t             */\n\t            parseRule: function(input){\n\t                this._tokenStream = new TokenStream(input, Tokens);\n\t\n\t                //skip any leading white space\n\t                this._readWhitespace();\n\t\n\t                var result = this._ruleset();\n\t\n\t                //skip any trailing white space\n\t                this._readWhitespace();\n\t\n\t                //if there's anything more, then it's an invalid selector\n\t                this._verifyEnd();\n\t\n\t                //otherwise return result\n\t                return result;\n\t            },\n\t\n\t            /**\n\t             * Parses a single CSS selector (no comma)\n\t             * @param {String} input The text to parse as a CSS selector.\n\t             * @return {Selector} An object representing the selector.\n\t             * @throws parserlib.util.SyntaxError If an unexpected token is found.\n\t             * @method parseSelector\n\t             */\n\t            parseSelector: function(input){\n\t\n\t                this._tokenStream = new TokenStream(input, Tokens);\n\t\n\t                //skip any leading white space\n\t                this._readWhitespace();\n\t\n\t                var result = this._selector();\n\t\n\t                //skip any trailing white space\n\t                this._readWhitespace();\n\t\n\t                //if there's anything more, then it's an invalid selector\n\t                this._verifyEnd();\n\t\n\t                //otherwise return result\n\t                return result;\n\t            },\n\t\n\t            /**\n\t             * Parses an HTML style attribute: a set of CSS declarations\n\t             * separated by semicolons.\n\t             * @param {String} input The text to parse as a style attribute\n\t             * @return {void}\n\t             * @method parseStyleAttribute\n\t             */\n\t            parseStyleAttribute: function(input){\n\t                input += \"}\"; // for error recovery in _readDeclarations()\n\t                this._tokenStream = new TokenStream(input, Tokens);\n\t                this._readDeclarations();\n\t            }\n\t        };\n\t\n\t    //copy over onto prototype\n\t    for (prop in additions){\n\t        if (additions.hasOwnProperty(prop)){\n\t            proto[prop] = additions[prop];\n\t        }\n\t    }\n\t\n\t    return proto;\n\t}();\n\t\n\t\n\t/*\n\tnth\n\t  : S* [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]? |\n\t         ['-'|'+']? INTEGER | {O}{D}{D} | {E}{V}{E}{N} ] S*\n\t  ;\n\t*/\n\t/*global Validation, ValidationTypes, ValidationError*/\n\tvar Properties = {\n\t\n\t    //A\n\t    \"align-items\"                   : \"flex-start | flex-end | center | baseline | stretch\",\n\t    \"align-content\"                 : \"flex-start | flex-end | center | space-between | space-around | stretch\",\n\t    \"align-self\"                    : \"auto | flex-start | flex-end | center | baseline | stretch\",\n\t    \"-webkit-align-items\"           : \"flex-start | flex-end | center | baseline | stretch\",\n\t    \"-webkit-align-content\"         : \"flex-start | flex-end | center | space-between | space-around | stretch\",\n\t    \"-webkit-align-self\"            : \"auto | flex-start | flex-end | center | baseline | stretch\",\n\t    \"alignment-adjust\"              : \"auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>\",\n\t    \"alignment-baseline\"            : \"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n\t    \"animation\"                     : 1,\n\t    \"animation-delay\"               : { multi: \"<time>\", comma: true },\n\t    \"animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n\t    \"animation-duration\"            : { multi: \"<time>\", comma: true },\n\t    \"animation-fill-mode\"           : { multi: \"none | forwards | backwards | both\", comma: true },\n\t    \"animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n\t    \"animation-name\"                : { multi: \"none | <ident>\", comma: true },\n\t    \"animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\t    \"animation-timing-function\"     : 1,\n\t\n\t    //vendor prefixed\n\t    \"-moz-animation-delay\"               : { multi: \"<time>\", comma: true },\n\t    \"-moz-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n\t    \"-moz-animation-duration\"            : { multi: \"<time>\", comma: true },\n\t    \"-moz-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n\t    \"-moz-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n\t    \"-moz-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\t\n\t    \"-ms-animation-delay\"               : { multi: \"<time>\", comma: true },\n\t    \"-ms-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n\t    \"-ms-animation-duration\"            : { multi: \"<time>\", comma: true },\n\t    \"-ms-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n\t    \"-ms-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n\t    \"-ms-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\t\n\t    \"-webkit-animation-delay\"               : { multi: \"<time>\", comma: true },\n\t    \"-webkit-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n\t    \"-webkit-animation-duration\"            : { multi: \"<time>\", comma: true },\n\t    \"-webkit-animation-fill-mode\"           : { multi: \"none | forwards | backwards | both\", comma: true },\n\t    \"-webkit-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n\t    \"-webkit-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n\t    \"-webkit-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\t\n\t    \"-o-animation-delay\"               : { multi: \"<time>\", comma: true },\n\t    \"-o-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n\t    \"-o-animation-duration\"            : { multi: \"<time>\", comma: true },\n\t    \"-o-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n\t    \"-o-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n\t    \"-o-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\t\n\t    \"appearance\"                    : \"icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit\",\n\t    \"azimuth\"                       : function (expression) {\n\t        var simple      = \"<angle> | leftwards | rightwards | inherit\",\n\t            direction   = \"left-side | far-left | left | center-left | center | center-right | right | far-right | right-side\",\n\t            behind      = false,\n\t            valid       = false,\n\t            part;\n\t\n\t        if (!ValidationTypes.isAny(expression, simple)) {\n\t            if (ValidationTypes.isAny(expression, \"behind\")) {\n\t                behind = true;\n\t                valid = true;\n\t            }\n\t\n\t            if (ValidationTypes.isAny(expression, direction)) {\n\t                valid = true;\n\t                if (!behind) {\n\t                    ValidationTypes.isAny(expression, \"behind\");\n\t                }\n\t            }\n\t        }\n\t\n\t        if (expression.hasNext()) {\n\t            part = expression.next();\n\t            if (valid) {\n\t                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            } else {\n\t                throw new ValidationError(\"Expected (<'azimuth'>) but found '\" + part + \"'.\", part.line, part.col);\n\t            }\n\t        }\n\t    },\n\t\n\t    //B\n\t    \"backface-visibility\"           : \"visible | hidden\",\n\t    \"background\"                    : 1,\n\t    \"background-attachment\"         : { multi: \"<attachment>\", comma: true },\n\t    \"background-clip\"               : { multi: \"<box>\", comma: true },\n\t    \"background-color\"              : \"<color> | inherit\",\n\t    \"background-image\"              : { multi: \"<bg-image>\", comma: true },\n\t    \"background-origin\"             : { multi: \"<box>\", comma: true },\n\t    \"background-position\"           : { multi: \"<bg-position>\", comma: true },\n\t    \"background-repeat\"             : { multi: \"<repeat-style>\" },\n\t    \"background-size\"               : { multi: \"<bg-size>\", comma: true },\n\t    \"baseline-shift\"                : \"baseline | sub | super | <percentage> | <length>\",\n\t    \"behavior\"                      : 1,\n\t    \"binding\"                       : 1,\n\t    \"bleed\"                         : \"<length>\",\n\t    \"bookmark-label\"                : \"<content> | <attr> | <string>\",\n\t    \"bookmark-level\"                : \"none | <integer>\",\n\t    \"bookmark-state\"                : \"open | closed\",\n\t    \"bookmark-target\"               : \"none | <uri> | <attr>\",\n\t    \"border\"                        : \"<border-width> || <border-style> || <color>\",\n\t    \"border-bottom\"                 : \"<border-width> || <border-style> || <color>\",\n\t    \"border-bottom-color\"           : \"<color> | inherit\",\n\t    \"border-bottom-left-radius\"     :  \"<x-one-radius>\",\n\t    \"border-bottom-right-radius\"    :  \"<x-one-radius>\",\n\t    \"border-bottom-style\"           : \"<border-style>\",\n\t    \"border-bottom-width\"           : \"<border-width>\",\n\t    \"border-collapse\"               : \"collapse | separate | inherit\",\n\t    \"border-color\"                  : { multi: \"<color> | inherit\", max: 4 },\n\t    \"border-image\"                  : 1,\n\t    \"border-image-outset\"           : { multi: \"<length> | <number>\", max: 4 },\n\t    \"border-image-repeat\"           : { multi: \"stretch | repeat | round\", max: 2 },\n\t    \"border-image-slice\"            : function(expression) {\n\t\n\t        var valid   = false,\n\t            numeric = \"<number> | <percentage>\",\n\t            fill    = false,\n\t            count   = 0,\n\t            max     = 4,\n\t            part;\n\t\n\t        if (ValidationTypes.isAny(expression, \"fill\")) {\n\t            fill = true;\n\t            valid = true;\n\t        }\n\t\n\t        while (expression.hasNext() && count < max) {\n\t            valid = ValidationTypes.isAny(expression, numeric);\n\t            if (!valid) {\n\t                break;\n\t            }\n\t            count++;\n\t        }\n\t\n\t\n\t        if (!fill) {\n\t            ValidationTypes.isAny(expression, \"fill\");\n\t        } else {\n\t            valid = true;\n\t        }\n\t\n\t        if (expression.hasNext()) {\n\t            part = expression.next();\n\t            if (valid) {\n\t                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            } else {\n\t                throw new ValidationError(\"Expected ([<number> | <percentage>]{1,4} && fill?) but found '\" + part + \"'.\", part.line, part.col);\n\t            }\n\t        }\n\t    },\n\t    \"border-image-source\"           : \"<image> | none\",\n\t    \"border-image-width\"            : { multi: \"<length> | <percentage> | <number> | auto\", max: 4 },\n\t    \"border-left\"                   : \"<border-width> || <border-style> || <color>\",\n\t    \"border-left-color\"             : \"<color> | inherit\",\n\t    \"border-left-style\"             : \"<border-style>\",\n\t    \"border-left-width\"             : \"<border-width>\",\n\t    \"border-radius\"                 : function(expression) {\n\t\n\t        var valid   = false,\n\t            simple = \"<length> | <percentage> | inherit\",\n\t            slash   = false,\n\t            fill    = false,\n\t            count   = 0,\n\t            max     = 8,\n\t            part;\n\t\n\t        while (expression.hasNext() && count < max) {\n\t            valid = ValidationTypes.isAny(expression, simple);\n\t            if (!valid) {\n\t\n\t                if (expression.peek() == \"/\" && count > 0 && !slash) {\n\t                    slash = true;\n\t                    max = count + 5;\n\t                    expression.next();\n\t                } else {\n\t                    break;\n\t                }\n\t            }\n\t            count++;\n\t        }\n\t\n\t        if (expression.hasNext()) {\n\t            part = expression.next();\n\t            if (valid) {\n\t                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            } else {\n\t                throw new ValidationError(\"Expected (<'border-radius'>) but found '\" + part + \"'.\", part.line, part.col);\n\t            }\n\t        }\n\t    },\n\t    \"border-right\"                  : \"<border-width> || <border-style> || <color>\",\n\t    \"border-right-color\"            : \"<color> | inherit\",\n\t    \"border-right-style\"            : \"<border-style>\",\n\t    \"border-right-width\"            : \"<border-width>\",\n\t    \"border-spacing\"                : { multi: \"<length> | inherit\", max: 2 },\n\t    \"border-style\"                  : { multi: \"<border-style>\", max: 4 },\n\t    \"border-top\"                    : \"<border-width> || <border-style> || <color>\",\n\t    \"border-top-color\"              : \"<color> | inherit\",\n\t    \"border-top-left-radius\"        : \"<x-one-radius>\",\n\t    \"border-top-right-radius\"       : \"<x-one-radius>\",\n\t    \"border-top-style\"              : \"<border-style>\",\n\t    \"border-top-width\"              : \"<border-width>\",\n\t    \"border-width\"                  : { multi: \"<border-width>\", max: 4 },\n\t    \"bottom\"                        : \"<margin-width> | inherit\",\n\t    \"-moz-box-align\"                : \"start | end | center | baseline | stretch\",\n\t    \"-moz-box-decoration-break\"     : \"slice |clone\",\n\t    \"-moz-box-direction\"            : \"normal | reverse | inherit\",\n\t    \"-moz-box-flex\"                 : \"<number>\",\n\t    \"-moz-box-flex-group\"           : \"<integer>\",\n\t    \"-moz-box-lines\"                : \"single | multiple\",\n\t    \"-moz-box-ordinal-group\"        : \"<integer>\",\n\t    \"-moz-box-orient\"               : \"horizontal | vertical | inline-axis | block-axis | inherit\",\n\t    \"-moz-box-pack\"                 : \"start | end | center | justify\",\n\t    \"-webkit-box-align\"             : \"start | end | center | baseline | stretch\",\n\t    \"-webkit-box-decoration-break\"  : \"slice |clone\",\n\t    \"-webkit-box-direction\"         : \"normal | reverse | inherit\",\n\t    \"-webkit-box-flex\"              : \"<number>\",\n\t    \"-webkit-box-flex-group\"        : \"<integer>\",\n\t    \"-webkit-box-lines\"             : \"single | multiple\",\n\t    \"-webkit-box-ordinal-group\"     : \"<integer>\",\n\t    \"-webkit-box-orient\"            : \"horizontal | vertical | inline-axis | block-axis | inherit\",\n\t    \"-webkit-box-pack\"              : \"start | end | center | justify\",\n\t    \"box-shadow\"                    : function (expression) {\n\t        var result      = false,\n\t            part;\n\t\n\t        if (!ValidationTypes.isAny(expression, \"none\")) {\n\t            Validation.multiProperty(\"<shadow>\", expression, true, Infinity);\n\t        } else {\n\t            if (expression.hasNext()) {\n\t                part = expression.next();\n\t                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            }\n\t        }\n\t    },\n\t    \"box-sizing\"                    : \"content-box | border-box | inherit\",\n\t    \"break-after\"                   : \"auto | always | avoid | left | right | page | column | avoid-page | avoid-column\",\n\t    \"break-before\"                  : \"auto | always | avoid | left | right | page | column | avoid-page | avoid-column\",\n\t    \"break-inside\"                  : \"auto | avoid | avoid-page | avoid-column\",\n\t\n\t    //C\n\t    \"caption-side\"                  : \"top | bottom | inherit\",\n\t    \"clear\"                         : \"none | right | left | both | inherit\",\n\t    \"clip\"                          : 1,\n\t    \"color\"                         : \"<color> | inherit\",\n\t    \"color-profile\"                 : 1,\n\t    \"column-count\"                  : \"<integer> | auto\",                      //http://www.w3.org/TR/css3-multicol/\n\t    \"column-fill\"                   : \"auto | balance\",\n\t    \"column-gap\"                    : \"<length> | normal\",\n\t    \"column-rule\"                   : \"<border-width> || <border-style> || <color>\",\n\t    \"column-rule-color\"             : \"<color>\",\n\t    \"column-rule-style\"             : \"<border-style>\",\n\t    \"column-rule-width\"             : \"<border-width>\",\n\t    \"column-span\"                   : \"none | all\",\n\t    \"column-width\"                  : \"<length> | auto\",\n\t    \"columns\"                       : 1,\n\t    \"content\"                       : 1,\n\t    \"counter-increment\"             : 1,\n\t    \"counter-reset\"                 : 1,\n\t    \"crop\"                          : \"<shape> | auto\",\n\t    \"cue\"                           : \"cue-after | cue-before | inherit\",\n\t    \"cue-after\"                     : 1,\n\t    \"cue-before\"                    : 1,\n\t    \"cursor\"                        : 1,\n\t\n\t    //D\n\t    \"direction\"                     : \"ltr | rtl | inherit\",\n\t    \"display\"                       : \"inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex\",\n\t    \"dominant-baseline\"             : 1,\n\t    \"drop-initial-after-adjust\"     : \"central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>\",\n\t    \"drop-initial-after-align\"      : \"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n\t    \"drop-initial-before-adjust\"    : \"before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>\",\n\t    \"drop-initial-before-align\"     : \"caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n\t    \"drop-initial-size\"             : \"auto | line | <length> | <percentage>\",\n\t    \"drop-initial-value\"            : \"initial | <integer>\",\n\t\n\t    //E\n\t    \"elevation\"                     : \"<angle> | below | level | above | higher | lower | inherit\",\n\t    \"empty-cells\"                   : \"show | hide | inherit\",\n\t\n\t    //F\n\t    \"filter\"                        : 1,\n\t    \"fit\"                           : \"fill | hidden | meet | slice\",\n\t    \"fit-position\"                  : 1,\n\t    \"flex\"                          : \"<flex>\",\n\t    \"flex-basis\"                    : \"<width>\",\n\t    \"flex-direction\"                : \"row | row-reverse | column | column-reverse\",\n\t    \"flex-flow\"                     : \"<flex-direction> || <flex-wrap>\",\n\t    \"flex-grow\"                     : \"<number>\",\n\t    \"flex-shrink\"                   : \"<number>\",\n\t    \"flex-wrap\"                     : \"nowrap | wrap | wrap-reverse\",\n\t    \"-webkit-flex\"                  : \"<flex>\",\n\t    \"-webkit-flex-basis\"            : \"<width>\",\n\t    \"-webkit-flex-direction\"        : \"row | row-reverse | column | column-reverse\",\n\t    \"-webkit-flex-flow\"             : \"<flex-direction> || <flex-wrap>\",\n\t    \"-webkit-flex-grow\"             : \"<number>\",\n\t    \"-webkit-flex-shrink\"           : \"<number>\",\n\t    \"-webkit-flex-wrap\"             : \"nowrap | wrap | wrap-reverse\",\n\t    \"-ms-flex\"                      : \"<flex>\",\n\t    \"-ms-flex-align\"                : \"start | end | center | stretch | baseline\",\n\t    \"-ms-flex-direction\"            : \"row | row-reverse | column | column-reverse | inherit\",\n\t    \"-ms-flex-order\"                : \"<number>\",\n\t    \"-ms-flex-pack\"                 : \"start | end | center | justify\",\n\t    \"-ms-flex-wrap\"                 : \"nowrap | wrap | wrap-reverse\",\n\t    \"float\"                         : \"left | right | none | inherit\",\n\t    \"float-offset\"                  : 1,\n\t    \"font\"                          : 1,\n\t    \"font-family\"                   : 1,\n\t    \"font-size\"                     : \"<absolute-size> | <relative-size> | <length> | <percentage> | inherit\",\n\t    \"font-size-adjust\"              : \"<number> | none | inherit\",\n\t    \"font-stretch\"                  : \"normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit\",\n\t    \"font-style\"                    : \"normal | italic | oblique | inherit\",\n\t    \"font-variant\"                  : \"normal | small-caps | inherit\",\n\t    \"font-weight\"                   : \"normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit\",\n\t\n\t    //G\n\t    \"grid-cell-stacking\"            : \"columns | rows | layer\",\n\t    \"grid-column\"                   : 1,\n\t    \"grid-columns\"                  : 1,\n\t    \"grid-column-align\"             : \"start | end | center | stretch\",\n\t    \"grid-column-sizing\"            : 1,\n\t    \"grid-column-span\"              : \"<integer>\",\n\t    \"grid-flow\"                     : \"none | rows | columns\",\n\t    \"grid-layer\"                    : \"<integer>\",\n\t    \"grid-row\"                      : 1,\n\t    \"grid-rows\"                     : 1,\n\t    \"grid-row-align\"                : \"start | end | center | stretch\",\n\t    \"grid-row-span\"                 : \"<integer>\",\n\t    \"grid-row-sizing\"               : 1,\n\t\n\t    //H\n\t    \"hanging-punctuation\"           : 1,\n\t    \"height\"                        : \"<margin-width> | <content-sizing> | inherit\",\n\t    \"hyphenate-after\"               : \"<integer> | auto\",\n\t    \"hyphenate-before\"              : \"<integer> | auto\",\n\t    \"hyphenate-character\"           : \"<string> | auto\",\n\t    \"hyphenate-lines\"               : \"no-limit | <integer>\",\n\t    \"hyphenate-resource\"            : 1,\n\t    \"hyphens\"                       : \"none | manual | auto\",\n\t\n\t    //I\n\t    \"icon\"                          : 1,\n\t    \"image-orientation\"             : \"angle | auto\",\n\t    \"image-rendering\"               : 1,\n\t    \"image-resolution\"              : 1,\n\t    \"inline-box-align\"              : \"initial | last | <integer>\",\n\t\n\t    //J\n\t    \"justify-content\"               : \"flex-start | flex-end | center | space-between | space-around\",\n\t    \"-webkit-justify-content\"       : \"flex-start | flex-end | center | space-between | space-around\",\n\t\n\t    //L\n\t    \"left\"                          : \"<margin-width> | inherit\",\n\t    \"letter-spacing\"                : \"<length> | normal | inherit\",\n\t    \"line-height\"                   : \"<number> | <length> | <percentage> | normal | inherit\",\n\t    \"line-break\"                    : \"auto | loose | normal | strict\",\n\t    \"line-stacking\"                 : 1,\n\t    \"line-stacking-ruby\"            : \"exclude-ruby | include-ruby\",\n\t    \"line-stacking-shift\"           : \"consider-shifts | disregard-shifts\",\n\t    \"line-stacking-strategy\"        : \"inline-line-height | block-line-height | max-height | grid-height\",\n\t    \"list-style\"                    : 1,\n\t    \"list-style-image\"              : \"<uri> | none | inherit\",\n\t    \"list-style-position\"           : \"inside | outside | inherit\",\n\t    \"list-style-type\"               : \"disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit\",\n\t\n\t    //M\n\t    \"margin\"                        : { multi: \"<margin-width> | inherit\", max: 4 },\n\t    \"margin-bottom\"                 : \"<margin-width> | inherit\",\n\t    \"margin-left\"                   : \"<margin-width> | inherit\",\n\t    \"margin-right\"                  : \"<margin-width> | inherit\",\n\t    \"margin-top\"                    : \"<margin-width> | inherit\",\n\t    \"mark\"                          : 1,\n\t    \"mark-after\"                    : 1,\n\t    \"mark-before\"                   : 1,\n\t    \"marks\"                         : 1,\n\t    \"marquee-direction\"             : 1,\n\t    \"marquee-play-count\"            : 1,\n\t    \"marquee-speed\"                 : 1,\n\t    \"marquee-style\"                 : 1,\n\t    \"max-height\"                    : \"<length> | <percentage> | <content-sizing> | none | inherit\",\n\t    \"max-width\"                     : \"<length> | <percentage> | <content-sizing> | none | inherit\",\n\t    \"min-height\"                    : \"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit\",\n\t    \"min-width\"                     : \"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit\",\n\t    \"move-to\"                       : 1,\n\t\n\t    //N\n\t    \"nav-down\"                      : 1,\n\t    \"nav-index\"                     : 1,\n\t    \"nav-left\"                      : 1,\n\t    \"nav-right\"                     : 1,\n\t    \"nav-up\"                        : 1,\n\t\n\t    //O\n\t    \"opacity\"                       : \"<number> | inherit\",\n\t    \"order\"                         : \"<integer>\",\n\t    \"-webkit-order\"                 : \"<integer>\",\n\t    \"orphans\"                       : \"<integer> | inherit\",\n\t    \"outline\"                       : 1,\n\t    \"outline-color\"                 : \"<color> | invert | inherit\",\n\t    \"outline-offset\"                : 1,\n\t    \"outline-style\"                 : \"<border-style> | inherit\",\n\t    \"outline-width\"                 : \"<border-width> | inherit\",\n\t    \"overflow\"                      : \"visible | hidden | scroll | auto | inherit\",\n\t    \"overflow-style\"                : 1,\n\t    \"overflow-wrap\"                 : \"normal | break-word\",\n\t    \"overflow-x\"                    : 1,\n\t    \"overflow-y\"                    : 1,\n\t\n\t    //P\n\t    \"padding\"                       : { multi: \"<padding-width> | inherit\", max: 4 },\n\t    \"padding-bottom\"                : \"<padding-width> | inherit\",\n\t    \"padding-left\"                  : \"<padding-width> | inherit\",\n\t    \"padding-right\"                 : \"<padding-width> | inherit\",\n\t    \"padding-top\"                   : \"<padding-width> | inherit\",\n\t    \"page\"                          : 1,\n\t    \"page-break-after\"              : \"auto | always | avoid | left | right | inherit\",\n\t    \"page-break-before\"             : \"auto | always | avoid | left | right | inherit\",\n\t    \"page-break-inside\"             : \"auto | avoid | inherit\",\n\t    \"page-policy\"                   : 1,\n\t    \"pause\"                         : 1,\n\t    \"pause-after\"                   : 1,\n\t    \"pause-before\"                  : 1,\n\t    \"perspective\"                   : 1,\n\t    \"perspective-origin\"            : 1,\n\t    \"phonemes\"                      : 1,\n\t    \"pitch\"                         : 1,\n\t    \"pitch-range\"                   : 1,\n\t    \"play-during\"                   : 1,\n\t    \"pointer-events\"                : \"auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit\",\n\t    \"position\"                      : \"static | relative | absolute | fixed | inherit\",\n\t    \"presentation-level\"            : 1,\n\t    \"punctuation-trim\"              : 1,\n\t\n\t    //Q\n\t    \"quotes\"                        : 1,\n\t\n\t    //R\n\t    \"rendering-intent\"              : 1,\n\t    \"resize\"                        : 1,\n\t    \"rest\"                          : 1,\n\t    \"rest-after\"                    : 1,\n\t    \"rest-before\"                   : 1,\n\t    \"richness\"                      : 1,\n\t    \"right\"                         : \"<margin-width> | inherit\",\n\t    \"rotation\"                      : 1,\n\t    \"rotation-point\"                : 1,\n\t    \"ruby-align\"                    : 1,\n\t    \"ruby-overhang\"                 : 1,\n\t    \"ruby-position\"                 : 1,\n\t    \"ruby-span\"                     : 1,\n\t\n\t    //S\n\t    \"size\"                          : 1,\n\t    \"speak\"                         : \"normal | none | spell-out | inherit\",\n\t    \"speak-header\"                  : \"once | always | inherit\",\n\t    \"speak-numeral\"                 : \"digits | continuous | inherit\",\n\t    \"speak-punctuation\"             : \"code | none | inherit\",\n\t    \"speech-rate\"                   : 1,\n\t    \"src\"                           : 1,\n\t    \"stress\"                        : 1,\n\t    \"string-set\"                    : 1,\n\t\n\t    \"table-layout\"                  : \"auto | fixed | inherit\",\n\t    \"tab-size\"                      : \"<integer> | <length>\",\n\t    \"target\"                        : 1,\n\t    \"target-name\"                   : 1,\n\t    \"target-new\"                    : 1,\n\t    \"target-position\"               : 1,\n\t    \"text-align\"                    : \"left | right | center | justify | inherit\" ,\n\t    \"text-align-last\"               : 1,\n\t    \"text-decoration\"               : 1,\n\t    \"text-emphasis\"                 : 1,\n\t    \"text-height\"                   : 1,\n\t    \"text-indent\"                   : \"<length> | <percentage> | inherit\",\n\t    \"text-justify\"                  : \"auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida\",\n\t    \"text-outline\"                  : 1,\n\t    \"text-overflow\"                 : 1,\n\t    \"text-rendering\"                : \"auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit\",\n\t    \"text-shadow\"                   : 1,\n\t    \"text-transform\"                : \"capitalize | uppercase | lowercase | none | inherit\",\n\t    \"text-wrap\"                     : \"normal | none | avoid\",\n\t    \"top\"                           : \"<margin-width> | inherit\",\n\t    \"-ms-touch-action\"              : \"auto | none | pan-x | pan-y\",\n\t    \"touch-action\"                  : \"auto | none | pan-x | pan-y\",\n\t    \"transform\"                     : 1,\n\t    \"transform-origin\"              : 1,\n\t    \"transform-style\"               : 1,\n\t    \"transition\"                    : 1,\n\t    \"transition-delay\"              : 1,\n\t    \"transition-duration\"           : 1,\n\t    \"transition-property\"           : 1,\n\t    \"transition-timing-function\"    : 1,\n\t\n\t    //U\n\t    \"unicode-bidi\"                  : \"normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit\",\n\t    \"user-modify\"                   : \"read-only | read-write | write-only | inherit\",\n\t    \"user-select\"                   : \"none | text | toggle | element | elements | all | inherit\",\n\t\n\t    //V\n\t    \"vertical-align\"                : \"auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length>\",\n\t    \"visibility\"                    : \"visible | hidden | collapse | inherit\",\n\t    \"voice-balance\"                 : 1,\n\t    \"voice-duration\"                : 1,\n\t    \"voice-family\"                  : 1,\n\t    \"voice-pitch\"                   : 1,\n\t    \"voice-pitch-range\"             : 1,\n\t    \"voice-rate\"                    : 1,\n\t    \"voice-stress\"                  : 1,\n\t    \"voice-volume\"                  : 1,\n\t    \"volume\"                        : 1,\n\t\n\t    //W\n\t    \"white-space\"                   : \"normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap\", //http://perishablepress.com/wrapping-content/\n\t    \"white-space-collapse\"          : 1,\n\t    \"widows\"                        : \"<integer> | inherit\",\n\t    \"width\"                         : \"<length> | <percentage> | <content-sizing> | auto | inherit\",\n\t    \"word-break\"                    : \"normal | keep-all | break-all\",\n\t    \"word-spacing\"                  : \"<length> | normal | inherit\",\n\t    \"word-wrap\"                     : \"normal | break-word\",\n\t    \"writing-mode\"                  : \"horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit\",\n\t\n\t    //Z\n\t    \"z-index\"                       : \"<integer> | auto | inherit\",\n\t    \"zoom\"                          : \"<number> | <percentage> | normal\"\n\t};\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents a selector combinator (whitespace, +, >).\n\t * @namespace parserlib.css\n\t * @class PropertyName\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {String} text The text representation of the unit.\n\t * @param {String} hack The type of IE hack applied (\"*\", \"_\", or null).\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction PropertyName(text, hack, line, col){\n\t\n\t    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_NAME_TYPE);\n\t\n\t    /**\n\t     * The type of IE hack applied (\"*\", \"_\", or null).\n\t     * @type String\n\t     * @property hack\n\t     */\n\t    this.hack = hack;\n\t\n\t}\n\t\n\tPropertyName.prototype = new SyntaxUnit();\n\tPropertyName.prototype.constructor = PropertyName;\n\tPropertyName.prototype.toString = function(){\n\t    return (this.hack ? this.hack : \"\") + this.text;\n\t};\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents a single part of a CSS property value, meaning that it represents\n\t * just everything single part between \":\" and \";\". If there are multiple values\n\t * separated by commas, this type represents just one of the values.\n\t * @param {String[]} parts An array of value parts making up this value.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t * @namespace parserlib.css\n\t * @class PropertyValue\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t */\n\tfunction PropertyValue(parts, line, col){\n\t\n\t    SyntaxUnit.call(this, parts.join(\" \"), line, col, Parser.PROPERTY_VALUE_TYPE);\n\t\n\t    /**\n\t     * The parts that make up the selector.\n\t     * @type Array\n\t     * @property parts\n\t     */\n\t    this.parts = parts;\n\t\n\t}\n\t\n\tPropertyValue.prototype = new SyntaxUnit();\n\tPropertyValue.prototype.constructor = PropertyValue;\n\t\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * A utility class that allows for easy iteration over the various parts of a\n\t * property value.\n\t * @param {parserlib.css.PropertyValue} value The property value to iterate over.\n\t * @namespace parserlib.css\n\t * @class PropertyValueIterator\n\t * @constructor\n\t */\n\tfunction PropertyValueIterator(value){\n\t\n\t    /**\n\t     * Iterator value\n\t     * @type int\n\t     * @property _i\n\t     * @private\n\t     */\n\t    this._i = 0;\n\t\n\t    /**\n\t     * The parts that make up the value.\n\t     * @type Array\n\t     * @property _parts\n\t     * @private\n\t     */\n\t    this._parts = value.parts;\n\t\n\t    /**\n\t     * Keeps track of bookmarks along the way.\n\t     * @type Array\n\t     * @property _marks\n\t     * @private\n\t     */\n\t    this._marks = [];\n\t\n\t    /**\n\t     * Holds the original property value.\n\t     * @type parserlib.css.PropertyValue\n\t     * @property value\n\t     */\n\t    this.value = value;\n\t\n\t}\n\t\n\t/**\n\t * Returns the total number of parts in the value.\n\t * @return {int} The total number of parts in the value.\n\t * @method count\n\t */\n\tPropertyValueIterator.prototype.count = function(){\n\t    return this._parts.length;\n\t};\n\t\n\t/**\n\t * Indicates if the iterator is positioned at the first item.\n\t * @return {Boolean} True if positioned at first item, false if not.\n\t * @method isFirst\n\t */\n\tPropertyValueIterator.prototype.isFirst = function(){\n\t    return this._i === 0;\n\t};\n\t\n\t/**\n\t * Indicates if there are more parts of the property value.\n\t * @return {Boolean} True if there are more parts, false if not.\n\t * @method hasNext\n\t */\n\tPropertyValueIterator.prototype.hasNext = function(){\n\t    return (this._i < this._parts.length);\n\t};\n\t\n\t/**\n\t * Marks the current spot in the iteration so it can be restored to\n\t * later on.\n\t * @return {void}\n\t * @method mark\n\t */\n\tPropertyValueIterator.prototype.mark = function(){\n\t    this._marks.push(this._i);\n\t};\n\t\n\t/**\n\t * Returns the next part of the property value or null if there is no next\n\t * part. Does not move the internal counter forward.\n\t * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next\n\t * part.\n\t * @method peek\n\t */\n\tPropertyValueIterator.prototype.peek = function(count){\n\t    return this.hasNext() ? this._parts[this._i + (count || 0)] : null;\n\t};\n\t\n\t/**\n\t * Returns the next part of the property value or null if there is no next\n\t * part.\n\t * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next\n\t * part.\n\t * @method next\n\t */\n\tPropertyValueIterator.prototype.next = function(){\n\t    return this.hasNext() ? this._parts[this._i++] : null;\n\t};\n\t\n\t/**\n\t * Returns the previous part of the property value or null if there is no\n\t * previous part.\n\t * @return {parserlib.css.PropertyValuePart} The previous part of the\n\t * property value or null if there is no next part.\n\t * @method previous\n\t */\n\tPropertyValueIterator.prototype.previous = function(){\n\t    return this._i > 0 ? this._parts[--this._i] : null;\n\t};\n\t\n\t/**\n\t * Restores the last saved bookmark.\n\t * @return {void}\n\t * @method restore\n\t */\n\tPropertyValueIterator.prototype.restore = function(){\n\t    if (this._marks.length){\n\t        this._i = this._marks.pop();\n\t    }\n\t};\n\t\n\t/*global SyntaxUnit, Parser, Colors*/\n\t/**\n\t * Represents a single part of a CSS property value, meaning that it represents\n\t * just one part of the data between \":\" and \";\".\n\t * @param {String} text The text representation of the unit.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t * @namespace parserlib.css\n\t * @class PropertyValuePart\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t */\n\tfunction PropertyValuePart(text, line, col){\n\t\n\t    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_VALUE_PART_TYPE);\n\t\n\t    /**\n\t     * Indicates the type of value unit.\n\t     * @type String\n\t     * @property type\n\t     */\n\t    this.type = \"unknown\";\n\t\n\t    //figure out what type of data it is\n\t\n\t    var temp;\n\t\n\t    //it is a measurement?\n\t    if (/^([+\\-]?[\\d\\.]+)([a-z]+)$/i.test(text)){  //dimension\n\t        this.type = \"dimension\";\n\t        this.value = +RegExp.$1;\n\t        this.units = RegExp.$2;\n\t\n\t        //try to narrow down\n\t        switch(this.units.toLowerCase()){\n\t\n\t            case \"em\":\n\t            case \"rem\":\n\t            case \"ex\":\n\t            case \"px\":\n\t            case \"cm\":\n\t            case \"mm\":\n\t            case \"in\":\n\t            case \"pt\":\n\t            case \"pc\":\n\t            case \"ch\":\n\t            case \"vh\":\n\t            case \"vw\":\n\t            case \"vmax\":\n\t            case \"vmin\":\n\t                this.type = \"length\";\n\t                break;\n\t\n\t            case \"deg\":\n\t            case \"rad\":\n\t            case \"grad\":\n\t                this.type = \"angle\";\n\t                break;\n\t\n\t            case \"ms\":\n\t            case \"s\":\n\t                this.type = \"time\";\n\t                break;\n\t\n\t            case \"hz\":\n\t            case \"khz\":\n\t                this.type = \"frequency\";\n\t                break;\n\t\n\t            case \"dpi\":\n\t            case \"dpcm\":\n\t                this.type = \"resolution\";\n\t                break;\n\t\n\t            //default\n\t\n\t        }\n\t\n\t    } else if (/^([+\\-]?[\\d\\.]+)%$/i.test(text)){  //percentage\n\t        this.type = \"percentage\";\n\t        this.value = +RegExp.$1;\n\t    } else if (/^([+\\-]?\\d+)$/i.test(text)){  //integer\n\t        this.type = \"integer\";\n\t        this.value = +RegExp.$1;\n\t    } else if (/^([+\\-]?[\\d\\.]+)$/i.test(text)){  //number\n\t        this.type = \"number\";\n\t        this.value = +RegExp.$1;\n\t\n\t    } else if (/^#([a-f0-9]{3,6})/i.test(text)){  //hexcolor\n\t        this.type = \"color\";\n\t        temp = RegExp.$1;\n\t        if (temp.length == 3){\n\t            this.red    = parseInt(temp.charAt(0)+temp.charAt(0),16);\n\t            this.green  = parseInt(temp.charAt(1)+temp.charAt(1),16);\n\t            this.blue   = parseInt(temp.charAt(2)+temp.charAt(2),16);\n\t        } else {\n\t            this.red    = parseInt(temp.substring(0,2),16);\n\t            this.green  = parseInt(temp.substring(2,4),16);\n\t            this.blue   = parseInt(temp.substring(4,6),16);\n\t        }\n\t    } else if (/^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i.test(text)){ //rgb() color with absolute numbers\n\t        this.type   = \"color\";\n\t        this.red    = +RegExp.$1;\n\t        this.green  = +RegExp.$2;\n\t        this.blue   = +RegExp.$3;\n\t    } else if (/^rgb\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)/i.test(text)){ //rgb() color with percentages\n\t        this.type   = \"color\";\n\t        this.red    = +RegExp.$1 * 255 / 100;\n\t        this.green  = +RegExp.$2 * 255 / 100;\n\t        this.blue   = +RegExp.$3 * 255 / 100;\n\t    } else if (/^rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)){ //rgba() color with absolute numbers\n\t        this.type   = \"color\";\n\t        this.red    = +RegExp.$1;\n\t        this.green  = +RegExp.$2;\n\t        this.blue   = +RegExp.$3;\n\t        this.alpha  = +RegExp.$4;\n\t    } else if (/^rgba\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)){ //rgba() color with percentages\n\t        this.type   = \"color\";\n\t        this.red    = +RegExp.$1 * 255 / 100;\n\t        this.green  = +RegExp.$2 * 255 / 100;\n\t        this.blue   = +RegExp.$3 * 255 / 100;\n\t        this.alpha  = +RegExp.$4;\n\t    } else if (/^hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)/i.test(text)){ //hsl()\n\t        this.type   = \"color\";\n\t        this.hue    = +RegExp.$1;\n\t        this.saturation = +RegExp.$2 / 100;\n\t        this.lightness  = +RegExp.$3 / 100;\n\t    } else if (/^hsla\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)){ //hsla() color with percentages\n\t        this.type   = \"color\";\n\t        this.hue    = +RegExp.$1;\n\t        this.saturation = +RegExp.$2 / 100;\n\t        this.lightness  = +RegExp.$3 / 100;\n\t        this.alpha  = +RegExp.$4;\n\t    } else if (/^url\\([\"']?([^\\)\"']+)[\"']?\\)/i.test(text)){ //URI\n\t        this.type   = \"uri\";\n\t        this.uri    = RegExp.$1;\n\t    } else if (/^([^\\(]+)\\(/i.test(text)){\n\t        this.type   = \"function\";\n\t        this.name   = RegExp.$1;\n\t        this.value  = text;\n\t    } else if (/^[\"'][^\"']*[\"']/.test(text)){    //string\n\t        this.type   = \"string\";\n\t        this.value  = eval(text);\n\t    } else if (Colors[text.toLowerCase()]){  //named color\n\t        this.type   = \"color\";\n\t        temp        = Colors[text.toLowerCase()].substring(1);\n\t        this.red    = parseInt(temp.substring(0,2),16);\n\t        this.green  = parseInt(temp.substring(2,4),16);\n\t        this.blue   = parseInt(temp.substring(4,6),16);\n\t    } else if (/^[\\,\\/]$/.test(text)){\n\t        this.type   = \"operator\";\n\t        this.value  = text;\n\t    } else if (/^[a-z\\-_\\u0080-\\uFFFF][a-z0-9\\-_\\u0080-\\uFFFF]*$/i.test(text)){\n\t        this.type   = \"identifier\";\n\t        this.value  = text;\n\t    }\n\t\n\t}\n\t\n\tPropertyValuePart.prototype = new SyntaxUnit();\n\tPropertyValuePart.prototype.constructor = PropertyValuePart;\n\t\n\t/**\n\t * Create a new syntax unit based solely on the given token.\n\t * Convenience method for creating a new syntax unit when\n\t * it represents a single token instead of multiple.\n\t * @param {Object} token The token object to represent.\n\t * @return {parserlib.css.PropertyValuePart} The object representing the token.\n\t * @static\n\t * @method fromToken\n\t */\n\tPropertyValuePart.fromToken = function(token){\n\t    return new PropertyValuePart(token.value, token.startLine, token.startCol);\n\t};\n\tvar Pseudos = {\n\t    \":first-letter\": 1,\n\t    \":first-line\":   1,\n\t    \":before\":       1,\n\t    \":after\":        1\n\t};\n\t\n\tPseudos.ELEMENT = 1;\n\tPseudos.CLASS = 2;\n\t\n\tPseudos.isElement = function(pseudo){\n\t    return pseudo.indexOf(\"::\") === 0 || Pseudos[pseudo.toLowerCase()] == Pseudos.ELEMENT;\n\t};\n\t/*global SyntaxUnit, Parser, Specificity*/\n\t/**\n\t * Represents an entire single selector, including all parts but not\n\t * including multiple selectors (those separated by commas).\n\t * @namespace parserlib.css\n\t * @class Selector\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {Array} parts Array of selectors parts making up this selector.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction Selector(parts, line, col){\n\t\n\t    SyntaxUnit.call(this, parts.join(\" \"), line, col, Parser.SELECTOR_TYPE);\n\t\n\t    /**\n\t     * The parts that make up the selector.\n\t     * @type Array\n\t     * @property parts\n\t     */\n\t    this.parts = parts;\n\t\n\t    /**\n\t     * The specificity of the selector.\n\t     * @type parserlib.css.Specificity\n\t     * @property specificity\n\t     */\n\t    this.specificity = Specificity.calculate(this);\n\t\n\t}\n\t\n\tSelector.prototype = new SyntaxUnit();\n\tSelector.prototype.constructor = Selector;\n\t\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents a single part of a selector string, meaning a single set of\n\t * element name and modifiers. This does not include combinators such as\n\t * spaces, +, >, etc.\n\t * @namespace parserlib.css\n\t * @class SelectorPart\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {String} elementName The element name in the selector or null\n\t *      if there is no element name.\n\t * @param {Array} modifiers Array of individual modifiers for the element.\n\t *      May be empty if there are none.\n\t * @param {String} text The text representation of the unit.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction SelectorPart(elementName, modifiers, text, line, col){\n\t\n\t    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_PART_TYPE);\n\t\n\t    /**\n\t     * The tag name of the element to which this part\n\t     * of the selector affects.\n\t     * @type String\n\t     * @property elementName\n\t     */\n\t    this.elementName = elementName;\n\t\n\t    /**\n\t     * The parts that come after the element name, such as class names, IDs,\n\t     * pseudo classes/elements, etc.\n\t     * @type Array\n\t     * @property modifiers\n\t     */\n\t    this.modifiers = modifiers;\n\t\n\t}\n\t\n\tSelectorPart.prototype = new SyntaxUnit();\n\tSelectorPart.prototype.constructor = SelectorPart;\n\t\n\t/*global SyntaxUnit, Parser*/\n\t/**\n\t * Represents a selector modifier string, meaning a class name, element name,\n\t * element ID, pseudo rule, etc.\n\t * @namespace parserlib.css\n\t * @class SelectorSubPart\n\t * @extends parserlib.util.SyntaxUnit\n\t * @constructor\n\t * @param {String} text The text representation of the unit.\n\t * @param {String} type The type of selector modifier.\n\t * @param {int} line The line of text on which the unit resides.\n\t * @param {int} col The column of text on which the unit resides.\n\t */\n\tfunction SelectorSubPart(text, type, line, col){\n\t\n\t    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_SUB_PART_TYPE);\n\t\n\t    /**\n\t     * The type of modifier.\n\t     * @type String\n\t     * @property type\n\t     */\n\t    this.type = type;\n\t\n\t    /**\n\t     * Some subparts have arguments, this represents them.\n\t     * @type Array\n\t     * @property args\n\t     */\n\t    this.args = [];\n\t\n\t}\n\t\n\tSelectorSubPart.prototype = new SyntaxUnit();\n\tSelectorSubPart.prototype.constructor = SelectorSubPart;\n\t\n\t/*global Pseudos, SelectorPart*/\n\t/**\n\t * Represents a selector's specificity.\n\t * @namespace parserlib.css\n\t * @class Specificity\n\t * @constructor\n\t * @param {int} a Should be 1 for inline styles, zero for stylesheet styles\n\t * @param {int} b Number of ID selectors\n\t * @param {int} c Number of classes and pseudo classes\n\t * @param {int} d Number of element names and pseudo elements\n\t */\n\tfunction Specificity(a, b, c, d){\n\t    this.a = a;\n\t    this.b = b;\n\t    this.c = c;\n\t    this.d = d;\n\t}\n\t\n\tSpecificity.prototype = {\n\t    constructor: Specificity,\n\t\n\t    /**\n\t     * Compare this specificity to another.\n\t     * @param {Specificity} other The other specificity to compare to.\n\t     * @return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.\n\t     * @method compare\n\t     */\n\t    compare: function(other){\n\t        var comps = [\"a\", \"b\", \"c\", \"d\"],\n\t            i, len;\n\t\n\t        for (i=0, len=comps.length; i < len; i++){\n\t            if (this[comps[i]] < other[comps[i]]){\n\t                return -1;\n\t            } else if (this[comps[i]] > other[comps[i]]){\n\t                return 1;\n\t            }\n\t        }\n\t\n\t        return 0;\n\t    },\n\t\n\t    /**\n\t     * Creates a numeric value for the specificity.\n\t     * @return {int} The numeric value for the specificity.\n\t     * @method valueOf\n\t     */\n\t    valueOf: function(){\n\t        return (this.a * 1000) + (this.b * 100) + (this.c * 10) + this.d;\n\t    },\n\t\n\t    /**\n\t     * Returns a string representation for specificity.\n\t     * @return {String} The string representation of specificity.\n\t     * @method toString\n\t     */\n\t    toString: function(){\n\t        return this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d;\n\t    }\n\t\n\t};\n\t\n\t/**\n\t * Calculates the specificity of the given selector.\n\t * @param {parserlib.css.Selector} The selector to calculate specificity for.\n\t * @return {parserlib.css.Specificity} The specificity of the selector.\n\t * @static\n\t * @method calculate\n\t */\n\tSpecificity.calculate = function(selector){\n\t\n\t    var i, len,\n\t        part,\n\t        b=0, c=0, d=0;\n\t\n\t    function updateValues(part){\n\t\n\t        var i, j, len, num,\n\t            elementName = part.elementName ? part.elementName.text : \"\",\n\t            modifier;\n\t\n\t        if (elementName && elementName.charAt(elementName.length-1) != \"*\") {\n\t            d++;\n\t        }\n\t\n\t        for (i=0, len=part.modifiers.length; i < len; i++){\n\t            modifier = part.modifiers[i];\n\t            switch(modifier.type){\n\t                case \"class\":\n\t                case \"attribute\":\n\t                    c++;\n\t                    break;\n\t\n\t                case \"id\":\n\t                    b++;\n\t                    break;\n\t\n\t                case \"pseudo\":\n\t                    if (Pseudos.isElement(modifier.text)){\n\t                        d++;\n\t                    } else {\n\t                        c++;\n\t                    }\n\t                    break;\n\t\n\t                case \"not\":\n\t                    for (j=0, num=modifier.args.length; j < num; j++){\n\t                        updateValues(modifier.args[j]);\n\t                    }\n\t            }\n\t         }\n\t    }\n\t\n\t    for (i=0, len=selector.parts.length; i < len; i++){\n\t        part = selector.parts[i];\n\t\n\t        if (part instanceof SelectorPart){\n\t            updateValues(part);\n\t        }\n\t    }\n\t\n\t    return new Specificity(0, b, c, d);\n\t};\n\t/*global Tokens, TokenStreamBase*/\n\t\n\tvar h = /^[0-9a-fA-F]$/,\n\t    nonascii = /^[\\u0080-\\uFFFF]$/,\n\t    nl = /\\n|\\r\\n|\\r|\\f/;\n\t\n\t//-----------------------------------------------------------------------------\n\t// Helper functions\n\t//-----------------------------------------------------------------------------\n\t\n\t\n\tfunction isHexDigit(c){\n\t    return c !== null && h.test(c);\n\t}\n\t\n\tfunction isDigit(c){\n\t    return c !== null && /\\d/.test(c);\n\t}\n\t\n\tfunction isWhitespace(c){\n\t    return c !== null && /\\s/.test(c);\n\t}\n\t\n\tfunction isNewLine(c){\n\t    return c !== null && nl.test(c);\n\t}\n\t\n\tfunction isNameStart(c){\n\t    return c !== null && (/[a-z_\\u0080-\\uFFFF\\\\]/i.test(c));\n\t}\n\t\n\tfunction isNameChar(c){\n\t    return c !== null && (isNameStart(c) || /[0-9\\-\\\\]/.test(c));\n\t}\n\t\n\tfunction isIdentStart(c){\n\t    return c !== null && (isNameStart(c) || /\\-\\\\/.test(c));\n\t}\n\t\n\tfunction mix(receiver, supplier){\n\t\tfor (var prop in supplier){\n\t\t\tif (supplier.hasOwnProperty(prop)){\n\t\t\t\treceiver[prop] = supplier[prop];\n\t\t\t}\n\t\t}\n\t\treturn receiver;\n\t}\n\t\n\t//-----------------------------------------------------------------------------\n\t// CSS Token Stream\n\t//-----------------------------------------------------------------------------\n\t\n\t\n\t/**\n\t * A token stream that produces CSS tokens.\n\t * @param {String|Reader} input The source of text to tokenize.\n\t * @constructor\n\t * @class TokenStream\n\t * @namespace parserlib.css\n\t */\n\tfunction TokenStream(input){\n\t\tTokenStreamBase.call(this, input, Tokens);\n\t}\n\t\n\tTokenStream.prototype = mix(new TokenStreamBase(), {\n\t\n\t    /**\n\t     * Overrides the TokenStreamBase method of the same name\n\t     * to produce CSS tokens.\n\t     * @param {variant} channel The name of the channel to use\n\t     *      for the next token.\n\t     * @return {Object} A token object representing the next token.\n\t     * @method _getToken\n\t     * @private\n\t     */\n\t    _getToken: function(channel){\n\t\n\t        var c,\n\t            reader = this._reader,\n\t            token   = null,\n\t            startLine   = reader.getLine(),\n\t            startCol    = reader.getCol();\n\t\n\t        c = reader.read();\n\t\n\t\n\t        while(c){\n\t            switch(c){\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - COMMENT\n\t                 * - SLASH\n\t                 * - CHAR\n\t                 */\n\t                case \"/\":\n\t\n\t                    if(reader.peek() == \"*\"){\n\t                        token = this.commentToken(c, startLine, startCol);\n\t                    } else {\n\t                        token = this.charToken(c, startLine, startCol);\n\t                    }\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - DASHMATCH\n\t                 * - INCLUDES\n\t                 * - PREFIXMATCH\n\t                 * - SUFFIXMATCH\n\t                 * - SUBSTRINGMATCH\n\t                 * - CHAR\n\t                 */\n\t                case \"|\":\n\t                case \"~\":\n\t                case \"^\":\n\t                case \"$\":\n\t                case \"*\":\n\t                    if(reader.peek() == \"=\"){\n\t                        token = this.comparisonToken(c, startLine, startCol);\n\t                    } else {\n\t                        token = this.charToken(c, startLine, startCol);\n\t                    }\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - STRING\n\t                 * - INVALID\n\t                 */\n\t                case \"\\\"\":\n\t                case \"'\":\n\t                    token = this.stringToken(c, startLine, startCol);\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - HASH\n\t                 * - CHAR\n\t                 */\n\t                case \"#\":\n\t                    if (isNameChar(reader.peek())){\n\t                        token = this.hashToken(c, startLine, startCol);\n\t                    } else {\n\t                        token = this.charToken(c, startLine, startCol);\n\t                    }\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - DOT\n\t                 * - NUMBER\n\t                 * - DIMENSION\n\t                 * - PERCENTAGE\n\t                 */\n\t                case \".\":\n\t                    if (isDigit(reader.peek())){\n\t                        token = this.numberToken(c, startLine, startCol);\n\t                    } else {\n\t                        token = this.charToken(c, startLine, startCol);\n\t                    }\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - CDC\n\t                 * - MINUS\n\t                 * - NUMBER\n\t                 * - DIMENSION\n\t                 * - PERCENTAGE\n\t                 */\n\t                case \"-\":\n\t                    if (reader.peek() == \"-\"){  //could be closing HTML-style comment\n\t                        token = this.htmlCommentEndToken(c, startLine, startCol);\n\t                    } else if (isNameStart(reader.peek())){\n\t                        token = this.identOrFunctionToken(c, startLine, startCol);\n\t                    } else {\n\t                        token = this.charToken(c, startLine, startCol);\n\t                    }\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - IMPORTANT_SYM\n\t                 * - CHAR\n\t                 */\n\t                case \"!\":\n\t                    token = this.importantToken(c, startLine, startCol);\n\t                    break;\n\t\n\t                /*\n\t                 * Any at-keyword or CHAR\n\t                 */\n\t                case \"@\":\n\t                    token = this.atRuleToken(c, startLine, startCol);\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - NOT\n\t                 * - CHAR\n\t                 */\n\t                case \":\":\n\t                    token = this.notToken(c, startLine, startCol);\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - CDO\n\t                 * - CHAR\n\t                 */\n\t                case \"<\":\n\t                    token = this.htmlCommentStartToken(c, startLine, startCol);\n\t                    break;\n\t\n\t                /*\n\t                 * Potential tokens:\n\t                 * - UNICODE_RANGE\n\t                 * - URL\n\t                 * - CHAR\n\t                 */\n\t                case \"U\":\n\t                case \"u\":\n\t                    if (reader.peek() == \"+\"){\n\t                        token = this.unicodeRangeToken(c, startLine, startCol);\n\t                        break;\n\t                    }\n\t                    /* falls through */\n\t                default:\n\t\n\t                    /*\n\t                     * Potential tokens:\n\t                     * - NUMBER\n\t                     * - DIMENSION\n\t                     * - LENGTH\n\t                     * - FREQ\n\t                     * - TIME\n\t                     * - EMS\n\t                     * - EXS\n\t                     * - ANGLE\n\t                     */\n\t                    if (isDigit(c)){\n\t                        token = this.numberToken(c, startLine, startCol);\n\t                    } else\n\t\n\t                    /*\n\t                     * Potential tokens:\n\t                     * - S\n\t                     */\n\t                    if (isWhitespace(c)){\n\t                        token = this.whitespaceToken(c, startLine, startCol);\n\t                    } else\n\t\n\t                    /*\n\t                     * Potential tokens:\n\t                     * - IDENT\n\t                     */\n\t                    if (isIdentStart(c)){\n\t                        token = this.identOrFunctionToken(c, startLine, startCol);\n\t                    } else\n\t\n\t                    /*\n\t                     * Potential tokens:\n\t                     * - CHAR\n\t                     * - PLUS\n\t                     */\n\t                    {\n\t                        token = this.charToken(c, startLine, startCol);\n\t                    }\n\t\n\t\n\t\n\t\n\t\n\t\n\t            }\n\t\n\t            //make sure this token is wanted\n\t            //TODO: check channel\n\t            break;\n\t        }\n\t\n\t        if (!token && c === null){\n\t            token = this.createToken(Tokens.EOF,null,startLine,startCol);\n\t        }\n\t\n\t        return token;\n\t    },\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Methods to create tokens\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Produces a token based on available data and the current\n\t     * reader position information. This method is called by other\n\t     * private methods to create tokens and is never called directly.\n\t     * @param {int} tt The token type.\n\t     * @param {String} value The text value of the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @param {Object} options (Optional) Specifies a channel property\n\t     *      to indicate that a different channel should be scanned\n\t     *      and/or a hide property indicating that the token should\n\t     *      be hidden.\n\t     * @return {Object} A token object.\n\t     * @method createToken\n\t     */\n\t    createToken: function(tt, value, startLine, startCol, options){\n\t        var reader = this._reader;\n\t        options = options || {};\n\t\n\t        return {\n\t            value:      value,\n\t            type:       tt,\n\t            channel:    options.channel,\n\t            endChar:    options.endChar,\n\t            hide:       options.hide || false,\n\t            startLine:  startLine,\n\t            startCol:   startCol,\n\t            endLine:    reader.getLine(),\n\t            endCol:     reader.getCol()\n\t        };\n\t    },\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Methods to create specific tokens\n\t    //-------------------------------------------------------------------------\n\t\n\t    /**\n\t     * Produces a token for any at-rule. If the at-rule is unknown, then\n\t     * the token is for a single \"@\" character.\n\t     * @param {String} first The first character for the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method atRuleToken\n\t     */\n\t    atRuleToken: function(first, startLine, startCol){\n\t        var rule    = first,\n\t            reader  = this._reader,\n\t            tt      = Tokens.CHAR,\n\t            valid   = false,\n\t            ident,\n\t            c;\n\t\n\t        /*\n\t         * First, mark where we are. There are only four @ rules,\n\t         * so anything else is really just an invalid token.\n\t         * Basically, if this doesn't match one of the known @\n\t         * rules, just return '@' as an unknown token and allow\n\t         * parsing to continue after that point.\n\t         */\n\t        reader.mark();\n\t\n\t        //try to find the at-keyword\n\t        ident = this.readName();\n\t        rule = first + ident;\n\t        tt = Tokens.type(rule.toLowerCase());\n\t\n\t        //if it's not valid, use the first character only and reset the reader\n\t        if (tt == Tokens.CHAR || tt == Tokens.UNKNOWN){\n\t            if (rule.length > 1){\n\t                tt = Tokens.UNKNOWN_SYM;\n\t            } else {\n\t                tt = Tokens.CHAR;\n\t                rule = first;\n\t                reader.reset();\n\t            }\n\t        }\n\t\n\t        return this.createToken(tt, rule, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces a character token based on the given character\n\t     * and location in the stream. If there's a special (non-standard)\n\t     * token name, this is used; otherwise CHAR is used.\n\t     * @param {String} c The character for the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method charToken\n\t     */\n\t    charToken: function(c, startLine, startCol){\n\t        var tt = Tokens.type(c);\n\t        var opts = {};\n\t\n\t        if (tt == -1){\n\t            tt = Tokens.CHAR;\n\t        } else {\n\t            opts.endChar = Tokens[tt].endChar;\n\t        }\n\t\n\t        return this.createToken(tt, c, startLine, startCol, opts);\n\t    },\n\t\n\t    /**\n\t     * Produces a character token based on the given character\n\t     * and location in the stream. If there's a special (non-standard)\n\t     * token name, this is used; otherwise CHAR is used.\n\t     * @param {String} first The first character for the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method commentToken\n\t     */\n\t    commentToken: function(first, startLine, startCol){\n\t        var reader  = this._reader,\n\t            comment = this.readComment(first);\n\t\n\t        return this.createToken(Tokens.COMMENT, comment, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces a comparison token based on the given character\n\t     * and location in the stream. The next character must be\n\t     * read and is already known to be an equals sign.\n\t     * @param {String} c The character for the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method comparisonToken\n\t     */\n\t    comparisonToken: function(c, startLine, startCol){\n\t        var reader  = this._reader,\n\t            comparison  = c + reader.read(),\n\t            tt      = Tokens.type(comparison) || Tokens.CHAR;\n\t\n\t        return this.createToken(tt, comparison, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces a hash token based on the specified information. The\n\t     * first character provided is the pound sign (#) and then this\n\t     * method reads a name afterward.\n\t     * @param {String} first The first character (#) in the hash name.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method hashToken\n\t     */\n\t    hashToken: function(first, startLine, startCol){\n\t        var reader  = this._reader,\n\t            name    = this.readName(first);\n\t\n\t        return this.createToken(Tokens.HASH, name, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces a CDO or CHAR token based on the specified information. The\n\t     * first character is provided and the rest is read by the function to determine\n\t     * the correct token to create.\n\t     * @param {String} first The first character in the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method htmlCommentStartToken\n\t     */\n\t    htmlCommentStartToken: function(first, startLine, startCol){\n\t        var reader      = this._reader,\n\t            text        = first;\n\t\n\t        reader.mark();\n\t        text += reader.readCount(3);\n\t\n\t        if (text == \"<!--\"){\n\t            return this.createToken(Tokens.CDO, text, startLine, startCol);\n\t        } else {\n\t            reader.reset();\n\t            return this.charToken(first, startLine, startCol);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Produces a CDC or CHAR token based on the specified information. The\n\t     * first character is provided and the rest is read by the function to determine\n\t     * the correct token to create.\n\t     * @param {String} first The first character in the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method htmlCommentEndToken\n\t     */\n\t    htmlCommentEndToken: function(first, startLine, startCol){\n\t        var reader      = this._reader,\n\t            text        = first;\n\t\n\t        reader.mark();\n\t        text += reader.readCount(2);\n\t\n\t        if (text == \"-->\"){\n\t            return this.createToken(Tokens.CDC, text, startLine, startCol);\n\t        } else {\n\t            reader.reset();\n\t            return this.charToken(first, startLine, startCol);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Produces an IDENT or FUNCTION token based on the specified information. The\n\t     * first character is provided and the rest is read by the function to determine\n\t     * the correct token to create.\n\t     * @param {String} first The first character in the identifier.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method identOrFunctionToken\n\t     */\n\t    identOrFunctionToken: function(first, startLine, startCol){\n\t        var reader  = this._reader,\n\t            ident   = this.readName(first),\n\t            tt      = Tokens.IDENT;\n\t\n\t        //if there's a left paren immediately after, it's a URI or function\n\t        if (reader.peek() == \"(\"){\n\t            ident += reader.read();\n\t            if (ident.toLowerCase() == \"url(\"){\n\t                tt = Tokens.URI;\n\t                ident = this.readURI(ident);\n\t\n\t                //didn't find a valid URL or there's no closing paren\n\t                if (ident.toLowerCase() == \"url(\"){\n\t                    tt = Tokens.FUNCTION;\n\t                }\n\t            } else {\n\t                tt = Tokens.FUNCTION;\n\t            }\n\t        } else if (reader.peek() == \":\"){  //might be an IE function\n\t\n\t            //IE-specific functions always being with progid:\n\t            if (ident.toLowerCase() == \"progid\"){\n\t                ident += reader.readTo(\"(\");\n\t                tt = Tokens.IE_FUNCTION;\n\t            }\n\t        }\n\t\n\t        return this.createToken(tt, ident, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces an IMPORTANT_SYM or CHAR token based on the specified information. The\n\t     * first character is provided and the rest is read by the function to determine\n\t     * the correct token to create.\n\t     * @param {String} first The first character in the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method importantToken\n\t     */\n\t    importantToken: function(first, startLine, startCol){\n\t        var reader      = this._reader,\n\t            important   = first,\n\t            tt          = Tokens.CHAR,\n\t            temp,\n\t            c;\n\t\n\t        reader.mark();\n\t        c = reader.read();\n\t\n\t        while(c){\n\t\n\t            //there can be a comment in here\n\t            if (c == \"/\"){\n\t\n\t                //if the next character isn't a star, then this isn't a valid !important token\n\t                if (reader.peek() != \"*\"){\n\t                    break;\n\t                } else {\n\t                    temp = this.readComment(c);\n\t                    if (temp === \"\"){    //broken!\n\t                        break;\n\t                    }\n\t                }\n\t            } else if (isWhitespace(c)){\n\t                important += c + this.readWhitespace();\n\t            } else if (/i/i.test(c)){\n\t                temp = reader.readCount(8);\n\t                if (/mportant/i.test(temp)){\n\t                    important += c + temp;\n\t                    tt = Tokens.IMPORTANT_SYM;\n\t\n\t                }\n\t                break;  //we're done\n\t            } else {\n\t                break;\n\t            }\n\t\n\t            c = reader.read();\n\t        }\n\t\n\t        if (tt == Tokens.CHAR){\n\t            reader.reset();\n\t            return this.charToken(first, startLine, startCol);\n\t        } else {\n\t            return this.createToken(tt, important, startLine, startCol);\n\t        }\n\t\n\t\n\t    },\n\t\n\t    /**\n\t     * Produces a NOT or CHAR token based on the specified information. The\n\t     * first character is provided and the rest is read by the function to determine\n\t     * the correct token to create.\n\t     * @param {String} first The first character in the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method notToken\n\t     */\n\t    notToken: function(first, startLine, startCol){\n\t        var reader      = this._reader,\n\t            text        = first;\n\t\n\t        reader.mark();\n\t        text += reader.readCount(4);\n\t\n\t        if (text.toLowerCase() == \":not(\"){\n\t            return this.createToken(Tokens.NOT, text, startLine, startCol);\n\t        } else {\n\t            reader.reset();\n\t            return this.charToken(first, startLine, startCol);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Produces a number token based on the given character\n\t     * and location in the stream. This may return a token of\n\t     * NUMBER, EMS, EXS, LENGTH, ANGLE, TIME, FREQ, DIMENSION,\n\t     * or PERCENTAGE.\n\t     * @param {String} first The first character for the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method numberToken\n\t     */\n\t    numberToken: function(first, startLine, startCol){\n\t        var reader  = this._reader,\n\t            value   = this.readNumber(first),\n\t            ident,\n\t            tt      = Tokens.NUMBER,\n\t            c       = reader.peek();\n\t\n\t        if (isIdentStart(c)){\n\t            ident = this.readName(reader.read());\n\t            value += ident;\n\t\n\t            if (/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(ident)){\n\t                tt = Tokens.LENGTH;\n\t            } else if (/^deg|^rad$|^grad$/i.test(ident)){\n\t                tt = Tokens.ANGLE;\n\t            } else if (/^ms$|^s$/i.test(ident)){\n\t                tt = Tokens.TIME;\n\t            } else if (/^hz$|^khz$/i.test(ident)){\n\t                tt = Tokens.FREQ;\n\t            } else if (/^dpi$|^dpcm$/i.test(ident)){\n\t                tt = Tokens.RESOLUTION;\n\t            } else {\n\t                tt = Tokens.DIMENSION;\n\t            }\n\t\n\t        } else if (c == \"%\"){\n\t            value += reader.read();\n\t            tt = Tokens.PERCENTAGE;\n\t        }\n\t\n\t        return this.createToken(tt, value, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces a string token based on the given character\n\t     * and location in the stream. Since strings may be indicated\n\t     * by single or double quotes, a failure to match starting\n\t     * and ending quotes results in an INVALID token being generated.\n\t     * The first character in the string is passed in and then\n\t     * the rest are read up to and including the final quotation mark.\n\t     * @param {String} first The first character in the string.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method stringToken\n\t     */\n\t    stringToken: function(first, startLine, startCol){\n\t        var delim   = first,\n\t            string  = first,\n\t            reader  = this._reader,\n\t            prev    = first,\n\t            tt      = Tokens.STRING,\n\t            c       = reader.read();\n\t\n\t        while(c){\n\t            string += c;\n\t\n\t            //if the delimiter is found with an escapement, we're done.\n\t            if (c == delim && prev != \"\\\\\"){\n\t                break;\n\t            }\n\t\n\t            //if there's a newline without an escapement, it's an invalid string\n\t            if (isNewLine(reader.peek()) && c != \"\\\\\"){\n\t                tt = Tokens.INVALID;\n\t                break;\n\t            }\n\t\n\t            //save previous and get next\n\t            prev = c;\n\t            c = reader.read();\n\t        }\n\t\n\t        //if c is null, that means we're out of input and the string was never closed\n\t        if (c === null){\n\t            tt = Tokens.INVALID;\n\t        }\n\t\n\t        return this.createToken(tt, string, startLine, startCol);\n\t    },\n\t\n\t    unicodeRangeToken: function(first, startLine, startCol){\n\t        var reader  = this._reader,\n\t            value   = first,\n\t            temp,\n\t            tt      = Tokens.CHAR;\n\t\n\t        //then it should be a unicode range\n\t        if (reader.peek() == \"+\"){\n\t            reader.mark();\n\t            value += reader.read();\n\t            value += this.readUnicodeRangePart(true);\n\t\n\t            //ensure there's an actual unicode range here\n\t            if (value.length == 2){\n\t                reader.reset();\n\t            } else {\n\t\n\t                tt = Tokens.UNICODE_RANGE;\n\t\n\t                //if there's a ? in the first part, there can't be a second part\n\t                if (value.indexOf(\"?\") == -1){\n\t\n\t                    if (reader.peek() == \"-\"){\n\t                        reader.mark();\n\t                        temp = reader.read();\n\t                        temp += this.readUnicodeRangePart(false);\n\t\n\t                        //if there's not another value, back up and just take the first\n\t                        if (temp.length == 1){\n\t                            reader.reset();\n\t                        } else {\n\t                            value += temp;\n\t                        }\n\t                    }\n\t\n\t                }\n\t            }\n\t        }\n\t\n\t        return this.createToken(tt, value, startLine, startCol);\n\t    },\n\t\n\t    /**\n\t     * Produces a S token based on the specified information. Since whitespace\n\t     * may have multiple characters, this consumes all whitespace characters\n\t     * into a single token.\n\t     * @param {String} first The first character in the token.\n\t     * @param {int} startLine The beginning line for the character.\n\t     * @param {int} startCol The beginning column for the character.\n\t     * @return {Object} A token object.\n\t     * @method whitespaceToken\n\t     */\n\t    whitespaceToken: function(first, startLine, startCol){\n\t        var reader  = this._reader,\n\t            value   = first + this.readWhitespace();\n\t        return this.createToken(Tokens.S, value, startLine, startCol);\n\t    },\n\t\n\t\n\t\n\t\n\t    //-------------------------------------------------------------------------\n\t    // Methods to read values from the string stream\n\t    //-------------------------------------------------------------------------\n\t\n\t    readUnicodeRangePart: function(allowQuestionMark){\n\t        var reader  = this._reader,\n\t            part = \"\",\n\t            c       = reader.peek();\n\t\n\t        //first read hex digits\n\t        while(isHexDigit(c) && part.length < 6){\n\t            reader.read();\n\t            part += c;\n\t            c = reader.peek();\n\t        }\n\t\n\t        //then read question marks if allowed\n\t        if (allowQuestionMark){\n\t            while(c == \"?\" && part.length < 6){\n\t                reader.read();\n\t                part += c;\n\t                c = reader.peek();\n\t            }\n\t        }\n\t\n\t        //there can't be any other characters after this point\n\t\n\t        return part;\n\t    },\n\t\n\t    readWhitespace: function(){\n\t        var reader  = this._reader,\n\t            whitespace = \"\",\n\t            c       = reader.peek();\n\t\n\t        while(isWhitespace(c)){\n\t            reader.read();\n\t            whitespace += c;\n\t            c = reader.peek();\n\t        }\n\t\n\t        return whitespace;\n\t    },\n\t    readNumber: function(first){\n\t        var reader  = this._reader,\n\t            number  = first,\n\t            hasDot  = (first == \".\"),\n\t            c       = reader.peek();\n\t\n\t\n\t        while(c){\n\t            if (isDigit(c)){\n\t                number += reader.read();\n\t            } else if (c == \".\"){\n\t                if (hasDot){\n\t                    break;\n\t                } else {\n\t                    hasDot = true;\n\t                    number += reader.read();\n\t                }\n\t            } else {\n\t                break;\n\t            }\n\t\n\t            c = reader.peek();\n\t        }\n\t\n\t        return number;\n\t    },\n\t    readString: function(){\n\t        var reader  = this._reader,\n\t            delim   = reader.read(),\n\t            string  = delim,\n\t            prev    = delim,\n\t            c       = reader.peek();\n\t\n\t        while(c){\n\t            c = reader.read();\n\t            string += c;\n\t\n\t            //if the delimiter is found with an escapement, we're done.\n\t            if (c == delim && prev != \"\\\\\"){\n\t                break;\n\t            }\n\t\n\t            //if there's a newline without an escapement, it's an invalid string\n\t            if (isNewLine(reader.peek()) && c != \"\\\\\"){\n\t                string = \"\";\n\t                break;\n\t            }\n\t\n\t            //save previous and get next\n\t            prev = c;\n\t            c = reader.peek();\n\t        }\n\t\n\t        //if c is null, that means we're out of input and the string was never closed\n\t        if (c === null){\n\t            string = \"\";\n\t        }\n\t\n\t        return string;\n\t    },\n\t    readURI: function(first){\n\t        var reader  = this._reader,\n\t            uri     = first,\n\t            inner   = \"\",\n\t            c       = reader.peek();\n\t\n\t        reader.mark();\n\t\n\t        //skip whitespace before\n\t        while(c && isWhitespace(c)){\n\t            reader.read();\n\t            c = reader.peek();\n\t        }\n\t\n\t        //it's a string\n\t        if (c == \"'\" || c == \"\\\"\"){\n\t            inner = this.readString();\n\t        } else {\n\t            inner = this.readURL();\n\t        }\n\t\n\t        c = reader.peek();\n\t\n\t        //skip whitespace after\n\t        while(c && isWhitespace(c)){\n\t            reader.read();\n\t            c = reader.peek();\n\t        }\n\t\n\t        //if there was no inner value or the next character isn't closing paren, it's not a URI\n\t        if (inner === \"\" || c != \")\"){\n\t            uri = first;\n\t            reader.reset();\n\t        } else {\n\t            uri += inner + reader.read();\n\t        }\n\t\n\t        return uri;\n\t    },\n\t    readURL: function(){\n\t        var reader  = this._reader,\n\t            url     = \"\",\n\t            c       = reader.peek();\n\t\n\t        //TODO: Check for escape and nonascii\n\t        while (/^[!#$%&\\\\*-~]$/.test(c)){\n\t            url += reader.read();\n\t            c = reader.peek();\n\t        }\n\t\n\t        return url;\n\t\n\t    },\n\t    readName: function(first){\n\t        var reader  = this._reader,\n\t            ident   = first || \"\",\n\t            c       = reader.peek();\n\t\n\t        while(true){\n\t            if (c == \"\\\\\"){\n\t                ident += this.readEscape(reader.read());\n\t                c = reader.peek();\n\t            } else if(c && isNameChar(c)){\n\t                ident += reader.read();\n\t                c = reader.peek();\n\t            } else {\n\t                break;\n\t            }\n\t        }\n\t\n\t        return ident;\n\t    },\n\t\n\t    readEscape: function(first){\n\t        var reader  = this._reader,\n\t            cssEscape = first || \"\",\n\t            i       = 0,\n\t            c       = reader.peek();\n\t\n\t        if (isHexDigit(c)){\n\t            do {\n\t                cssEscape += reader.read();\n\t                c = reader.peek();\n\t            } while(c && isHexDigit(c) && ++i < 6);\n\t        }\n\t\n\t        if (cssEscape.length == 3 && /\\s/.test(c) ||\n\t            cssEscape.length == 7 || cssEscape.length == 1){\n\t                reader.read();\n\t        } else {\n\t            c = \"\";\n\t        }\n\t\n\t        return cssEscape + c;\n\t    },\n\t\n\t    readComment: function(first){\n\t        var reader  = this._reader,\n\t            comment = first || \"\",\n\t            c       = reader.read();\n\t\n\t        if (c == \"*\"){\n\t            while(c){\n\t                comment += c;\n\t\n\t                //look for end of comment\n\t                if (comment.length > 2 && c == \"*\" && reader.peek() == \"/\"){\n\t                    comment += reader.read();\n\t                    break;\n\t                }\n\t\n\t                c = reader.read();\n\t            }\n\t\n\t            return comment;\n\t        } else {\n\t            return \"\";\n\t        }\n\t\n\t    }\n\t});\n\t\n\tvar Tokens  = [\n\t\n\t    /*\n\t     * The following token names are defined in CSS3 Grammar: http://www.w3.org/TR/css3-syntax/#lexical\n\t     */\n\t\n\t    //HTML-style comments\n\t    { name: \"CDO\"},\n\t    { name: \"CDC\"},\n\t\n\t    //ignorables\n\t    { name: \"S\", whitespace: true/*, channel: \"ws\"*/},\n\t    { name: \"COMMENT\", comment: true, hide: true, channel: \"comment\" },\n\t\n\t    //attribute equality\n\t    { name: \"INCLUDES\", text: \"~=\"},\n\t    { name: \"DASHMATCH\", text: \"|=\"},\n\t    { name: \"PREFIXMATCH\", text: \"^=\"},\n\t    { name: \"SUFFIXMATCH\", text: \"$=\"},\n\t    { name: \"SUBSTRINGMATCH\", text: \"*=\"},\n\t\n\t    //identifier types\n\t    { name: \"STRING\"},\n\t    { name: \"IDENT\"},\n\t    { name: \"HASH\"},\n\t\n\t    //at-keywords\n\t    { name: \"IMPORT_SYM\", text: \"@import\"},\n\t    { name: \"PAGE_SYM\", text: \"@page\"},\n\t    { name: \"MEDIA_SYM\", text: \"@media\"},\n\t    { name: \"FONT_FACE_SYM\", text: \"@font-face\"},\n\t    { name: \"CHARSET_SYM\", text: \"@charset\"},\n\t    { name: \"NAMESPACE_SYM\", text: \"@namespace\"},\n\t    { name: \"VIEWPORT_SYM\", text: [\"@viewport\", \"@-ms-viewport\"]},\n\t    { name: \"UNKNOWN_SYM\" },\n\t    //{ name: \"ATKEYWORD\"},\n\t\n\t    //CSS3 animations\n\t    { name: \"KEYFRAMES_SYM\", text: [ \"@keyframes\", \"@-webkit-keyframes\", \"@-moz-keyframes\", \"@-o-keyframes\" ] },\n\t\n\t    //important symbol\n\t    { name: \"IMPORTANT_SYM\"},\n\t\n\t    //measurements\n\t    { name: \"LENGTH\"},\n\t    { name: \"ANGLE\"},\n\t    { name: \"TIME\"},\n\t    { name: \"FREQ\"},\n\t    { name: \"DIMENSION\"},\n\t    { name: \"PERCENTAGE\"},\n\t    { name: \"NUMBER\"},\n\t\n\t    //functions\n\t    { name: \"URI\"},\n\t    { name: \"FUNCTION\"},\n\t\n\t    //Unicode ranges\n\t    { name: \"UNICODE_RANGE\"},\n\t\n\t    /*\n\t     * The following token names are defined in CSS3 Selectors: http://www.w3.org/TR/css3-selectors/#selector-syntax\n\t     */\n\t\n\t    //invalid string\n\t    { name: \"INVALID\"},\n\t\n\t    //combinators\n\t    { name: \"PLUS\", text: \"+\" },\n\t    { name: \"GREATER\", text: \">\"},\n\t    { name: \"COMMA\", text: \",\"},\n\t    { name: \"TILDE\", text: \"~\"},\n\t\n\t    //modifier\n\t    { name: \"NOT\"},\n\t\n\t    /*\n\t     * Defined in CSS3 Paged Media\n\t     */\n\t    { name: \"TOPLEFTCORNER_SYM\", text: \"@top-left-corner\"},\n\t    { name: \"TOPLEFT_SYM\", text: \"@top-left\"},\n\t    { name: \"TOPCENTER_SYM\", text: \"@top-center\"},\n\t    { name: \"TOPRIGHT_SYM\", text: \"@top-right\"},\n\t    { name: \"TOPRIGHTCORNER_SYM\", text: \"@top-right-corner\"},\n\t    { name: \"BOTTOMLEFTCORNER_SYM\", text: \"@bottom-left-corner\"},\n\t    { name: \"BOTTOMLEFT_SYM\", text: \"@bottom-left\"},\n\t    { name: \"BOTTOMCENTER_SYM\", text: \"@bottom-center\"},\n\t    { name: \"BOTTOMRIGHT_SYM\", text: \"@bottom-right\"},\n\t    { name: \"BOTTOMRIGHTCORNER_SYM\", text: \"@bottom-right-corner\"},\n\t    { name: \"LEFTTOP_SYM\", text: \"@left-top\"},\n\t    { name: \"LEFTMIDDLE_SYM\", text: \"@left-middle\"},\n\t    { name: \"LEFTBOTTOM_SYM\", text: \"@left-bottom\"},\n\t    { name: \"RIGHTTOP_SYM\", text: \"@right-top\"},\n\t    { name: \"RIGHTMIDDLE_SYM\", text: \"@right-middle\"},\n\t    { name: \"RIGHTBOTTOM_SYM\", text: \"@right-bottom\"},\n\t\n\t    /*\n\t     * The following token names are defined in CSS3 Media Queries: http://www.w3.org/TR/css3-mediaqueries/#syntax\n\t     */\n\t    /*{ name: \"MEDIA_ONLY\", state: \"media\"},\n\t    { name: \"MEDIA_NOT\", state: \"media\"},\n\t    { name: \"MEDIA_AND\", state: \"media\"},*/\n\t    { name: \"RESOLUTION\", state: \"media\"},\n\t\n\t    /*\n\t     * The following token names are not defined in any CSS specification but are used by the lexer.\n\t     */\n\t\n\t    //not a real token, but useful for stupid IE filters\n\t    { name: \"IE_FUNCTION\" },\n\t\n\t    //part of CSS3 grammar but not the Flex code\n\t    { name: \"CHAR\" },\n\t\n\t    //TODO: Needed?\n\t    //Not defined as tokens, but might as well be\n\t    {\n\t        name: \"PIPE\",\n\t        text: \"|\"\n\t    },\n\t    {\n\t        name: \"SLASH\",\n\t        text: \"/\"\n\t    },\n\t    {\n\t        name: \"MINUS\",\n\t        text: \"-\"\n\t    },\n\t    {\n\t        name: \"STAR\",\n\t        text: \"*\"\n\t    },\n\t\n\t    {\n\t        name: \"LBRACE\",\n\t        endChar: \"}\",\n\t        text: \"{\"\n\t    },\n\t    {\n\t        name: \"RBRACE\",\n\t        text: \"}\"\n\t    },\n\t    {\n\t        name: \"LBRACKET\",\n\t        endChar: \"]\",\n\t        text: \"[\"\n\t    },\n\t    {\n\t        name: \"RBRACKET\",\n\t        text: \"]\"\n\t    },\n\t    {\n\t        name: \"EQUALS\",\n\t        text: \"=\"\n\t    },\n\t    {\n\t        name: \"COLON\",\n\t        text: \":\"\n\t    },\n\t    {\n\t        name: \"SEMICOLON\",\n\t        text: \";\"\n\t    },\n\t\n\t    {\n\t        name: \"LPAREN\",\n\t        endChar: \")\",\n\t        text: \"(\"\n\t    },\n\t    {\n\t        name: \"RPAREN\",\n\t        text: \")\"\n\t    },\n\t    {\n\t        name: \"DOT\",\n\t        text: \".\"\n\t    }\n\t];\n\t\n\t(function(){\n\t\n\t    var nameMap = [],\n\t        typeMap = {};\n\t\n\t    Tokens.UNKNOWN = -1;\n\t    Tokens.unshift({name:\"EOF\"});\n\t    for (var i=0, len = Tokens.length; i < len; i++){\n\t        nameMap.push(Tokens[i].name);\n\t        Tokens[Tokens[i].name] = i;\n\t        if (Tokens[i].text){\n\t            if (Tokens[i].text instanceof Array){\n\t                for (var j=0; j < Tokens[i].text.length; j++){\n\t                    typeMap[Tokens[i].text[j]] = i;\n\t                }\n\t            } else {\n\t                typeMap[Tokens[i].text] = i;\n\t            }\n\t        }\n\t    }\n\t\n\t    Tokens.name = function(tt){\n\t        return nameMap[tt];\n\t    };\n\t\n\t    Tokens.type = function(c){\n\t        return typeMap[c] || -1;\n\t    };\n\t\n\t})();\n\t\n\t\n\t\n\t//This file will likely change a lot! Very experimental!\n\t/*global Properties, ValidationTypes, ValidationError, PropertyValueIterator */\n\tvar Validation = {\n\t\n\t    validate: function(property, value){\n\t\n\t        //normalize name\n\t        var name        = property.toString().toLowerCase(),\n\t            parts       = value.parts,\n\t            expression  = new PropertyValueIterator(value),\n\t            spec        = Properties[name],\n\t            part,\n\t            valid,\n\t            j, count,\n\t            msg,\n\t            types,\n\t            last,\n\t            literals,\n\t            max, multi, group;\n\t\n\t        if (!spec) {\n\t            if (name.indexOf(\"-\") !== 0){    //vendor prefixed are ok\n\t                throw new ValidationError(\"Unknown property '\" + property + \"'.\", property.line, property.col);\n\t            }\n\t        } else if (typeof spec != \"number\"){\n\t\n\t            //initialization\n\t            if (typeof spec == \"string\"){\n\t                if (spec.indexOf(\"||\") > -1) {\n\t                    this.groupProperty(spec, expression);\n\t                } else {\n\t                    this.singleProperty(spec, expression, 1);\n\t                }\n\t\n\t            } else if (spec.multi) {\n\t                this.multiProperty(spec.multi, expression, spec.comma, spec.max || Infinity);\n\t            } else if (typeof spec == \"function\") {\n\t                spec(expression);\n\t            }\n\t\n\t        }\n\t\n\t    },\n\t\n\t    singleProperty: function(types, expression, max, partial) {\n\t\n\t        var result      = false,\n\t            value       = expression.value,\n\t            count       = 0,\n\t            part;\n\t\n\t        while (expression.hasNext() && count < max) {\n\t            result = ValidationTypes.isAny(expression, types);\n\t            if (!result) {\n\t                break;\n\t            }\n\t            count++;\n\t        }\n\t\n\t        if (!result) {\n\t            if (expression.hasNext() && !expression.isFirst()) {\n\t                part = expression.peek();\n\t                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            } else {\n\t                 throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n\t            }\n\t        } else if (expression.hasNext()) {\n\t            part = expression.next();\n\t            throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t        }\n\t\n\t    },\n\t\n\t    multiProperty: function (types, expression, comma, max) {\n\t\n\t        var result      = false,\n\t            value       = expression.value,\n\t            count       = 0,\n\t            sep         = false,\n\t            part;\n\t\n\t        while(expression.hasNext() && !result && count < max) {\n\t            if (ValidationTypes.isAny(expression, types)) {\n\t                count++;\n\t                if (!expression.hasNext()) {\n\t                    result = true;\n\t\n\t                } else if (comma) {\n\t                    if (expression.peek() == \",\") {\n\t                        part = expression.next();\n\t                    } else {\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                break;\n\t\n\t            }\n\t        }\n\t\n\t        if (!result) {\n\t            if (expression.hasNext() && !expression.isFirst()) {\n\t                part = expression.peek();\n\t                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            } else {\n\t                part = expression.previous();\n\t                if (comma && part == \",\") {\n\t                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t                } else {\n\t                    throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n\t                }\n\t            }\n\t\n\t        } else if (expression.hasNext()) {\n\t            part = expression.next();\n\t            throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t        }\n\t\n\t    },\n\t\n\t    groupProperty: function (types, expression, comma) {\n\t\n\t        var result      = false,\n\t            value       = expression.value,\n\t            typeCount   = types.split(\"||\").length,\n\t            groups      = { count: 0 },\n\t            partial     = false,\n\t            name,\n\t            part;\n\t\n\t        while(expression.hasNext() && !result) {\n\t            name = ValidationTypes.isAnyOfGroup(expression, types);\n\t            if (name) {\n\t\n\t                //no dupes\n\t                if (groups[name]) {\n\t                    break;\n\t                } else {\n\t                    groups[name] = 1;\n\t                    groups.count++;\n\t                    partial = true;\n\t\n\t                    if (groups.count == typeCount || !expression.hasNext()) {\n\t                        result = true;\n\t                    }\n\t                }\n\t            } else {\n\t                break;\n\t            }\n\t        }\n\t\n\t        if (!result) {\n\t            if (partial && expression.hasNext()) {\n\t                    part = expression.peek();\n\t                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t            } else {\n\t                throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n\t            }\n\t        } else if (expression.hasNext()) {\n\t            part = expression.next();\n\t            throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n\t        }\n\t    }\n\t\n\t\n\t\n\t};\n\t/**\n\t * Type to use when a validation error occurs.\n\t * @class ValidationError\n\t * @namespace parserlib.util\n\t * @constructor\n\t * @param {String} message The error message.\n\t * @param {int} line The line at which the error occurred.\n\t * @param {int} col The column at which the error occurred.\n\t */\n\tfunction ValidationError(message, line, col){\n\t\n\t    /**\n\t     * The column at which the error occurred.\n\t     * @type int\n\t     * @property col\n\t     */\n\t    this.col = col;\n\t\n\t    /**\n\t     * The line at which the error occurred.\n\t     * @type int\n\t     * @property line\n\t     */\n\t    this.line = line;\n\t\n\t    /**\n\t     * The text representation of the unit.\n\t     * @type String\n\t     * @property text\n\t     */\n\t    this.message = message;\n\t\n\t}\n\t\n\t//inherit from Error\n\tValidationError.prototype = new Error();\n\t//This file will likely change a lot! Very experimental!\n\t/*global Properties, Validation, ValidationError, PropertyValueIterator, console*/\n\tvar ValidationTypes = {\n\t\n\t    isLiteral: function (part, literals) {\n\t        var text = part.text.toString().toLowerCase(),\n\t            args = literals.split(\" | \"),\n\t            i, len, found = false;\n\t\n\t        for (i=0,len=args.length; i < len && !found; i++){\n\t            if (text == args[i].toLowerCase()){\n\t                found = true;\n\t            }\n\t        }\n\t\n\t        return found;\n\t    },\n\t\n\t    isSimple: function(type) {\n\t        return !!this.simple[type];\n\t    },\n\t\n\t    isComplex: function(type) {\n\t        return !!this.complex[type];\n\t    },\n\t\n\t    /**\n\t     * Determines if the next part(s) of the given expression\n\t     * are any of the given types.\n\t     */\n\t    isAny: function (expression, types) {\n\t        var args = types.split(\" | \"),\n\t            i, len, found = false;\n\t\n\t        for (i=0,len=args.length; i < len && !found && expression.hasNext(); i++){\n\t            found = this.isType(expression, args[i]);\n\t        }\n\t\n\t        return found;\n\t    },\n\t\n\t    /**\n\t     * Determines if the next part(s) of the given expression\n\t     * are one of a group.\n\t     */\n\t    isAnyOfGroup: function(expression, types) {\n\t        var args = types.split(\" || \"),\n\t            i, len, found = false;\n\t\n\t        for (i=0,len=args.length; i < len && !found; i++){\n\t            found = this.isType(expression, args[i]);\n\t        }\n\t\n\t        return found ? args[i-1] : false;\n\t    },\n\t\n\t    /**\n\t     * Determines if the next part(s) of the given expression\n\t     * are of a given type.\n\t     */\n\t    isType: function (expression, type) {\n\t        var part = expression.peek(),\n\t            result = false;\n\t\n\t        if (type.charAt(0) != \"<\") {\n\t            result = this.isLiteral(part, type);\n\t            if (result) {\n\t                expression.next();\n\t            }\n\t        } else if (this.simple[type]) {\n\t            result = this.simple[type](part);\n\t            if (result) {\n\t                expression.next();\n\t            }\n\t        } else {\n\t            result = this.complex[type](expression);\n\t        }\n\t\n\t        return result;\n\t    },\n\t\n\t\n\t\n\t    simple: {\n\t\n\t        \"<absolute-size>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"xx-small | x-small | small | medium | large | x-large | xx-large\");\n\t        },\n\t\n\t        \"<attachment>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"scroll | fixed | local\");\n\t        },\n\t\n\t        \"<attr>\": function(part){\n\t            return part.type == \"function\" && part.name == \"attr\";\n\t        },\n\t\n\t        \"<bg-image>\": function(part){\n\t            return this[\"<image>\"](part) || this[\"<gradient>\"](part) ||  part == \"none\";\n\t        },\n\t\n\t        \"<gradient>\": function(part) {\n\t            return part.type == \"function\" && /^(?:\\-(?:ms|moz|o|webkit)\\-)?(?:repeating\\-)?(?:radial\\-|linear\\-)?gradient/i.test(part);\n\t        },\n\t\n\t        \"<box>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"padding-box | border-box | content-box\");\n\t        },\n\t\n\t        \"<content>\": function(part){\n\t            return part.type == \"function\" && part.name == \"content\";\n\t        },\n\t\n\t        \"<relative-size>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"smaller | larger\");\n\t        },\n\t\n\t        //any identifier\n\t        \"<ident>\": function(part){\n\t            return part.type == \"identifier\";\n\t        },\n\t\n\t        \"<length>\": function(part){\n\t            if (part.type == \"function\" && /^(?:\\-(?:ms|moz|o|webkit)\\-)?calc/i.test(part)){\n\t                return true;\n\t            }else{\n\t                return part.type == \"length\" || part.type == \"number\" || part.type == \"integer\" || part == \"0\";\n\t            }\n\t        },\n\t\n\t        \"<color>\": function(part){\n\t            return part.type == \"color\" || part == \"transparent\";\n\t        },\n\t\n\t        \"<number>\": function(part){\n\t            return part.type == \"number\" || this[\"<integer>\"](part);\n\t        },\n\t\n\t        \"<integer>\": function(part){\n\t            return part.type == \"integer\";\n\t        },\n\t\n\t        \"<line>\": function(part){\n\t            return part.type == \"integer\";\n\t        },\n\t\n\t        \"<angle>\": function(part){\n\t            return part.type == \"angle\";\n\t        },\n\t\n\t        \"<uri>\": function(part){\n\t            return part.type == \"uri\";\n\t        },\n\t\n\t        \"<image>\": function(part){\n\t            return this[\"<uri>\"](part);\n\t        },\n\t\n\t        \"<percentage>\": function(part){\n\t            return part.type == \"percentage\" || part == \"0\";\n\t        },\n\t\n\t        \"<border-width>\": function(part){\n\t            return this[\"<length>\"](part) || ValidationTypes.isLiteral(part, \"thin | medium | thick\");\n\t        },\n\t\n\t        \"<border-style>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\");\n\t        },\n\t\n\t        \"<content-sizing>\": function(part){ // http://www.w3.org/TR/css3-sizing/#width-height-keywords\n\t            return ValidationTypes.isLiteral(part, \"fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content\");\n\t        },\n\t\n\t        \"<margin-width>\": function(part){\n\t            return this[\"<length>\"](part) || this[\"<percentage>\"](part) || ValidationTypes.isLiteral(part, \"auto\");\n\t        },\n\t\n\t        \"<padding-width>\": function(part){\n\t            return this[\"<length>\"](part) || this[\"<percentage>\"](part);\n\t        },\n\t\n\t        \"<shape>\": function(part){\n\t            return part.type == \"function\" && (part.name == \"rect\" || part.name == \"inset-rect\");\n\t        },\n\t\n\t        \"<time>\": function(part) {\n\t            return part.type == \"time\";\n\t        },\n\t\n\t        \"<flex-grow>\": function(part){\n\t            return this[\"<number>\"](part);\n\t        },\n\t\n\t        \"<flex-shrink>\": function(part){\n\t            return this[\"<number>\"](part);\n\t        },\n\t\n\t        \"<width>\": function(part){\n\t            return this[\"<margin-width>\"](part);\n\t        },\n\t\n\t        \"<flex-basis>\": function(part){\n\t            return this[\"<width>\"](part);\n\t        },\n\t\n\t        \"<flex-direction>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"row | row-reverse | column | column-reverse\");\n\t        },\n\t\n\t        \"<flex-wrap>\": function(part){\n\t            return ValidationTypes.isLiteral(part, \"nowrap | wrap | wrap-reverse\");\n\t        }\n\t    },\n\t\n\t    complex: {\n\t\n\t        \"<bg-position>\": function(expression){\n\t            var types   = this,\n\t                result  = false,\n\t                numeric = \"<percentage> | <length>\",\n\t                xDir    = \"left | right\",\n\t                yDir    = \"top | bottom\",\n\t                count = 0,\n\t                hasNext = function() {\n\t                    return expression.hasNext() && expression.peek() != \",\";\n\t                };\n\t\n\t            while (expression.peek(count) && expression.peek(count) != \",\") {\n\t                count++;\n\t            }\n\t\n\t/*\n\t<position> = [\n\t  [ left | center | right | top | bottom | <percentage> | <length> ]\n\t|\n\t  [ left | center | right | <percentage> | <length> ]\n\t  [ top | center | bottom | <percentage> | <length> ]\n\t|\n\t  [ center | [ left | right ] [ <percentage> | <length> ]? ] &&\n\t  [ center | [ top | bottom ] [ <percentage> | <length> ]? ]\n\t]\n\t*/\n\t\n\t            if (count < 3) {\n\t                if (ValidationTypes.isAny(expression, xDir + \" | center | \" + numeric)) {\n\t                        result = true;\n\t                        ValidationTypes.isAny(expression, yDir + \" | center | \" + numeric);\n\t                } else if (ValidationTypes.isAny(expression, yDir)) {\n\t                        result = true;\n\t                        ValidationTypes.isAny(expression, xDir + \" | center\");\n\t                }\n\t            } else {\n\t                if (ValidationTypes.isAny(expression, xDir)) {\n\t                    if (ValidationTypes.isAny(expression, yDir)) {\n\t                        result = true;\n\t                        ValidationTypes.isAny(expression, numeric);\n\t                    } else if (ValidationTypes.isAny(expression, numeric)) {\n\t                        if (ValidationTypes.isAny(expression, yDir)) {\n\t                            result = true;\n\t                            ValidationTypes.isAny(expression, numeric);\n\t                        } else if (ValidationTypes.isAny(expression, \"center\")) {\n\t                            result = true;\n\t                        }\n\t                    }\n\t                } else if (ValidationTypes.isAny(expression, yDir)) {\n\t                    if (ValidationTypes.isAny(expression, xDir)) {\n\t                        result = true;\n\t                        ValidationTypes.isAny(expression, numeric);\n\t                    } else if (ValidationTypes.isAny(expression, numeric)) {\n\t                        if (ValidationTypes.isAny(expression, xDir)) {\n\t                                result = true;\n\t                                ValidationTypes.isAny(expression, numeric);\n\t                        } else if (ValidationTypes.isAny(expression, \"center\")) {\n\t                            result = true;\n\t                        }\n\t                    }\n\t                } else if (ValidationTypes.isAny(expression, \"center\")) {\n\t                    if (ValidationTypes.isAny(expression, xDir + \" | \" + yDir)) {\n\t                        result = true;\n\t                        ValidationTypes.isAny(expression, numeric);\n\t                    }\n\t                }\n\t            }\n\t\n\t            return result;\n\t        },\n\t\n\t        \"<bg-size>\": function(expression){\n\t            //<bg-size> = [ <length> | <percentage> | auto ]{1,2} | cover | contain\n\t            var types   = this,\n\t                result  = false,\n\t                numeric = \"<percentage> | <length> | auto\",\n\t                part,\n\t                i, len;\n\t\n\t            if (ValidationTypes.isAny(expression, \"cover | contain\")) {\n\t                result = true;\n\t            } else if (ValidationTypes.isAny(expression, numeric)) {\n\t                result = true;\n\t                ValidationTypes.isAny(expression, numeric);\n\t            }\n\t\n\t            return result;\n\t        },\n\t\n\t        \"<repeat-style>\": function(expression){\n\t            //repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}\n\t            var result  = false,\n\t                values  = \"repeat | space | round | no-repeat\",\n\t                part;\n\t\n\t            if (expression.hasNext()){\n\t                part = expression.next();\n\t\n\t                if (ValidationTypes.isLiteral(part, \"repeat-x | repeat-y\")) {\n\t                    result = true;\n\t                } else if (ValidationTypes.isLiteral(part, values)) {\n\t                    result = true;\n\t\n\t                    if (expression.hasNext() && ValidationTypes.isLiteral(expression.peek(), values)) {\n\t                        expression.next();\n\t                    }\n\t                }\n\t            }\n\t\n\t            return result;\n\t\n\t        },\n\t\n\t        \"<shadow>\": function(expression) {\n\t            //inset? && [ <length>{2,4} && <color>? ]\n\t            var result  = false,\n\t                count   = 0,\n\t                inset   = false,\n\t                color   = false,\n\t                part;\n\t\n\t            if (expression.hasNext()) {\n\t\n\t                if (ValidationTypes.isAny(expression, \"inset\")){\n\t                    inset = true;\n\t                }\n\t\n\t                if (ValidationTypes.isAny(expression, \"<color>\")) {\n\t                    color = true;\n\t                }\n\t\n\t                while (ValidationTypes.isAny(expression, \"<length>\") && count < 4) {\n\t                    count++;\n\t                }\n\t\n\t\n\t                if (expression.hasNext()) {\n\t                    if (!color) {\n\t                        ValidationTypes.isAny(expression, \"<color>\");\n\t                    }\n\t\n\t                    if (!inset) {\n\t                        ValidationTypes.isAny(expression, \"inset\");\n\t                    }\n\t\n\t                }\n\t\n\t                result = (count >= 2 && count <= 4);\n\t\n\t            }\n\t\n\t            return result;\n\t        },\n\t\n\t        \"<x-one-radius>\": function(expression) {\n\t            //[ <length> | <percentage> ] [ <length> | <percentage> ]?\n\t            var result  = false,\n\t                simple = \"<length> | <percentage> | inherit\";\n\t\n\t            if (ValidationTypes.isAny(expression, simple)){\n\t                result = true;\n\t                ValidationTypes.isAny(expression, simple);\n\t            }\n\t\n\t            return result;\n\t        },\n\t\n\t        \"<flex>\": function(expression) {\n\t            // http://www.w3.org/TR/2014/WD-css-flexbox-1-20140325/#flex-property\n\t            // none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]\n\t            // Valid syntaxes, according to https://developer.mozilla.org/en-US/docs/Web/CSS/flex#Syntax\n\t            // * none\n\t            // * <flex-grow>\n\t            // * <flex-basis>\n\t            // * <flex-grow> <flex-basis>\n\t            // * <flex-grow> <flex-shrink>\n\t            // * <flex-grow> <flex-shrink> <flex-basis>\n\t            // * inherit\n\t            var part,\n\t                result = false;\n\t            if (ValidationTypes.isAny(expression, \"none | inherit\")) {\n\t                result = true;\n\t            } else {\n\t                if (ValidationTypes.isType(expression, \"<flex-grow>\")) {\n\t                    if (expression.peek()) {\n\t                        if (ValidationTypes.isType(expression, \"<flex-shrink>\")) {\n\t                            if (expression.peek()) {\n\t                                result = ValidationTypes.isType(expression, \"<flex-basis>\");\n\t                            } else {\n\t                                result = true;\n\t                            }\n\t                        } else if (ValidationTypes.isType(expression, \"<flex-basis>\")) {\n\t                            result = expression.peek() === null;\n\t                        }\n\t                    } else {\n\t                        result = true;\n\t                    }\n\t                } else if (ValidationTypes.isType(expression, \"<flex-basis>\")) {\n\t                    result = true;\n\t                }\n\t            }\n\t\n\t            if (!result) {\n\t                // Generate a more verbose error than \"Expected <flex>...\"\n\t                part = expression.peek();\n\t                throw new ValidationError(\"Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '\" + expression.value.text + \"'.\", part.line, part.col);\n\t            }\n\t\n\t            return result;\n\t        }\n\t    }\n\t};\n\t\n\tparserlib.css = {\n\tColors              :Colors,\n\tCombinator          :Combinator,\n\tParser              :Parser,\n\tPropertyName        :PropertyName,\n\tPropertyValue       :PropertyValue,\n\tPropertyValuePart   :PropertyValuePart,\n\tMediaFeature        :MediaFeature,\n\tMediaQuery          :MediaQuery,\n\tSelector            :Selector,\n\tSelectorPart        :SelectorPart,\n\tSelectorSubPart     :SelectorSubPart,\n\tSpecificity         :Specificity,\n\tTokenStream         :TokenStream,\n\tTokens              :Tokens,\n\tValidationError     :ValidationError\n\t};\n\t})();\n\t\n\t(function(){\n\tfor(var prop in parserlib){\n\texports[prop] = parserlib[prop];\n\t}\n\t})();\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 1.client_build.js\n **/","/*!\nCSSLint\nCopyright (c) 2013 Nicole Sullivan and Nicholas C. Zakas. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n/* Build: v0.10.0 15-August-2013 01:07:22 */\nvar parserlib = require(\"parserlib\");\n/**\n * Main CSSLint object.\n * @class CSSLint\n * @static\n * @extends parserlib.util.EventTarget\n */\n/*global parserlib, Reporter*/\nvar CSSLint = (function(){\n\n    var rules           = [],\n        formatters      = [],\n        embeddedRuleset = /\\/\\*csslint([^\\*]*)\\*\\//,\n        api             = new parserlib.util.EventTarget();\n\n    api.version = \"0.10.0\";\n\n    //-------------------------------------------------------------------------\n    // Rule Management\n    //-------------------------------------------------------------------------\n\n    /**\n     * Adds a new rule to the engine.\n     * @param {Object} rule The rule to add.\n     * @method addRule\n     */\n    api.addRule = function(rule){\n        rules.push(rule);\n        rules[rule.id] = rule;\n    };\n\n    /**\n     * Clears all rule from the engine.\n     * @method clearRules\n     */\n    api.clearRules = function(){\n        rules = [];\n    };\n\n    /**\n     * Returns the rule objects.\n     * @return An array of rule objects.\n     * @method getRules\n     */\n    api.getRules = function(){\n        return [].concat(rules).sort(function(a,b){\n            return a.id > b.id ? 1 : 0;\n        });\n    };\n\n    /**\n     * Returns a ruleset configuration object with all current rules.\n     * @return A ruleset object.\n     * @method getRuleset\n     */\n    api.getRuleset = function() {\n        var ruleset = {},\n            i = 0,\n            len = rules.length;\n\n        while (i < len){\n            ruleset[rules[i++].id] = 1;    //by default, everything is a warning\n        }\n\n        return ruleset;\n    };\n\n    /**\n     * Returns a ruleset object based on embedded rules.\n     * @param {String} text A string of css containing embedded rules.\n     * @param {Object} ruleset A ruleset object to modify.\n     * @return {Object} A ruleset object.\n     * @method getEmbeddedRuleset\n     */\n    function applyEmbeddedRuleset(text, ruleset){\n        var valueMap,\n            embedded = text && text.match(embeddedRuleset),\n            rules = embedded && embedded[1];\n\n        if (rules) {\n            valueMap = {\n                \"true\": 2,  // true is error\n                \"\": 1,      // blank is warning\n                \"false\": 0, // false is ignore\n\n                \"2\": 2,     // explicit error\n                \"1\": 1,     // explicit warning\n                \"0\": 0      // explicit ignore\n            };\n\n            rules.toLowerCase().split(\",\").forEach(function(rule){\n                var pair = rule.split(\":\"),\n                    property = pair[0] || \"\",\n                    value = pair[1] || \"\";\n\n                ruleset[property.trim()] = valueMap[value.trim()];\n            });\n        }\n\n        return ruleset;\n    }\n\n    //-------------------------------------------------------------------------\n    // Formatters\n    //-------------------------------------------------------------------------\n\n    /**\n     * Adds a new formatter to the engine.\n     * @param {Object} formatter The formatter to add.\n     * @method addFormatter\n     */\n    api.addFormatter = function(formatter) {\n        // formatters.push(formatter);\n        formatters[formatter.id] = formatter;\n    };\n\n    /**\n     * Retrieves a formatter for use.\n     * @param {String} formatId The name of the format to retrieve.\n     * @return {Object} The formatter or undefined.\n     * @method getFormatter\n     */\n    api.getFormatter = function(formatId){\n        return formatters[formatId];\n    };\n\n    /**\n     * Formats the results in a particular format for a single file.\n     * @param {Object} result The results returned from CSSLint.verify().\n     * @param {String} filename The filename for which the results apply.\n     * @param {String} formatId The name of the formatter to use.\n     * @param {Object} options (Optional) for special output handling.\n     * @return {String} A formatted string for the results.\n     * @method format\n     */\n    api.format = function(results, filename, formatId, options) {\n        var formatter = this.getFormatter(formatId),\n            result = null;\n\n        if (formatter){\n            result = formatter.startFormat();\n            result += formatter.formatResults(results, filename, options || {});\n            result += formatter.endFormat();\n        }\n\n        return result;\n    };\n\n    /**\n     * Indicates if the given format is supported.\n     * @param {String} formatId The ID of the format to check.\n     * @return {Boolean} True if the format exists, false if not.\n     * @method hasFormat\n     */\n    api.hasFormat = function(formatId){\n        return formatters.hasOwnProperty(formatId);\n    };\n\n    //-------------------------------------------------------------------------\n    // Verification\n    //-------------------------------------------------------------------------\n\n    /**\n     * Starts the verification process for the given CSS text.\n     * @param {String} text The CSS text to verify.\n     * @param {Object} ruleset (Optional) List of rules to apply. If null, then\n     *      all rules are used. If a rule has a value of 1 then it's a warning,\n     *      a value of 2 means it's an error.\n     * @return {Object} Results of the verification.\n     * @method verify\n     */\n    api.verify = function(text, ruleset){\n\n        var i       = 0,\n            len     = rules.length,\n            reporter,\n            lines,\n            report,\n            parser = new parserlib.css.Parser({ starHack: true, ieFilters: true,\n                                                underscoreHack: true, strict: false });\n\n        // normalize line endings\n        lines = text.replace(/\\n\\r?/g, \"$split$\").split('$split$');\n\n        if (!ruleset){\n            ruleset = this.getRuleset();\n        }\n\n        if (embeddedRuleset.test(text)){\n            ruleset = applyEmbeddedRuleset(text, ruleset);\n        }\n\n        reporter = new Reporter(lines, ruleset);\n\n        ruleset.errors = 2;       //always report parsing errors as errors\n        for (i in ruleset){\n            if(ruleset.hasOwnProperty(i) && ruleset[i]){\n                if (rules[i]){\n                    rules[i].init(parser, reporter);\n                }\n            }\n        }\n\n\n        //capture most horrible error type\n        try {\n            parser.parse(text);\n        } catch (ex) {\n            reporter.error(\"Fatal error, cannot continue: \" + ex.message, ex.line, ex.col, {});\n        }\n\n        report = {\n            messages    : reporter.messages,\n            stats       : reporter.stats,\n            ruleset     : reporter.ruleset\n        };\n\n        //sort by line numbers, rollups at the bottom\n        report.messages.sort(function (a, b){\n            if (a.rollup && !b.rollup){\n                return 1;\n            } else if (!a.rollup && b.rollup){\n                return -1;\n            } else {\n                return a.line - b.line;\n            }\n        });\n\n        return report;\n    };\n\n    //-------------------------------------------------------------------------\n    // Publish the API\n    //-------------------------------------------------------------------------\n\n    return api;\n\n})();\n\n/*global CSSLint*/\n/**\n * An instance of Report is used to report results of the\n * verification back to the main API.\n * @class Reporter\n * @constructor\n * @param {String[]} lines The text lines of the source.\n * @param {Object} ruleset The set of rules to work with, including if\n *      they are errors or warnings.\n */\nfunction Reporter(lines, ruleset){\n\n    /**\n     * List of messages being reported.\n     * @property messages\n     * @type String[]\n     */\n    this.messages = [];\n\n    /**\n     * List of statistics being reported.\n     * @property stats\n     * @type String[]\n     */\n    this.stats = [];\n\n    /**\n     * Lines of code being reported on. Used to provide contextual information\n     * for messages.\n     * @property lines\n     * @type String[]\n     */\n    this.lines = lines;\n\n    /**\n     * Information about the rules. Used to determine whether an issue is an\n     * error or warning.\n     * @property ruleset\n     * @type Object\n     */\n    this.ruleset = ruleset;\n}\n\nReporter.prototype = {\n\n    //restore constructor\n    constructor: Reporter,\n\n    /**\n     * Report an error.\n     * @param {String} message The message to store.\n     * @param {int} line The line number.\n     * @param {int} col The column number.\n     * @param {Object} rule The rule this message relates to.\n     * @method error\n     */\n    error: function(message, line, col, rule){\n        this.messages.push({\n            type    : \"error\",\n            line    : line,\n            col     : col,\n            message : message,\n            evidence: this.lines[line-1],\n            rule    : rule || {}\n        });\n    },\n\n    /**\n     * Report an warning.\n     * @param {String} message The message to store.\n     * @param {int} line The line number.\n     * @param {int} col The column number.\n     * @param {Object} rule The rule this message relates to.\n     * @method warn\n     * @deprecated Use report instead.\n     */\n    warn: function(message, line, col, rule){\n        this.report(message, line, col, rule);\n    },\n\n    /**\n     * Report an issue.\n     * @param {String} message The message to store.\n     * @param {int} line The line number.\n     * @param {int} col The column number.\n     * @param {Object} rule The rule this message relates to.\n     * @method report\n     */\n    report: function(message, line, col, rule){\n        this.messages.push({\n            type    : this.ruleset[rule.id] == 2 ? \"error\" : \"warning\",\n            line    : line,\n            col     : col,\n            message : message,\n            evidence: this.lines[line-1],\n            rule    : rule\n        });\n    },\n\n    /**\n     * Report some informational text.\n     * @param {String} message The message to store.\n     * @param {int} line The line number.\n     * @param {int} col The column number.\n     * @param {Object} rule The rule this message relates to.\n     * @method info\n     */\n    info: function(message, line, col, rule){\n        this.messages.push({\n            type    : \"info\",\n            line    : line,\n            col     : col,\n            message : message,\n            evidence: this.lines[line-1],\n            rule    : rule\n        });\n    },\n\n    /**\n     * Report some rollup error information.\n     * @param {String} message The message to store.\n     * @param {Object} rule The rule this message relates to.\n     * @method rollupError\n     */\n    rollupError: function(message, rule){\n        this.messages.push({\n            type    : \"error\",\n            rollup  : true,\n            message : message,\n            rule    : rule\n        });\n    },\n\n    /**\n     * Report some rollup warning information.\n     * @param {String} message The message to store.\n     * @param {Object} rule The rule this message relates to.\n     * @method rollupWarn\n     */\n    rollupWarn: function(message, rule){\n        this.messages.push({\n            type    : \"warning\",\n            rollup  : true,\n            message : message,\n            rule    : rule\n        });\n    },\n\n    /**\n     * Report a statistic.\n     * @param {String} name The name of the stat to store.\n     * @param {Variant} value The value of the stat.\n     * @method stat\n     */\n    stat: function(name, value){\n        this.stats[name] = value;\n    }\n};\n\n//expose for testing purposes\nCSSLint._Reporter = Reporter;\n\n/*global CSSLint*/\n\n/*\n * Utility functions that make life easier.\n */\nCSSLint.Util = {\n    /*\n     * Adds all properties from supplier onto receiver,\n     * overwriting if the same name already exists on\n     * reciever.\n     * @param {Object} The object to receive the properties.\n     * @param {Object} The object to provide the properties.\n     * @return {Object} The receiver\n     */\n    mix: function(receiver, supplier){\n        var prop;\n\n        for (prop in supplier){\n            if (supplier.hasOwnProperty(prop)){\n                receiver[prop] = supplier[prop];\n            }\n        }\n\n        return prop;\n    },\n\n    /*\n     * Polyfill for array indexOf() method.\n     * @param {Array} values The array to search.\n     * @param {Variant} value The value to search for.\n     * @return {int} The index of the value if found, -1 if not.\n     */\n    indexOf: function(values, value){\n        if (values.indexOf){\n            return values.indexOf(value);\n        } else {\n            for (var i=0, len=values.length; i < len; i++){\n                if (values[i] === value){\n                    return i;\n                }\n            }\n            return -1;\n        }\n    },\n\n    /*\n     * Polyfill for array forEach() method.\n     * @param {Array} values The array to operate on.\n     * @param {Function} func The function to call on each item.\n     * @return {void}\n     */\n    forEach: function(values, func) {\n        if (values.forEach){\n            return values.forEach(func);\n        } else {\n            for (var i=0, len=values.length; i < len; i++){\n                func(values[i], i, values);\n            }\n        }\n    }\n};\n/*global CSSLint*/\n/*\n * Rule: Don't use adjoining classes (.foo.bar).\n */\nCSSLint.addRule({\n\n    //rule information\n    id: \"adjoining-classes\",\n    name: \"Disallow adjoining classes\",\n    desc: \"Don't use adjoining classes.\",\n    browsers: \"IE6\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                modifier,\n                classCount,\n                i, j, k;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n                for (j=0; j < selector.parts.length; j++){\n                    part = selector.parts[j];\n                    if (part.type == parser.SELECTOR_PART_TYPE){\n                        classCount = 0;\n                        for (k=0; k < part.modifiers.length; k++){\n                            modifier = part.modifiers[k];\n                            if (modifier.type == \"class\"){\n                                classCount++;\n                            }\n                            if (classCount > 1){\n                                reporter.report(\"Don't use adjoining classes.\", part.line, part.col, rule);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n});\n/*global CSSLint*/\n\n/*\n * Rule: Don't use width or height when using padding or border.\n */\nCSSLint.addRule({\n\n    //rule information\n    id: \"box-model\",\n    name: \"Beware of broken box size\",\n    desc: \"Don't use width or height when using padding or border.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            widthProperties = {\n                border: 1,\n                \"border-left\": 1,\n                \"border-right\": 1,\n                padding: 1,\n                \"padding-left\": 1,\n                \"padding-right\": 1\n            },\n            heightProperties = {\n                border: 1,\n                \"border-bottom\": 1,\n                \"border-top\": 1,\n                padding: 1,\n                \"padding-bottom\": 1,\n                \"padding-top\": 1\n            },\n            properties,\n            boxSizing = false;\n\n        function startRule(){\n            properties = {};\n            boxSizing = false;\n        }\n\n        function endRule(){\n            var prop, value;\n\n            if (!boxSizing) {\n                if (properties.height){\n                    for (prop in heightProperties){\n                        if (heightProperties.hasOwnProperty(prop) && properties[prop]){\n                            value = properties[prop].value;\n                            //special case for padding\n                            if (!(prop == \"padding\" && value.parts.length === 2 && value.parts[0].value === 0)){\n                                reporter.report(\"Using height with \" + prop + \" can sometimes make elements larger than you expect.\", properties[prop].line, properties[prop].col, rule);\n                            }\n                        }\n                    }\n                }\n\n                if (properties.width){\n                    for (prop in widthProperties){\n                        if (widthProperties.hasOwnProperty(prop) && properties[prop]){\n                            value = properties[prop].value;\n\n                            if (!(prop == \"padding\" && value.parts.length === 2 && value.parts[1].value === 0)){\n                                reporter.report(\"Using width with \" + prop + \" can sometimes make elements larger than you expect.\", properties[prop].line, properties[prop].col, rule);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n        parser.addListener(\"startpage\", startRule);\n        parser.addListener(\"startpagemargin\", startRule);\n        parser.addListener(\"startkeyframerule\", startRule);\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text.toLowerCase();\n\n            if (heightProperties[name] || widthProperties[name]){\n                if (!/^0\\S*$/.test(event.value) && !(name == \"border\" && event.value == \"none\")){\n                    properties[name] = { line: event.property.line, col: event.property.col, value: event.value };\n                }\n            } else {\n                if (/^(width|height)/i.test(name) && /^(length|percentage)/.test(event.value.parts[0].type)){\n                    properties[name] = 1;\n                } else if (name == \"box-sizing\") {\n                    boxSizing = true;\n                }\n            }\n\n        });\n\n        parser.addListener(\"endrule\", endRule);\n        parser.addListener(\"endfontface\", endRule);\n        parser.addListener(\"endpage\", endRule);\n        parser.addListener(\"endpagemargin\", endRule);\n        parser.addListener(\"endkeyframerule\", endRule);\n    }\n\n});\n/*global CSSLint*/\n\n/*\n * Rule: box-sizing doesn't work in IE6 and IE7.\n */\nCSSLint.addRule({\n\n    //rule information\n    id: \"box-sizing\",\n    name: \"Disallow use of box-sizing\",\n    desc: \"The box-sizing properties isn't supported in IE6 and IE7.\",\n    browsers: \"IE6, IE7\",\n    tags: [\"Compatibility\"],\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text.toLowerCase();\n\n            if (name == \"box-sizing\"){\n                reporter.report(\"The box-sizing property isn't supported in IE6 and IE7.\", event.line, event.col, rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: Use the bulletproof @font-face syntax to avoid 404's in old IE\n * (http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax)\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"bulletproof-font-face\",\n    name: \"Use the bulletproof @font-face syntax\",\n    desc: \"Use the bulletproof @font-face syntax to avoid 404's in old IE (http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax).\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            count = 0,\n            fontFaceRule = false,\n            firstSrc     = true,\n            ruleFailed    = false,\n            line, col;\n\n        // Mark the start of a @font-face declaration so we only test properties inside it\n        parser.addListener(\"startfontface\", function(event){\n            fontFaceRule = true;\n        });\n\n        parser.addListener(\"property\", function(event){\n            // If we aren't inside an @font-face declaration then just return\n            if (!fontFaceRule) {\n                return;\n            }\n\n            var propertyName = event.property.toString().toLowerCase(),\n                value        = event.value.toString();\n\n            // Set the line and col numbers for use in the endfontface listener\n            line = event.line;\n            col  = event.col;\n\n            // This is the property that we care about, we can ignore the rest\n            if (propertyName === 'src') {\n                var regex = /^\\s?url\\(['\"].+\\.eot\\?.*['\"]\\)\\s*format\\(['\"]embedded-opentype['\"]\\).*$/i;\n\n                // We need to handle the advanced syntax with two src properties\n                if (!value.match(regex) && firstSrc) {\n                    ruleFailed = true;\n                    firstSrc = false;\n                } else if (value.match(regex) && !firstSrc) {\n                    ruleFailed = false;\n                }\n            }\n\n\n        });\n\n        // Back to normal rules that we don't need to test\n        parser.addListener(\"endfontface\", function(event){\n            fontFaceRule = false;\n\n            if (ruleFailed) {\n                reporter.report(\"@font-face declaration doesn't follow the fontspring bulletproof syntax.\", line, col, rule);\n            }\n        });\n    }\n});\n/*\n * Rule: Include all compatible vendor prefixes to reach a wider\n * range of users.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"compatible-vendor-prefixes\",\n    name: \"Require compatible vendor prefixes\",\n    desc: \"Include all compatible vendor prefixes to reach a wider range of users.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function (parser, reporter) {\n        var rule = this,\n            compatiblePrefixes,\n            properties,\n            prop,\n            variations,\n            prefixed,\n            i,\n            len,\n            inKeyFrame = false,\n            arrayPush = Array.prototype.push,\n            applyTo = [];\n\n        // See http://peter.sh/experiments/vendor-prefixed-css-property-overview/ for details\n        compatiblePrefixes = {\n            \"animation\"                  : \"webkit moz\",\n            \"animation-delay\"            : \"webkit moz\",\n            \"animation-direction\"        : \"webkit moz\",\n            \"animation-duration\"         : \"webkit moz\",\n            \"animation-fill-mode\"        : \"webkit moz\",\n            \"animation-iteration-count\"  : \"webkit moz\",\n            \"animation-name\"             : \"webkit moz\",\n            \"animation-play-state\"       : \"webkit moz\",\n            \"animation-timing-function\"  : \"webkit moz\",\n            \"appearance\"                 : \"webkit moz\",\n            \"border-end\"                 : \"webkit moz\",\n            \"border-end-color\"           : \"webkit moz\",\n            \"border-end-style\"           : \"webkit moz\",\n            \"border-end-width\"           : \"webkit moz\",\n            \"border-image\"               : \"webkit moz o\",\n            \"border-radius\"              : \"webkit\",\n            \"border-start\"               : \"webkit moz\",\n            \"border-start-color\"         : \"webkit moz\",\n            \"border-start-style\"         : \"webkit moz\",\n            \"border-start-width\"         : \"webkit moz\",\n            \"box-align\"                  : \"webkit moz ms\",\n            \"box-direction\"              : \"webkit moz ms\",\n            \"box-flex\"                   : \"webkit moz ms\",\n            \"box-lines\"                  : \"webkit ms\",\n            \"box-ordinal-group\"          : \"webkit moz ms\",\n            \"box-orient\"                 : \"webkit moz ms\",\n            \"box-pack\"                   : \"webkit moz ms\",\n            \"box-sizing\"                 : \"webkit moz\",\n            \"box-shadow\"                 : \"webkit moz\",\n            \"column-count\"               : \"webkit moz ms\",\n            \"column-gap\"                 : \"webkit moz ms\",\n            \"column-rule\"                : \"webkit moz ms\",\n            \"column-rule-color\"          : \"webkit moz ms\",\n            \"column-rule-style\"          : \"webkit moz ms\",\n            \"column-rule-width\"          : \"webkit moz ms\",\n            \"column-width\"               : \"webkit moz ms\",\n            \"hyphens\"                    : \"epub moz\",\n            \"line-break\"                 : \"webkit ms\",\n            \"margin-end\"                 : \"webkit moz\",\n            \"margin-start\"               : \"webkit moz\",\n            \"marquee-speed\"              : \"webkit wap\",\n            \"marquee-style\"              : \"webkit wap\",\n            \"padding-end\"                : \"webkit moz\",\n            \"padding-start\"              : \"webkit moz\",\n            \"tab-size\"                   : \"moz o\",\n            \"text-size-adjust\"           : \"webkit ms\",\n            \"transform\"                  : \"webkit moz ms o\",\n            \"transform-origin\"           : \"webkit moz ms o\",\n            \"transition\"                 : \"webkit moz o\",\n            \"transition-delay\"           : \"webkit moz o\",\n            \"transition-duration\"        : \"webkit moz o\",\n            \"transition-property\"        : \"webkit moz o\",\n            \"transition-timing-function\" : \"webkit moz o\",\n            \"user-modify\"                : \"webkit moz\",\n            \"user-select\"                : \"webkit moz ms\",\n            \"word-break\"                 : \"epub ms\",\n            \"writing-mode\"               : \"epub ms\"\n        };\n\n\n        for (prop in compatiblePrefixes) {\n            if (compatiblePrefixes.hasOwnProperty(prop)) {\n                variations = [];\n                prefixed = compatiblePrefixes[prop].split(' ');\n                for (i = 0, len = prefixed.length; i < len; i++) {\n                    variations.push('-' + prefixed[i] + '-' + prop);\n                }\n                compatiblePrefixes[prop] = variations;\n                arrayPush.apply(applyTo, variations);\n            }\n        }\n\n        parser.addListener(\"startrule\", function () {\n            properties = [];\n        });\n\n        parser.addListener(\"startkeyframes\", function (event) {\n            inKeyFrame = event.prefix || true;\n        });\n\n        parser.addListener(\"endkeyframes\", function (event) {\n            inKeyFrame = false;\n        });\n\n        parser.addListener(\"property\", function (event) {\n            var name = event.property;\n            if (CSSLint.Util.indexOf(applyTo, name.text) > -1) {\n\n                // e.g., -moz-transform is okay to be alone in @-moz-keyframes\n                if (!inKeyFrame || typeof inKeyFrame != \"string\" ||\n                        name.text.indexOf(\"-\" + inKeyFrame + \"-\") !== 0) {\n                    properties.push(name);\n                }\n            }\n        });\n\n        parser.addListener(\"endrule\", function (event) {\n            if (!properties.length) {\n                return;\n            }\n\n            var propertyGroups = {},\n                i,\n                len,\n                name,\n                prop,\n                variations,\n                value,\n                full,\n                actual,\n                item,\n                propertiesSpecified;\n\n            for (i = 0, len = properties.length; i < len; i++) {\n                name = properties[i];\n\n                for (prop in compatiblePrefixes) {\n                    if (compatiblePrefixes.hasOwnProperty(prop)) {\n                        variations = compatiblePrefixes[prop];\n                        if (CSSLint.Util.indexOf(variations, name.text) > -1) {\n                            if (!propertyGroups[prop]) {\n                                propertyGroups[prop] = {\n                                    full : variations.slice(0),\n                                    actual : [],\n                                    actualNodes: []\n                                };\n                            }\n                            if (CSSLint.Util.indexOf(propertyGroups[prop].actual, name.text) === -1) {\n                                propertyGroups[prop].actual.push(name.text);\n                                propertyGroups[prop].actualNodes.push(name);\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (prop in propertyGroups) {\n                if (propertyGroups.hasOwnProperty(prop)) {\n                    value = propertyGroups[prop];\n                    full = value.full;\n                    actual = value.actual;\n\n                    if (full.length > actual.length) {\n                        for (i = 0, len = full.length; i < len; i++) {\n                            item = full[i];\n                            if (CSSLint.Util.indexOf(actual, item) === -1) {\n                                propertiesSpecified = (actual.length === 1) ? actual[0] : (actual.length == 2) ? actual.join(\" and \") : actual.join(\", \");\n                                reporter.report(\"The property \" + item + \" is compatible with \" + propertiesSpecified + \" and should be included as well.\", value.actualNodes[0].line, value.actualNodes[0].col, rule);\n                            }\n                        }\n\n                    }\n                }\n            }\n        });\n    }\n});\n/*\n * Rule: Certain properties don't play well with certain display values.\n * - float should not be used with inline-block\n * - height, width, margin-top, margin-bottom, float should not be used with inline\n * - vertical-align should not be used with block\n * - margin, float should not be used with table-*\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"display-property-grouping\",\n    name: \"Require properties appropriate for display\",\n    desc: \"Certain properties shouldn't be used with certain display property values.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        var propertiesToCheck = {\n                display: 1,\n                \"float\": \"none\",\n                height: 1,\n                width: 1,\n                margin: 1,\n                \"margin-left\": 1,\n                \"margin-right\": 1,\n                \"margin-bottom\": 1,\n                \"margin-top\": 1,\n                padding: 1,\n                \"padding-left\": 1,\n                \"padding-right\": 1,\n                \"padding-bottom\": 1,\n                \"padding-top\": 1,\n                \"vertical-align\": 1\n            },\n            properties;\n\n        function reportProperty(name, display, msg){\n            if (properties[name]){\n                if (typeof propertiesToCheck[name] != \"string\" || properties[name].value.toLowerCase() != propertiesToCheck[name]){\n                    reporter.report(msg || name + \" can't be used with display: \" + display + \".\", properties[name].line, properties[name].col, rule);\n                }\n            }\n        }\n\n        function startRule(){\n            properties = {};\n        }\n\n        function endRule(){\n\n            var display = properties.display ? properties.display.value : null;\n            if (display){\n                switch(display){\n\n                    case \"inline\":\n                        //height, width, margin-top, margin-bottom, float should not be used with inline\n                        reportProperty(\"height\", display);\n                        reportProperty(\"width\", display);\n                        reportProperty(\"margin\", display);\n                        reportProperty(\"margin-top\", display);\n                        reportProperty(\"margin-bottom\", display);\n                        reportProperty(\"float\", display, \"display:inline has no effect on floated elements (but may be used to fix the IE6 double-margin bug).\");\n                        break;\n\n                    case \"block\":\n                        //vertical-align should not be used with block\n                        reportProperty(\"vertical-align\", display);\n                        break;\n\n                    case \"inline-block\":\n                        //float should not be used with inline-block\n                        reportProperty(\"float\", display);\n                        break;\n\n                    default:\n                        //margin, float should not be used with table\n                        if (display.indexOf(\"table-\") === 0){\n                            reportProperty(\"margin\", display);\n                            reportProperty(\"margin-left\", display);\n                            reportProperty(\"margin-right\", display);\n                            reportProperty(\"margin-top\", display);\n                            reportProperty(\"margin-bottom\", display);\n                            reportProperty(\"float\", display);\n                        }\n\n                        //otherwise do nothing\n                }\n            }\n\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n        parser.addListener(\"startkeyframerule\", startRule);\n        parser.addListener(\"startpagemargin\", startRule);\n        parser.addListener(\"startpage\", startRule);\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text.toLowerCase();\n\n            if (propertiesToCheck[name]){\n                properties[name] = { value: event.value.text, line: event.property.line, col: event.property.col };\n            }\n        });\n\n        parser.addListener(\"endrule\", endRule);\n        parser.addListener(\"endfontface\", endRule);\n        parser.addListener(\"endkeyframerule\", endRule);\n        parser.addListener(\"endpagemargin\", endRule);\n        parser.addListener(\"endpage\", endRule);\n\n    }\n\n});\n/*\n * Rule: Disallow duplicate background-images (using url).\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"duplicate-background-images\",\n    name: \"Disallow duplicate background images\",\n    desc: \"Every background-image should be unique. Use a common class for e.g. sprites.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            stack = {};\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text,\n                value = event.value,\n                i, len;\n\n            if (name.match(/background/i)) {\n                for (i=0, len=value.parts.length; i < len; i++) {\n                    if (value.parts[i].type == 'uri') {\n                        if (typeof stack[value.parts[i].uri] === 'undefined') {\n                            stack[value.parts[i].uri] = event;\n                        }\n                        else {\n                            reporter.report(\"Background image '\" + value.parts[i].uri + \"' was used multiple times, first declared at line \" + stack[value.parts[i].uri].line + \", col \" + stack[value.parts[i].uri].col + \".\", event.line, event.col, rule);\n                        }\n                    }\n                }\n            }\n        });\n    }\n});\n/*\n * Rule: Duplicate properties must appear one after the other. If an already-defined\n * property appears somewhere else in the rule, then it's likely an error.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"duplicate-properties\",\n    name: \"Disallow duplicate properties\",\n    desc: \"Duplicate properties must appear one after the other.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            properties,\n            lastProperty;\n\n        function startRule(event){\n            properties = {};\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n        parser.addListener(\"startpage\", startRule);\n        parser.addListener(\"startpagemargin\", startRule);\n        parser.addListener(\"startkeyframerule\", startRule);\n\n        parser.addListener(\"property\", function(event){\n            var property = event.property,\n                name = property.text.toLowerCase();\n\n            if (properties[name] && (lastProperty != name || properties[name] == event.value.text)){\n                reporter.report(\"Duplicate property '\" + event.property + \"' found.\", event.line, event.col, rule);\n            }\n\n            properties[name] = event.value.text;\n            lastProperty = name;\n\n        });\n\n\n    }\n\n});\n/*\n * Rule: Style rules without any properties defined should be removed.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"empty-rules\",\n    name: \"Disallow empty rules\",\n    desc: \"Rules without any properties specified should be removed.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            count = 0;\n\n        parser.addListener(\"startrule\", function(){\n            count=0;\n        });\n\n        parser.addListener(\"property\", function(){\n            count++;\n        });\n\n        parser.addListener(\"endrule\", function(event){\n            var selectors = event.selectors;\n            if (count === 0){\n                reporter.report(\"Rule is empty.\", selectors[0].line, selectors[0].col, rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: There should be no syntax errors. (Duh.)\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"errors\",\n    name: \"Parsing Errors\",\n    desc: \"This rule looks for recoverable syntax errors.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"error\", function(event){\n            reporter.error(event.message, event.line, event.col, rule);\n        });\n\n    }\n\n});\n\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"fallback-colors\",\n    name: \"Require fallback colors\",\n    desc: \"For older browsers that don't support RGBA, HSL, or HSLA, provide a fallback color.\",\n    browsers: \"IE6,IE7,IE8\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            lastProperty,\n            propertiesToCheck = {\n                color: 1,\n                background: 1,\n                \"border-color\": 1,\n                \"border-top-color\": 1,\n                \"border-right-color\": 1,\n                \"border-bottom-color\": 1,\n                \"border-left-color\": 1,\n                border: 1,\n                \"border-top\": 1,\n                \"border-right\": 1,\n                \"border-bottom\": 1,\n                \"border-left\": 1,\n                \"background-color\": 1\n            },\n            properties;\n\n        function startRule(event){\n            properties = {};\n            lastProperty = null;\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n        parser.addListener(\"startpage\", startRule);\n        parser.addListener(\"startpagemargin\", startRule);\n        parser.addListener(\"startkeyframerule\", startRule);\n\n        parser.addListener(\"property\", function(event){\n            var property = event.property,\n                name = property.text.toLowerCase(),\n                parts = event.value.parts,\n                i = 0,\n                colorType = \"\",\n                len = parts.length;\n\n            if(propertiesToCheck[name]){\n                while(i < len){\n                    if (parts[i].type == \"color\"){\n                        if (\"alpha\" in parts[i] || \"hue\" in parts[i]){\n\n                            if (/([^\\)]+)\\(/.test(parts[i])){\n                                colorType = RegExp.$1.toUpperCase();\n                            }\n\n                            if (!lastProperty || (lastProperty.property.text.toLowerCase() != name || lastProperty.colorType != \"compat\")){\n                                reporter.report(\"Fallback \" + name + \" (hex or RGB) should precede \" + colorType + \" \" + name + \".\", event.line, event.col, rule);\n                            }\n                        } else {\n                            event.colorType = \"compat\";\n                        }\n                    }\n\n                    i++;\n                }\n            }\n\n            lastProperty = event;\n        });\n\n    }\n\n});\n/*\n * Rule: You shouldn't use more than 10 floats. If you do, there's probably\n * room for some abstraction.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"floats\",\n    name: \"Disallow too many floats\",\n    desc: \"This rule tests if the float property is used too many times\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n        var count = 0;\n\n        //count how many times \"float\" is used\n        parser.addListener(\"property\", function(event){\n            if (event.property.text.toLowerCase() == \"float\" &&\n                    event.value.text.toLowerCase() != \"none\"){\n                count++;\n            }\n        });\n\n        //report the results\n        parser.addListener(\"endstylesheet\", function(){\n            reporter.stat(\"floats\", count);\n            if (count >= 10){\n                reporter.rollupWarn(\"Too many floats (\" + count + \"), you're probably using them for layout. Consider using a grid system instead.\", rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: Avoid too many @font-face declarations in the same stylesheet.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"font-faces\",\n    name: \"Don't use too many web fonts\",\n    desc: \"Too many different web fonts in the same stylesheet.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            count = 0;\n\n\n        parser.addListener(\"startfontface\", function(){\n            count++;\n        });\n\n        parser.addListener(\"endstylesheet\", function(){\n            if (count > 5){\n                reporter.rollupWarn(\"Too many @font-face declarations (\" + count + \").\", rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: You shouldn't need more than 9 font-size declarations.\n */\n\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"font-sizes\",\n    name: \"Disallow too many font sizes\",\n    desc: \"Checks the number of font-size declarations.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            count = 0;\n\n        //check for use of \"font-size\"\n        parser.addListener(\"property\", function(event){\n            if (event.property == \"font-size\"){\n                count++;\n            }\n        });\n\n        //report the results\n        parser.addListener(\"endstylesheet\", function(){\n            reporter.stat(\"font-sizes\", count);\n            if (count >= 10){\n                reporter.rollupWarn(\"Too many font-size declarations (\" + count + \"), abstraction needed.\", rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: When using a vendor-prefixed gradient, make sure to use them all.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"gradients\",\n    name: \"Require all gradient definitions\",\n    desc: \"When using a vendor-prefixed gradient, make sure to use them all.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            gradients;\n\n        parser.addListener(\"startrule\", function(){\n            gradients = {\n                moz: 0,\n                webkit: 0,\n                oldWebkit: 0,\n                o: 0\n            };\n        });\n\n        parser.addListener(\"property\", function(event){\n\n            if (/\\-(moz|o|webkit)(?:\\-(?:linear|radial))\\-gradient/i.test(event.value)){\n                gradients[RegExp.$1] = 1;\n            } else if (/\\-webkit\\-gradient/i.test(event.value)){\n                gradients.oldWebkit = 1;\n            }\n\n        });\n\n        parser.addListener(\"endrule\", function(event){\n            var missing = [];\n\n            if (!gradients.moz){\n                missing.push(\"Firefox 3.6+\");\n            }\n\n            if (!gradients.webkit){\n                missing.push(\"Webkit (Safari 5+, Chrome)\");\n            }\n\n            if (!gradients.oldWebkit){\n                missing.push(\"Old Webkit (Safari 4+, Chrome)\");\n            }\n\n            if (!gradients.o){\n                missing.push(\"Opera 11.1+\");\n            }\n\n            if (missing.length && missing.length < 4){\n                reporter.report(\"Missing vendor-prefixed CSS gradients for \" + missing.join(\", \") + \".\", event.selectors[0].line, event.selectors[0].col, rule);\n            }\n\n        });\n\n    }\n\n});\n\n/*\n * Rule: Don't use IDs for selectors.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"ids\",\n    name: \"Disallow IDs in selectors\",\n    desc: \"Selectors should not contain IDs.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                modifier,\n                idCount,\n                i, j, k;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n                idCount = 0;\n\n                for (j=0; j < selector.parts.length; j++){\n                    part = selector.parts[j];\n                    if (part.type == parser.SELECTOR_PART_TYPE){\n                        for (k=0; k < part.modifiers.length; k++){\n                            modifier = part.modifiers[k];\n                            if (modifier.type == \"id\"){\n                                idCount++;\n                            }\n                        }\n                    }\n                }\n\n                if (idCount == 1){\n                    reporter.report(\"Don't use IDs in selectors.\", selector.line, selector.col, rule);\n                } else if (idCount > 1){\n                    reporter.report(idCount + \" IDs in the selector, really?\", selector.line, selector.col, rule);\n                }\n            }\n\n        });\n    }\n\n});\n/*\n * Rule: Don't use @import, use <link> instead.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"import\",\n    name: \"Disallow @import\",\n    desc: \"Don't use @import, use <link> instead.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"import\", function(event){\n            reporter.report(\"@import prevents parallel downloads, use <link> instead.\", event.line, event.col, rule);\n        });\n\n    }\n\n});\n/*\n * Rule: Make sure !important is not overused, this could lead to specificity\n * war. Display a warning on !important declarations, an error if it's\n * used more at least 10 times.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"important\",\n    name: \"Disallow !important\",\n    desc: \"Be careful when using !important declaration\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            count = 0;\n\n        //warn that important is used and increment the declaration counter\n        parser.addListener(\"property\", function(event){\n            if (event.important === true){\n                count++;\n                reporter.report(\"Use of !important\", event.line, event.col, rule);\n            }\n        });\n\n        //if there are more than 10, show an error\n        parser.addListener(\"endstylesheet\", function(){\n            reporter.stat(\"important\", count);\n            if (count >= 10){\n                reporter.rollupWarn(\"Too many !important declarations (\" + count + \"), try to use less than 10 to avoid specificity issues.\", rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: Properties should be known (listed in CSS3 specification) or\n * be a vendor-prefixed property.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"known-properties\",\n    name: \"Require use of known properties\",\n    desc: \"Properties should be known (listed in CSS3 specification) or be a vendor-prefixed property.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text.toLowerCase();\n\n            // the check is handled entirely by the parser-lib (https://github.com/nzakas/parser-lib)\n            if (event.invalid) {\n                reporter.report(event.invalid.message, event.line, event.col, rule);\n            }\n\n        });\n    }\n\n});\n/*\n * Rule: outline: none or outline: 0 should only be used in a :focus rule\n *       and only if there are other properties in the same rule.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"outline-none\",\n    name: \"Disallow outline: none\",\n    desc: \"Use of outline: none or outline: 0 should be limited to :focus rules.\",\n    browsers: \"All\",\n    tags: [\"Accessibility\"],\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            lastRule;\n\n        function startRule(event){\n            if (event.selectors){\n                lastRule = {\n                    line: event.line,\n                    col: event.col,\n                    selectors: event.selectors,\n                    propCount: 0,\n                    outline: false\n                };\n            } else {\n                lastRule = null;\n            }\n        }\n\n        function endRule(event){\n            if (lastRule){\n                if (lastRule.outline){\n                    if (lastRule.selectors.toString().toLowerCase().indexOf(\":focus\") == -1){\n                        reporter.report(\"Outlines should only be modified using :focus.\", lastRule.line, lastRule.col, rule);\n                    } else if (lastRule.propCount == 1) {\n                        reporter.report(\"Outlines shouldn't be hidden unless other visual changes are made.\", lastRule.line, lastRule.col, rule);\n                    }\n                }\n            }\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n        parser.addListener(\"startpage\", startRule);\n        parser.addListener(\"startpagemargin\", startRule);\n        parser.addListener(\"startkeyframerule\", startRule);\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text.toLowerCase(),\n                value = event.value;\n\n            if (lastRule){\n                lastRule.propCount++;\n                if (name == \"outline\" && (value == \"none\" || value == \"0\")){\n                    lastRule.outline = true;\n                }\n            }\n\n        });\n\n        parser.addListener(\"endrule\", endRule);\n        parser.addListener(\"endfontface\", endRule);\n        parser.addListener(\"endpage\", endRule);\n        parser.addListener(\"endpagemargin\", endRule);\n        parser.addListener(\"endkeyframerule\", endRule);\n\n    }\n\n});\n/*\n * Rule: Don't use classes or IDs with elements (a.foo or a#foo).\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"overqualified-elements\",\n    name: \"Disallow overqualified elements\",\n    desc: \"Don't use classes or IDs with elements (a.foo or a#foo).\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            classes = {};\n\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                modifier,\n                i, j, k;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n\n                for (j=0; j < selector.parts.length; j++){\n                    part = selector.parts[j];\n                    if (part.type == parser.SELECTOR_PART_TYPE){\n                        for (k=0; k < part.modifiers.length; k++){\n                            modifier = part.modifiers[k];\n                            if (part.elementName && modifier.type == \"id\"){\n                                reporter.report(\"Element (\" + part + \") is overqualified, just use \" + modifier + \" without element name.\", part.line, part.col, rule);\n                            } else if (modifier.type == \"class\"){\n\n                                if (!classes[modifier]){\n                                    classes[modifier] = [];\n                                }\n                                classes[modifier].push({ modifier: modifier, part: part });\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        parser.addListener(\"endstylesheet\", function(){\n\n            var prop;\n            for (prop in classes){\n                if (classes.hasOwnProperty(prop)){\n\n                    //one use means that this is overqualified\n                    if (classes[prop].length == 1 && classes[prop][0].part.elementName){\n                        reporter.report(\"Element (\" + classes[prop][0].part + \") is overqualified, just use \" + classes[prop][0].modifier + \" without element name.\", classes[prop][0].part.line, classes[prop][0].part.col, rule);\n                    }\n                }\n            }\n        });\n    }\n\n});\n/*\n * Rule: Headings (h1-h6) should not be qualified (namespaced).\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"qualified-headings\",\n    name: \"Disallow qualified headings\",\n    desc: \"Headings should not be qualified (namespaced).\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                i, j;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n\n                for (j=0; j < selector.parts.length; j++){\n                    part = selector.parts[j];\n                    if (part.type == parser.SELECTOR_PART_TYPE){\n                        if (part.elementName && /h[1-6]/.test(part.elementName.toString()) && j > 0){\n                            reporter.report(\"Heading (\" + part.elementName + \") should not be qualified.\", part.line, part.col, rule);\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n});\n/*\n * Rule: Selectors that look like regular expressions are slow and should be avoided.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"regex-selectors\",\n    name: \"Disallow selectors that look like regexs\",\n    desc: \"Selectors that look like regular expressions are slow and should be avoided.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                modifier,\n                i, j, k;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n                for (j=0; j < selector.parts.length; j++){\n                    part = selector.parts[j];\n                    if (part.type == parser.SELECTOR_PART_TYPE){\n                        for (k=0; k < part.modifiers.length; k++){\n                            modifier = part.modifiers[k];\n                            if (modifier.type == \"attribute\"){\n                                if (/([\\~\\|\\^\\$\\*]=)/.test(modifier)){\n                                    reporter.report(\"Attribute selectors with \" + RegExp.$1 + \" are slow!\", modifier.line, modifier.col, rule);\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n});\n/*\n * Rule: Total number of rules should not exceed x.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"rules-count\",\n    name: \"Rules Count\",\n    desc: \"Track how many rules there are.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            count = 0;\n\n        //count each rule\n        parser.addListener(\"startrule\", function(){\n            count++;\n        });\n\n        parser.addListener(\"endstylesheet\", function(){\n            reporter.stat(\"rule-count\", count);\n        });\n    }\n\n});\n/*\n * Rule: Warn people with approaching the IE 4095 limit\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"selector-max-approaching\",\n    name: \"Warn when approaching the 4095 selector limit for IE\",\n    desc: \"Will warn when selector count is >= 3800 selectors.\",\n    browsers: \"IE\",\n\n    //initialization\n    init: function(parser, reporter) {\n        var rule = this, count = 0;\n\n        parser.addListener('startrule', function(event) {\n            count += event.selectors.length;\n        });\n\n        parser.addListener(\"endstylesheet\", function() {\n            if (count >= 3800) {\n                reporter.report(\"You have \" + count + \" selectors. Internet Explorer supports a maximum of 4095 selectors per stylesheet. Consider refactoring.\",0,0,rule);\n            }\n        });\n    }\n\n});\n\n/*\n * Rule: Warn people past the IE 4095 limit\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"selector-max\",\n    name: \"Error when past the 4095 selector limit for IE\",\n    desc: \"Will error when selector count is > 4095.\",\n    browsers: \"IE\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this, count = 0;\n\n        parser.addListener('startrule',function(event) {\n            count += event.selectors.length;\n        });\n\n        parser.addListener(\"endstylesheet\", function() {\n            if (count > 4095) {\n                reporter.report(\"You have \" + count + \" selectors. Internet Explorer supports a maximum of 4095 selectors per stylesheet. Consider refactoring.\",0,0,rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: Use shorthand properties where possible.\n *\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"shorthand\",\n    name: \"Require shorthand properties\",\n    desc: \"Use shorthand properties where possible.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            prop, i, len,\n            propertiesToCheck = {},\n            properties,\n            mapping = {\n                \"margin\": [\n                    \"margin-top\",\n                    \"margin-bottom\",\n                    \"margin-left\",\n                    \"margin-right\"\n                ],\n                \"padding\": [\n                    \"padding-top\",\n                    \"padding-bottom\",\n                    \"padding-left\",\n                    \"padding-right\"\n                ]\n            };\n\n        //initialize propertiesToCheck\n        for (prop in mapping){\n            if (mapping.hasOwnProperty(prop)){\n                for (i=0, len=mapping[prop].length; i < len; i++){\n                    propertiesToCheck[mapping[prop][i]] = prop;\n                }\n            }\n        }\n\n        function startRule(event){\n            properties = {};\n        }\n\n        //event handler for end of rules\n        function endRule(event){\n\n            var prop, i, len, total;\n\n            //check which properties this rule has\n            for (prop in mapping){\n                if (mapping.hasOwnProperty(prop)){\n                    total=0;\n\n                    for (i=0, len=mapping[prop].length; i < len; i++){\n                        total += properties[mapping[prop][i]] ? 1 : 0;\n                    }\n\n                    if (total == mapping[prop].length){\n                        reporter.report(\"The properties \" + mapping[prop].join(\", \") + \" can be replaced by \" + prop + \".\", event.line, event.col, rule);\n                    }\n                }\n            }\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n\n        //check for use of \"font-size\"\n        parser.addListener(\"property\", function(event){\n            var name = event.property.toString().toLowerCase(),\n                value = event.value.parts[0].value;\n\n            if (propertiesToCheck[name]){\n                properties[name] = 1;\n            }\n        });\n\n        parser.addListener(\"endrule\", endRule);\n        parser.addListener(\"endfontface\", endRule);\n\n    }\n\n});\n/*\n * Rule: Don't use properties with a star prefix.\n *\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"star-property-hack\",\n    name: \"Disallow properties with a star prefix\",\n    desc: \"Checks for the star property hack (targets IE6/7)\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        //check if property name starts with \"*\"\n        parser.addListener(\"property\", function(event){\n            var property = event.property;\n\n            if (property.hack == \"*\") {\n                reporter.report(\"Property with star prefix found.\", event.property.line, event.property.col, rule);\n            }\n        });\n    }\n});\n/*\n * Rule: Don't use text-indent for image replacement if you need to support rtl.\n *\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"text-indent\",\n    name: \"Disallow negative text-indent\",\n    desc: \"Checks for text indent less than -99px\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            textIndent,\n            direction;\n\n\n        function startRule(event){\n            textIndent = false;\n            direction = \"inherit\";\n        }\n\n        //event handler for end of rules\n        function endRule(event){\n            if (textIndent && direction != \"ltr\"){\n                reporter.report(\"Negative text-indent doesn't work well with RTL. If you use text-indent for image replacement explicitly set direction for that item to ltr.\", textIndent.line, textIndent.col, rule);\n            }\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n\n        //check for use of \"font-size\"\n        parser.addListener(\"property\", function(event){\n            var name = event.property.toString().toLowerCase(),\n                value = event.value;\n\n            if (name == \"text-indent\" && value.parts[0].value < -99){\n                textIndent = event.property;\n            } else if (name == \"direction\" && value == \"ltr\"){\n                direction = \"ltr\";\n            }\n        });\n\n        parser.addListener(\"endrule\", endRule);\n        parser.addListener(\"endfontface\", endRule);\n\n    }\n\n});\n/*\n * Rule: Don't use properties with a underscore prefix.\n *\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"underscore-property-hack\",\n    name: \"Disallow properties with an underscore prefix\",\n    desc: \"Checks for the underscore property hack (targets IE6)\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        //check if property name starts with \"_\"\n        parser.addListener(\"property\", function(event){\n            var property = event.property;\n\n            if (property.hack == \"_\") {\n                reporter.report(\"Property with underscore prefix found.\", event.property.line, event.property.col, rule);\n            }\n        });\n    }\n});\n/*\n * Rule: Headings (h1-h6) should be defined only once.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"unique-headings\",\n    name: \"Headings should only be defined once\",\n    desc: \"Headings should be defined only once.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        var headings =  {\n                h1: 0,\n                h2: 0,\n                h3: 0,\n                h4: 0,\n                h5: 0,\n                h6: 0\n            };\n\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                pseudo,\n                i, j;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n                part = selector.parts[selector.parts.length-1];\n\n                if (part.elementName && /(h[1-6])/i.test(part.elementName.toString())){\n\n                    for (j=0; j < part.modifiers.length; j++){\n                        if (part.modifiers[j].type == \"pseudo\"){\n                            pseudo = true;\n                            break;\n                        }\n                    }\n\n                    if (!pseudo){\n                        headings[RegExp.$1]++;\n                        if (headings[RegExp.$1] > 1) {\n                            reporter.report(\"Heading (\" + part.elementName + \") has already been defined.\", part.line, part.col, rule);\n                        }\n                    }\n                }\n            }\n        });\n\n        parser.addListener(\"endstylesheet\", function(event){\n            var prop,\n                messages = [];\n\n            for (prop in headings){\n                if (headings.hasOwnProperty(prop)){\n                    if (headings[prop] > 1){\n                        messages.push(headings[prop] + \" \" + prop + \"s\");\n                    }\n                }\n            }\n\n            if (messages.length){\n                reporter.rollupWarn(\"You have \" + messages.join(\", \") + \" defined in this stylesheet.\", rule);\n            }\n        });\n    }\n\n});\n/*\n * Rule: Don't use universal selector because it's slow.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"universal-selector\",\n    name: \"Disallow universal selector\",\n    desc: \"The universal selector (*) is known to be slow.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"startrule\", function(event){\n            var selectors = event.selectors,\n                selector,\n                part,\n                modifier,\n                i, j, k;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n\n                part = selector.parts[selector.parts.length-1];\n                if (part.elementName == \"*\"){\n                    reporter.report(rule.desc, part.line, part.col, rule);\n                }\n            }\n        });\n    }\n\n});\n/*\n * Rule: Don't use unqualified attribute selectors because they're just like universal selectors.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"unqualified-attributes\",\n    name: \"Disallow unqualified attribute selectors\",\n    desc: \"Unqualified attribute selectors are known to be slow.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        parser.addListener(\"startrule\", function(event){\n\n            var selectors = event.selectors,\n                selector,\n                part,\n                modifier,\n                i, j, k;\n\n            for (i=0; i < selectors.length; i++){\n                selector = selectors[i];\n\n                part = selector.parts[selector.parts.length-1];\n                if (part.type == parser.SELECTOR_PART_TYPE){\n                    for (k=0; k < part.modifiers.length; k++){\n                        modifier = part.modifiers[k];\n                        if (modifier.type == \"attribute\" && (!part.elementName || part.elementName == \"*\")){\n                            reporter.report(rule.desc, part.line, part.col, rule);\n                        }\n                    }\n                }\n\n            }\n        });\n    }\n\n});\n/*\n * Rule: When using a vendor-prefixed property, make sure to\n * include the standard one.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"vendor-prefix\",\n    name: \"Require standard property with vendor prefix\",\n    desc: \"When using a vendor-prefixed property, make sure to include the standard one.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this,\n            properties,\n            num,\n            propertiesToCheck = {\n                \"-webkit-border-radius\": \"border-radius\",\n                \"-webkit-border-top-left-radius\": \"border-top-left-radius\",\n                \"-webkit-border-top-right-radius\": \"border-top-right-radius\",\n                \"-webkit-border-bottom-left-radius\": \"border-bottom-left-radius\",\n                \"-webkit-border-bottom-right-radius\": \"border-bottom-right-radius\",\n\n                \"-o-border-radius\": \"border-radius\",\n                \"-o-border-top-left-radius\": \"border-top-left-radius\",\n                \"-o-border-top-right-radius\": \"border-top-right-radius\",\n                \"-o-border-bottom-left-radius\": \"border-bottom-left-radius\",\n                \"-o-border-bottom-right-radius\": \"border-bottom-right-radius\",\n\n                \"-moz-border-radius\": \"border-radius\",\n                \"-moz-border-radius-topleft\": \"border-top-left-radius\",\n                \"-moz-border-radius-topright\": \"border-top-right-radius\",\n                \"-moz-border-radius-bottomleft\": \"border-bottom-left-radius\",\n                \"-moz-border-radius-bottomright\": \"border-bottom-right-radius\",\n\n                \"-moz-column-count\": \"column-count\",\n                \"-webkit-column-count\": \"column-count\",\n\n                \"-moz-column-gap\": \"column-gap\",\n                \"-webkit-column-gap\": \"column-gap\",\n\n                \"-moz-column-rule\": \"column-rule\",\n                \"-webkit-column-rule\": \"column-rule\",\n\n                \"-moz-column-rule-style\": \"column-rule-style\",\n                \"-webkit-column-rule-style\": \"column-rule-style\",\n\n                \"-moz-column-rule-color\": \"column-rule-color\",\n                \"-webkit-column-rule-color\": \"column-rule-color\",\n\n                \"-moz-column-rule-width\": \"column-rule-width\",\n                \"-webkit-column-rule-width\": \"column-rule-width\",\n\n                \"-moz-column-width\": \"column-width\",\n                \"-webkit-column-width\": \"column-width\",\n\n                \"-webkit-column-span\": \"column-span\",\n                \"-webkit-columns\": \"columns\",\n\n                \"-moz-box-shadow\": \"box-shadow\",\n                \"-webkit-box-shadow\": \"box-shadow\",\n\n                \"-moz-transform\" : \"transform\",\n                \"-webkit-transform\" : \"transform\",\n                \"-o-transform\" : \"transform\",\n                \"-ms-transform\" : \"transform\",\n\n                \"-moz-transform-origin\" : \"transform-origin\",\n                \"-webkit-transform-origin\" : \"transform-origin\",\n                \"-o-transform-origin\" : \"transform-origin\",\n                \"-ms-transform-origin\" : \"transform-origin\",\n\n                \"-moz-box-sizing\" : \"box-sizing\",\n                \"-webkit-box-sizing\" : \"box-sizing\",\n\n                \"-moz-user-select\" : \"user-select\",\n                \"-khtml-user-select\" : \"user-select\",\n                \"-webkit-user-select\" : \"user-select\"\n            };\n\n        //event handler for beginning of rules\n        function startRule(){\n            properties = {};\n            num=1;\n        }\n\n        //event handler for end of rules\n        function endRule(event){\n            var prop,\n                i, len,\n                standard,\n                needed,\n                actual,\n                needsStandard = [];\n\n            for (prop in properties){\n                if (propertiesToCheck[prop]){\n                    needsStandard.push({ actual: prop, needed: propertiesToCheck[prop]});\n                }\n            }\n\n            for (i=0, len=needsStandard.length; i < len; i++){\n                needed = needsStandard[i].needed;\n                actual = needsStandard[i].actual;\n\n                if (!properties[needed]){\n                    reporter.report(\"Missing standard property '\" + needed + \"' to go along with '\" + actual + \"'.\", properties[actual][0].name.line, properties[actual][0].name.col, rule);\n                } else {\n                    //make sure standard property is last\n                    if (properties[needed][0].pos < properties[actual][0].pos){\n                        reporter.report(\"Standard property '\" + needed + \"' should come after vendor-prefixed property '\" + actual + \"'.\", properties[actual][0].name.line, properties[actual][0].name.col, rule);\n                    }\n                }\n            }\n\n        }\n\n        parser.addListener(\"startrule\", startRule);\n        parser.addListener(\"startfontface\", startRule);\n        parser.addListener(\"startpage\", startRule);\n        parser.addListener(\"startpagemargin\", startRule);\n        parser.addListener(\"startkeyframerule\", startRule);\n\n        parser.addListener(\"property\", function(event){\n            var name = event.property.text.toLowerCase();\n\n            if (!properties[name]){\n                properties[name] = [];\n            }\n\n            properties[name].push({ name: event.property, value : event.value, pos:num++ });\n        });\n\n        parser.addListener(\"endrule\", endRule);\n        parser.addListener(\"endfontface\", endRule);\n        parser.addListener(\"endpage\", endRule);\n        parser.addListener(\"endpagemargin\", endRule);\n        parser.addListener(\"endkeyframerule\", endRule);\n    }\n\n});\n/*\n * Rule: You don't need to specify units when a value is 0.\n */\n/*global CSSLint*/\nCSSLint.addRule({\n\n    //rule information\n    id: \"zero-units\",\n    name: \"Disallow units for 0 values\",\n    desc: \"You don't need to specify units when a value is 0.\",\n    browsers: \"All\",\n\n    //initialization\n    init: function(parser, reporter){\n        var rule = this;\n\n        //count how many times \"float\" is used\n        parser.addListener(\"property\", function(event){\n            var parts = event.value.parts,\n                i = 0,\n                len = parts.length;\n\n            while(i < len){\n                if ((parts[i].units || parts[i].type == \"percentage\") && parts[i].value === 0 && parts[i].type != \"time\"){\n                    reporter.report(\"Values of 0 shouldn't have units specified.\", parts[i].line, parts[i].col, rule);\n                }\n                i++;\n            }\n\n        });\n\n    }\n\n});\n/*global CSSLint*/\n(function() {\n\n    /**\n     * Replace special characters before write to output.\n     *\n     * Rules:\n     *  - single quotes is the escape sequence for double-quotes\n     *  - &amp; is the escape sequence for &\n     *  - &lt; is the escape sequence for <\n     *  - &gt; is the escape sequence for >\n     *\n     * @param {String} message to escape\n     * @return escaped message as {String}\n     */\n    var xmlEscape = function(str) {\n        if (!str || str.constructor !== String) {\n            return \"\";\n        }\n\n        return str.replace(/[\\\"&><]/g, function(match) {\n            switch (match) {\n                case \"\\\"\":\n                    return \"&quot;\";\n                case \"&\":\n                    return \"&amp;\";\n                case \"<\":\n                    return \"&lt;\";\n                case \">\":\n                    return \"&gt;\";\n            }\n        });\n    };\n\n    CSSLint.addFormatter({\n        //format information\n        id: \"checkstyle-xml\",\n        name: \"Checkstyle XML format\",\n\n        /**\n         * Return opening root XML tag.\n         * @return {String} to prepend before all results\n         */\n        startFormat: function(){\n            return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><checkstyle>\";\n        },\n\n        /**\n         * Return closing root XML tag.\n         * @return {String} to append after all results\n         */\n        endFormat: function(){\n            return \"</checkstyle>\";\n        },\n\n        /**\n         * Returns message when there is a file read error.\n         * @param {String} filename The name of the file that caused the error.\n         * @param {String} message The error message\n         * @return {String} The error message.\n         */\n        readError: function(filename, message) {\n            return \"<file name=\\\"\" + xmlEscape(filename) + \"\\\"><error line=\\\"0\\\" column=\\\"0\\\" severty=\\\"error\\\" message=\\\"\" + xmlEscape(message) + \"\\\"></error></file>\";\n        },\n\n        /**\n         * Given CSS Lint results for a file, return output for this format.\n         * @param results {Object} with error and warning messages\n         * @param filename {String} relative file path\n         * @param options {Object} (UNUSED for now) specifies special handling of output\n         * @return {String} output for results\n         */\n        formatResults: function(results, filename, options) {\n            var messages = results.messages,\n                output = [];\n\n            /**\n             * Generate a source string for a rule.\n             * Checkstyle source strings usually resemble Java class names e.g\n             * net.csslint.SomeRuleName\n             * @param {Object} rule\n             * @return rule source as {String}\n             */\n            var generateSource = function(rule) {\n                if (!rule || !('name' in rule)) {\n                    return \"\";\n                }\n                return 'net.csslint.' + rule.name.replace(/\\s/g,'');\n            };\n\n\n\n            if (messages.length > 0) {\n                output.push(\"<file name=\\\"\"+filename+\"\\\">\");\n                CSSLint.Util.forEach(messages, function (message, i) {\n                    //ignore rollups for now\n                    if (!message.rollup) {\n                      output.push(\"<error line=\\\"\" + message.line + \"\\\" column=\\\"\" + message.col + \"\\\" severity=\\\"\" + message.type + \"\\\"\" +\n                          \" message=\\\"\" + xmlEscape(message.message) + \"\\\" source=\\\"\" + generateSource(message.rule) +\"\\\"/>\");\n                    }\n                });\n                output.push(\"</file>\");\n            }\n\n            return output.join(\"\");\n        }\n    });\n\n}());\n/*global CSSLint*/\nCSSLint.addFormatter({\n    //format information\n    id: \"compact\",\n    name: \"Compact, 'porcelain' format\",\n\n    /**\n     * Return content to be printed before all file results.\n     * @return {String} to prepend before all results\n     */\n    startFormat: function() {\n        return \"\";\n    },\n\n    /**\n     * Return content to be printed after all file results.\n     * @return {String} to append after all results\n     */\n    endFormat: function() {\n        return \"\";\n    },\n\n    /**\n     * Given CSS Lint results for a file, return output for this format.\n     * @param results {Object} with error and warning messages\n     * @param filename {String} relative file path\n     * @param options {Object} (Optional) specifies special handling of output\n     * @return {String} output for results\n     */\n    formatResults: function(results, filename, options) {\n        var messages = results.messages,\n            output = \"\";\n        options = options || {};\n\n        /**\n         * Capitalize and return given string.\n         * @param str {String} to capitalize\n         * @return {String} capitalized\n         */\n        var capitalize = function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        };\n\n        if (messages.length === 0) {\n            return options.quiet ? \"\" : filename + \": Lint Free!\";\n        }\n\n        CSSLint.Util.forEach(messages, function(message, i) {\n            if (message.rollup) {\n                output += filename + \": \" + capitalize(message.type) + \" - \" + message.message + \"\\n\";\n            } else {\n                output += filename + \": \" + \"line \" + message.line +\n                    \", col \" + message.col + \", \" + capitalize(message.type) + \" - \" + message.message + \"\\n\";\n            }\n        });\n\n        return output;\n    }\n});\n/*global CSSLint*/\nCSSLint.addFormatter({\n    //format information\n    id: \"csslint-xml\",\n    name: \"CSSLint XML format\",\n\n    /**\n     * Return opening root XML tag.\n     * @return {String} to prepend before all results\n     */\n    startFormat: function(){\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><csslint>\";\n    },\n\n    /**\n     * Return closing root XML tag.\n     * @return {String} to append after all results\n     */\n    endFormat: function(){\n        return \"</csslint>\";\n    },\n\n    /**\n     * Given CSS Lint results for a file, return output for this format.\n     * @param results {Object} with error and warning messages\n     * @param filename {String} relative file path\n     * @param options {Object} (UNUSED for now) specifies special handling of output\n     * @return {String} output for results\n     */\n    formatResults: function(results, filename, options) {\n        var messages = results.messages,\n            output = [];\n\n        /**\n         * Replace special characters before write to output.\n         *\n         * Rules:\n         *  - single quotes is the escape sequence for double-quotes\n         *  - &amp; is the escape sequence for &\n         *  - &lt; is the escape sequence for <\n         *  - &gt; is the escape sequence for >\n         *\n         * @param {String} message to escape\n         * @return escaped message as {String}\n         */\n        var escapeSpecialCharacters = function(str) {\n            if (!str || str.constructor !== String) {\n                return \"\";\n            }\n            return str.replace(/\\\"/g, \"'\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        };\n\n        if (messages.length > 0) {\n            output.push(\"<file name=\\\"\"+filename+\"\\\">\");\n            CSSLint.Util.forEach(messages, function (message, i) {\n                if (message.rollup) {\n                    output.push(\"<issue severity=\\\"\" + message.type + \"\\\" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n                } else {\n                    output.push(\"<issue line=\\\"\" + message.line + \"\\\" char=\\\"\" + message.col + \"\\\" severity=\\\"\" + message.type + \"\\\"\" +\n                        \" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n                }\n            });\n            output.push(\"</file>\");\n        }\n\n        return output.join(\"\");\n    }\n});\n/*global CSSLint*/\nCSSLint.addFormatter({\n    //format information\n    id: \"junit-xml\",\n    name: \"JUNIT XML format\",\n\n    /**\n     * Return opening root XML tag.\n     * @return {String} to prepend before all results\n     */\n    startFormat: function(){\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><testsuites>\";\n    },\n\n    /**\n     * Return closing root XML tag.\n     * @return {String} to append after all results\n     */\n    endFormat: function() {\n        return \"</testsuites>\";\n    },\n\n    /**\n     * Given CSS Lint results for a file, return output for this format.\n     * @param results {Object} with error and warning messages\n     * @param filename {String} relative file path\n     * @param options {Object} (UNUSED for now) specifies special handling of output\n     * @return {String} output for results\n     */\n    formatResults: function(results, filename, options) {\n\n        var messages = results.messages,\n            output = [],\n            tests = {\n                'error': 0,\n                'failure': 0\n            };\n\n        /**\n         * Generate a source string for a rule.\n         * JUNIT source strings usually resemble Java class names e.g\n         * net.csslint.SomeRuleName\n         * @param {Object} rule\n         * @return rule source as {String}\n         */\n        var generateSource = function(rule) {\n            if (!rule || !('name' in rule)) {\n                return \"\";\n            }\n            return 'net.csslint.' + rule.name.replace(/\\s/g,'');\n        };\n\n        /**\n         * Replace special characters before write to output.\n         *\n         * Rules:\n         *  - single quotes is the escape sequence for double-quotes\n         *  - &lt; is the escape sequence for <\n         *  - &gt; is the escape sequence for >\n         *\n         * @param {String} message to escape\n         * @return escaped message as {String}\n         */\n        var escapeSpecialCharacters = function(str) {\n\n            if (!str || str.constructor !== String) {\n                return \"\";\n            }\n\n            return str.replace(/\\\"/g, \"'\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\n        };\n\n        if (messages.length > 0) {\n\n            messages.forEach(function (message, i) {\n\n                // since junit has no warning class\n                // all issues as errors\n                var type = message.type === 'warning' ? 'error' : message.type;\n\n                //ignore rollups for now\n                if (!message.rollup) {\n\n                    // build the test case seperately, once joined\n                    // we'll add it to a custom array filtered by type\n                    output.push(\"<testcase time=\\\"0\\\" name=\\\"\" + generateSource(message.rule) + \"\\\">\");\n                    output.push(\"<\" + type + \" message=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\"><![CDATA[\" + message.line + ':' + message.col + ':' + escapeSpecialCharacters(message.evidence)  + \"]]></\" + type + \">\");\n                    output.push(\"</testcase>\");\n\n                    tests[type] += 1;\n\n                }\n\n            });\n\n            output.unshift(\"<testsuite time=\\\"0\\\" tests=\\\"\" + messages.length + \"\\\" skipped=\\\"0\\\" errors=\\\"\" + tests.error + \"\\\" failures=\\\"\" + tests.failure + \"\\\" package=\\\"net.csslint\\\" name=\\\"\" + filename + \"\\\">\");\n            output.push(\"</testsuite>\");\n\n        }\n\n        return output.join(\"\");\n\n    }\n});\n/*global CSSLint*/\nCSSLint.addFormatter({\n    //format information\n    id: \"lint-xml\",\n    name: \"Lint XML format\",\n\n    /**\n     * Return opening root XML tag.\n     * @return {String} to prepend before all results\n     */\n    startFormat: function(){\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><lint>\";\n    },\n\n    /**\n     * Return closing root XML tag.\n     * @return {String} to append after all results\n     */\n    endFormat: function(){\n        return \"</lint>\";\n    },\n\n    /**\n     * Given CSS Lint results for a file, return output for this format.\n     * @param results {Object} with error and warning messages\n     * @param filename {String} relative file path\n     * @param options {Object} (UNUSED for now) specifies special handling of output\n     * @return {String} output for results\n     */\n    formatResults: function(results, filename, options) {\n        var messages = results.messages,\n            output = [];\n\n        /**\n         * Replace special characters before write to output.\n         *\n         * Rules:\n         *  - single quotes is the escape sequence for double-quotes\n         *  - &amp; is the escape sequence for &\n         *  - &lt; is the escape sequence for <\n         *  - &gt; is the escape sequence for >\n         *\n         * @param {String} message to escape\n         * @return escaped message as {String}\n         */\n        var escapeSpecialCharacters = function(str) {\n            if (!str || str.constructor !== String) {\n                return \"\";\n            }\n            return str.replace(/\\\"/g, \"'\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        };\n\n        if (messages.length > 0) {\n\n            output.push(\"<file name=\\\"\"+filename+\"\\\">\");\n            CSSLint.Util.forEach(messages, function (message, i) {\n                if (message.rollup) {\n                    output.push(\"<issue severity=\\\"\" + message.type + \"\\\" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n                } else {\n                    output.push(\"<issue line=\\\"\" + message.line + \"\\\" char=\\\"\" + message.col + \"\\\" severity=\\\"\" + message.type + \"\\\"\" +\n                        \" reason=\\\"\" + escapeSpecialCharacters(message.message) + \"\\\" evidence=\\\"\" + escapeSpecialCharacters(message.evidence) + \"\\\"/>\");\n                }\n            });\n            output.push(\"</file>\");\n        }\n\n        return output.join(\"\");\n    }\n});\n/*global CSSLint*/\nCSSLint.addFormatter({\n    //format information\n    id: \"text\",\n    name: \"Plain Text\",\n\n    /**\n     * Return content to be printed before all file results.\n     * @return {String} to prepend before all results\n     */\n    startFormat: function() {\n        return \"\";\n    },\n\n    /**\n     * Return content to be printed after all file results.\n     * @return {String} to append after all results\n     */\n    endFormat: function() {\n        return \"\";\n    },\n\n    /**\n     * Given CSS Lint results for a file, return output for this format.\n     * @param results {Object} with error and warning messages\n     * @param filename {String} relative file path\n     * @param options {Object} (Optional) specifies special handling of output\n     * @return {String} output for results\n     */\n    formatResults: function(results, filename, options) {\n        var messages = results.messages,\n            output = \"\";\n        options = options || {};\n\n        if (messages.length === 0) {\n            return options.quiet ? \"\" : \"\\n\\ncsslint: No errors in \" + filename + \".\";\n        }\n\n        output = \"\\n\\ncsslint: There are \" + messages.length  +  \" problems in \" + filename + \".\";\n        var pos = filename.lastIndexOf(\"/\"),\n            shortFilename = filename;\n\n        if (pos === -1){\n            pos = filename.lastIndexOf(\"\\\\\");\n        }\n        if (pos > -1){\n            shortFilename = filename.substring(pos+1);\n        }\n\n        CSSLint.Util.forEach(messages, function (message, i) {\n            output = output + \"\\n\\n\" + shortFilename;\n            if (message.rollup) {\n                output += \"\\n\" + (i+1) + \": \" + message.type;\n                output += \"\\n\" + message.message;\n            } else {\n                output += \"\\n\" + (i+1) + \": \" + message.type + \" at line \" + message.line + \", col \" + message.col;\n                output += \"\\n\" + message.message;\n                output += \"\\n\" + message.evidence;\n            }\n        });\n\n        return output;\n    }\n});\nmodule.exports.CSSLint = CSSLint;\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/components/CodeEditor/linters/css.js\n **/","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Depends on csslint.js from https://github.com/stubbornella/csslint\n\n// declare global: CSSLint\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"lint\", \"css\", function(text) {\n  var found = [];\n  if (!window.CSSLint) return found;\n  var results = CSSLint.verify(text), messages = results.messages, message = null;\n  for ( var i = 0; i < messages.length; i++) {\n    message = messages[i];\n    var startLine = message.line -1, endLine = message.line -1, startCol = message.col -1, endCol = message.col;\n    found.push({\n      from: CodeMirror.Pos(startLine, startCol),\n      to: CodeMirror.Pos(endLine, endCol),\n      message: message.message,\n      severity : message.type\n    });\n  }\n  return found;\n});\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/codemirror/addon/lint/css-lint.js\n ** module id = 244\n ** module chunks = 1\n **/","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"css\", function(config, parserConfig) {\n  var inline = parserConfig.inline\n  if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode(\"text/css\");\n\n  var indentUnit = config.indentUnit,\n      tokenHooks = parserConfig.tokenHooks,\n      documentTypes = parserConfig.documentTypes || {},\n      mediaTypes = parserConfig.mediaTypes || {},\n      mediaFeatures = parserConfig.mediaFeatures || {},\n      mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n      propertyKeywords = parserConfig.propertyKeywords || {},\n      nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n      fontProperties = parserConfig.fontProperties || {},\n      counterDescriptors = parserConfig.counterDescriptors || {},\n      colorKeywords = parserConfig.colorKeywords || {},\n      valueKeywords = parserConfig.valueKeywords || {},\n      allowNested = parserConfig.allowNested,\n      supportsAtComponent = parserConfig.supportsAtComponent === true;\n\n  var type, override;\n  function ret(style, tp) { type = tp; return style; }\n\n  // Tokenizers\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (tokenHooks[ch]) {\n      var result = tokenHooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == \"@\") {\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      return ret(\"def\", stream.current());\n    } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\n      return ret(null, \"compare\");\n    } else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \"#\") {\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      return ret(\"atom\", \"hash\");\n    } else if (ch == \"!\") {\n      stream.match(/^\\s*\\w*/);\n      return ret(\"keyword\", \"important\");\n    } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\n      stream.eatWhile(/[\\w.%]/);\n      return ret(\"number\", \"unit\");\n    } else if (ch === \"-\") {\n      if (/[\\d.]/.test(stream.peek())) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (stream.match(/^-[\\w\\\\\\-]+/)) {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        if (stream.match(/^\\s*:/, false))\n          return ret(\"variable-2\", \"variable-definition\");\n        return ret(\"variable-2\", \"variable\");\n      } else if (stream.match(/^\\w+-/)) {\n        return ret(\"meta\", \"meta\");\n      }\n    } else if (/[,+>*\\/]/.test(ch)) {\n      return ret(null, \"select-op\");\n    } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n      return ret(\"qualifier\", \"qualifier\");\n    } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n      return ret(null, ch);\n    } else if ((ch == \"u\" && stream.match(/rl(-prefix)?\\(/)) ||\n               (ch == \"d\" && stream.match(\"omain(\")) ||\n               (ch == \"r\" && stream.match(\"egexp(\"))) {\n      stream.backUp(1);\n      state.tokenize = tokenParenthesized;\n      return ret(\"property\", \"word\");\n    } else if (/[\\w\\\\\\-]/.test(ch)) {\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      return ret(\"property\", \"word\");\n    } else {\n      return ret(null, null);\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          if (quote == \")\") stream.backUp(1);\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenParenthesized(stream, state) {\n    stream.next(); // Must be '('\n    if (!stream.match(/\\s*[\\\"\\')]/, false))\n      state.tokenize = tokenString(\")\");\n    else\n      state.tokenize = null;\n    return ret(null, \"(\");\n  }\n\n  // Context management\n\n  function Context(type, indent, prev) {\n    this.type = type;\n    this.indent = indent;\n    this.prev = prev;\n  }\n\n  function pushContext(state, stream, type, indent) {\n    state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\n    return type;\n  }\n\n  function popContext(state) {\n    if (state.context.prev)\n      state.context = state.context.prev;\n    return state.context.type;\n  }\n\n  function pass(type, stream, state) {\n    return states[state.context.type](type, stream, state);\n  }\n  function popAndPass(type, stream, state, n) {\n    for (var i = n || 1; i > 0; i--)\n      state.context = state.context.prev;\n    return pass(type, stream, state);\n  }\n\n  // Parser\n\n  function wordAsValue(stream) {\n    var word = stream.current().toLowerCase();\n    if (valueKeywords.hasOwnProperty(word))\n      override = \"atom\";\n    else if (colorKeywords.hasOwnProperty(word))\n      override = \"keyword\";\n    else\n      override = \"variable\";\n  }\n\n  var states = {};\n\n  states.top = function(type, stream, state) {\n    if (type == \"{\") {\n      return pushContext(state, stream, \"block\");\n    } else if (type == \"}\" && state.context.prev) {\n      return popContext(state);\n    } else if (supportsAtComponent && /@component/.test(type)) {\n      return pushContext(state, stream, \"atComponentBlock\");\n    } else if (/^@(-moz-)?document$/.test(type)) {\n      return pushContext(state, stream, \"documentTypes\");\n    } else if (/^@(media|supports|(-moz-)?document|import)$/.test(type)) {\n      return pushContext(state, stream, \"atBlock\");\n    } else if (/^@(font-face|counter-style)/.test(type)) {\n      state.stateArg = type;\n      return \"restricted_atBlock_before\";\n    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {\n      return \"keyframes\";\n    } else if (type && type.charAt(0) == \"@\") {\n      return pushContext(state, stream, \"at\");\n    } else if (type == \"hash\") {\n      override = \"builtin\";\n    } else if (type == \"word\") {\n      override = \"tag\";\n    } else if (type == \"variable-definition\") {\n      return \"maybeprop\";\n    } else if (type == \"interpolation\") {\n      return pushContext(state, stream, \"interpolation\");\n    } else if (type == \":\") {\n      return \"pseudo\";\n    } else if (allowNested && type == \"(\") {\n      return pushContext(state, stream, \"parens\");\n    }\n    return state.context.type;\n  };\n\n  states.block = function(type, stream, state) {\n    if (type == \"word\") {\n      var word = stream.current().toLowerCase();\n      if (propertyKeywords.hasOwnProperty(word)) {\n        override = \"property\";\n        return \"maybeprop\";\n      } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n        override = \"string-2\";\n        return \"maybeprop\";\n      } else if (allowNested) {\n        override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\n        return \"block\";\n      } else {\n        override += \" error\";\n        return \"maybeprop\";\n      }\n    } else if (type == \"meta\") {\n      return \"block\";\n    } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\n      override = \"error\";\n      return \"block\";\n    } else {\n      return states.top(type, stream, state);\n    }\n  };\n\n  states.maybeprop = function(type, stream, state) {\n    if (type == \":\") return pushContext(state, stream, \"prop\");\n    return pass(type, stream, state);\n  };\n\n  states.prop = function(type, stream, state) {\n    if (type == \";\") return popContext(state);\n    if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\n    if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\n    if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n    if (type == \"hash\" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\n      override += \" error\";\n    } else if (type == \"word\") {\n      wordAsValue(stream);\n    } else if (type == \"interpolation\") {\n      return pushContext(state, stream, \"interpolation\");\n    }\n    return \"prop\";\n  };\n\n  states.propBlock = function(type, _stream, state) {\n    if (type == \"}\") return popContext(state);\n    if (type == \"word\") { override = \"property\"; return \"maybeprop\"; }\n    return state.context.type;\n  };\n\n  states.parens = function(type, stream, state) {\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n    if (type == \")\") return popContext(state);\n    if (type == \"(\") return pushContext(state, stream, \"parens\");\n    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n    if (type == \"word\") wordAsValue(stream);\n    return \"parens\";\n  };\n\n  states.pseudo = function(type, stream, state) {\n    if (type == \"word\") {\n      override = \"variable-3\";\n      return state.context.type;\n    }\n    return pass(type, stream, state);\n  };\n\n  states.documentTypes = function(type, stream, state) {\n    if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\n      override = \"tag\";\n      return state.context.type;\n    } else {\n      return states.atBlock(type, stream, state);\n    }\n  };\n\n  states.atBlock = function(type, stream, state) {\n    if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n    if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\n    if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\n\n    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n\n    if (type == \"word\") {\n      var word = stream.current().toLowerCase();\n      if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\")\n        override = \"keyword\";\n      else if (mediaTypes.hasOwnProperty(word))\n        override = \"attribute\";\n      else if (mediaFeatures.hasOwnProperty(word))\n        override = \"property\";\n      else if (mediaValueKeywords.hasOwnProperty(word))\n        override = \"keyword\";\n      else if (propertyKeywords.hasOwnProperty(word))\n        override = \"property\";\n      else if (nonStandardPropertyKeywords.hasOwnProperty(word))\n        override = \"string-2\";\n      else if (valueKeywords.hasOwnProperty(word))\n        override = \"atom\";\n      else if (colorKeywords.hasOwnProperty(word))\n        override = \"keyword\";\n      else\n        override = \"error\";\n    }\n    return state.context.type;\n  };\n\n  states.atComponentBlock = function(type, stream, state) {\n    if (type == \"}\")\n      return popAndPass(type, stream, state);\n    if (type == \"{\")\n      return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\n    if (type == \"word\")\n      override = \"error\";\n    return state.context.type;\n  };\n\n  states.atBlock_parens = function(type, stream, state) {\n    if (type == \")\") return popContext(state);\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\n    return states.atBlock(type, stream, state);\n  };\n\n  states.restricted_atBlock_before = function(type, stream, state) {\n    if (type == \"{\")\n      return pushContext(state, stream, \"restricted_atBlock\");\n    if (type == \"word\" && state.stateArg == \"@counter-style\") {\n      override = \"variable\";\n      return \"restricted_atBlock_before\";\n    }\n    return pass(type, stream, state);\n  };\n\n  states.restricted_atBlock = function(type, stream, state) {\n    if (type == \"}\") {\n      state.stateArg = null;\n      return popContext(state);\n    }\n    if (type == \"word\") {\n      if ((state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||\n          (state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))\n        override = \"error\";\n      else\n        override = \"property\";\n      return \"maybeprop\";\n    }\n    return \"restricted_atBlock\";\n  };\n\n  states.keyframes = function(type, stream, state) {\n    if (type == \"word\") { override = \"variable\"; return \"keyframes\"; }\n    if (type == \"{\") return pushContext(state, stream, \"top\");\n    return pass(type, stream, state);\n  };\n\n  states.at = function(type, stream, state) {\n    if (type == \";\") return popContext(state);\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n    if (type == \"word\") override = \"tag\";\n    else if (type == \"hash\") override = \"builtin\";\n    return \"at\";\n  };\n\n  states.interpolation = function(type, stream, state) {\n    if (type == \"}\") return popContext(state);\n    if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\n    if (type == \"word\") override = \"variable\";\n    else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\n    return \"interpolation\";\n  };\n\n  return {\n    startState: function(base) {\n      return {tokenize: null,\n              state: inline ? \"block\" : \"top\",\n              stateArg: null,\n              context: new Context(inline ? \"block\" : \"top\", base || 0, null)};\n    },\n\n    token: function(stream, state) {\n      if (!state.tokenize && stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style && typeof style == \"object\") {\n        type = style[1];\n        style = style[0];\n      }\n      override = style;\n      state.state = states[state.state](type, stream, state);\n      return override;\n    },\n\n    indent: function(state, textAfter) {\n      var cx = state.context, ch = textAfter && textAfter.charAt(0);\n      var indent = cx.indent;\n      if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\n      if (cx.prev) {\n        if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" ||\n                          cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\n          // Resume indentation from parent context.\n          cx = cx.prev;\n          indent = cx.indent;\n        } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") ||\n            ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\n          // Dedent relative to current context.\n          indent = Math.max(0, cx.indent - indentUnit);\n          cx = cx.prev;\n        }\n      }\n      return indent;\n    },\n\n    electricChars: \"}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    fold: \"brace\"\n  };\n});\n\n  function keySet(array) {\n    var keys = {};\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i]] = true;\n    }\n    return keys;\n  }\n\n  var documentTypes_ = [\n    \"domain\", \"regexp\", \"url\", \"url-prefix\"\n  ], documentTypes = keySet(documentTypes_);\n\n  var mediaTypes_ = [\n    \"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\",\n    \"tty\", \"tv\", \"embossed\"\n  ], mediaTypes = keySet(mediaTypes_);\n\n  var mediaFeatures_ = [\n    \"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\",\n    \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\",\n    \"min-device-height\", \"max-device-height\", \"aspect-ratio\",\n    \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\",\n    \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\",\n    \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\",\n    \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\",\n    \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\",\n    \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\",\n    \"pointer\", \"any-pointer\", \"hover\", \"any-hover\"\n  ], mediaFeatures = keySet(mediaFeatures_);\n\n  var mediaValueKeywords_ = [\n    \"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\",\n    \"interlace\", \"progressive\"\n  ], mediaValueKeywords = keySet(mediaValueKeywords_);\n\n  var propertyKeywords_ = [\n    \"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\",\n    \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\",\n    \"animation-direction\", \"animation-duration\", \"animation-fill-mode\",\n    \"animation-iteration-count\", \"animation-name\", \"animation-play-state\",\n    \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\",\n    \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\",\n    \"background-color\", \"background-image\", \"background-origin\", \"background-position\",\n    \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\",\n    \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\",\n    \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\",\n    \"border-bottom-left-radius\", \"border-bottom-right-radius\",\n    \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\",\n    \"border-color\", \"border-image\", \"border-image-outset\",\n    \"border-image-repeat\", \"border-image-slice\", \"border-image-source\",\n    \"border-image-width\", \"border-left\", \"border-left-color\",\n    \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\",\n    \"border-right-color\", \"border-right-style\", \"border-right-width\",\n    \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\",\n    \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\",\n    \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\",\n    \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\",\n    \"caption-side\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\",\n    \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\",\n    \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\",\n    \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\",\n    \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\",\n    \"dominant-baseline\", \"drop-initial-after-adjust\",\n    \"drop-initial-after-align\", \"drop-initial-before-adjust\",\n    \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\",\n    \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\",\n    \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\",\n    \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\",\n    \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\",\n    \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\",\n    \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\",\n    \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\",\n    \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\",\n    \"grid-auto-position\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\",\n    \"grid-column-start\", \"grid-row\", \"grid-row-end\", \"grid-row-start\",\n    \"grid-template\", \"grid-template-areas\", \"grid-template-columns\",\n    \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\",\n    \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\",\n    \"inline-box-align\", \"justify-content\", \"left\", \"letter-spacing\",\n    \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\",\n    \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\",\n    \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\",\n    \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\",\n    \"marker-offset\", \"marks\", \"marquee-direction\", \"marquee-loop\",\n    \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\",\n    \"max-width\", \"min-height\", \"min-width\", \"move-to\", \"nav-down\", \"nav-index\",\n    \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\",\n    \"opacity\", \"order\", \"orphans\", \"outline\",\n    \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\",\n    \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\",\n    \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\",\n    \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\",\n    \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\",\n    \"perspective-origin\", \"pitch\", \"pitch-range\", \"play-during\", \"position\",\n    \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\",\n    \"region-break-before\", \"region-break-inside\", \"region-fragment\",\n    \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\",\n    \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\",\n    \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\",\n    \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\",\n    \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\",\n    \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\",\n    \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\",\n    \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\",\n    \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\",\n    \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\",\n    \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\",\n    \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\",\n    \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\",\n    \"transition\", \"transition-delay\", \"transition-duration\",\n    \"transition-property\", \"transition-timing-function\", \"unicode-bidi\",\n    \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\",\n    \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\",\n    \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"word-break\",\n    \"word-spacing\", \"word-wrap\", \"z-index\",\n    // SVG-specific\n    \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\",\n    \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\",\n    \"color-interpolation\", \"color-interpolation-filters\",\n    \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\",\n    \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\",\n    \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\",\n    \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\",\n    \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"\n  ], propertyKeywords = keySet(propertyKeywords_);\n\n  var nonStandardPropertyKeywords_ = [\n    \"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\",\n    \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\",\n    \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\",\n    \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\",\n    \"searchfield-results-decoration\", \"zoom\"\n  ], nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\n\n  var fontProperties_ = [\n    \"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\",\n    \"font-stretch\", \"font-weight\", \"font-style\"\n  ], fontProperties = keySet(fontProperties_);\n\n  var counterDescriptors_ = [\n    \"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\",\n    \"speak-as\", \"suffix\", \"symbols\", \"system\"\n  ], counterDescriptors = keySet(counterDescriptors_);\n\n  var colorKeywords_ = [\n    \"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\",\n    \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\",\n    \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\",\n    \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\",\n    \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\",\n    \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\",\n    \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\",\n    \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\",\n    \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\",\n    \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\",\n    \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\",\n    \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\",\n    \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\",\n    \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\",\n    \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\",\n    \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\n    \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\",\n    \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\",\n    \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\",\n    \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\",\n    \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\",\n    \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\",\n    \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\",\n    \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\",\n    \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\",\n    \"whitesmoke\", \"yellow\", \"yellowgreen\"\n  ], colorKeywords = keySet(colorKeywords_);\n\n  var valueKeywords_ = [\n    \"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\",\n    \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\",\n    \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\",\n    \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\",\n    \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\",\n    \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\",\n    \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\",\n    \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\",\n    \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\",\n    \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\",\n    \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\",\n    \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\",\n    \"compact\", \"condensed\", \"contain\", \"content\",\n    \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\",\n    \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\",\n    \"decimal-leading-zero\", \"default\", \"default-button\", \"destination-atop\",\n    \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\",\n    \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\",\n    \"dot-dash\", \"dot-dot-dash\",\n    \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\",\n    \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\",\n    \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\",\n    \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\",\n    \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\",\n    \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\",\n    \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\",\n    \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\",\n    \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\",\n    \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\",\n    \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"groove\",\n    \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\",\n    \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\",\n    \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"icon\", \"ignore\",\n    \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\",\n    \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\",\n    \"inline-block\", \"inline-flex\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\",\n    \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\",\n    \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\",\n    \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\",\n    \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\",\n    \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\",\n    \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\",\n    \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\",\n    \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\",\n    \"media-controls-background\", \"media-current-time-display\",\n    \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\",\n    \"media-return-to-realtime-button\", \"media-rewind-button\",\n    \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\",\n    \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\",\n    \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\",\n    \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\",\n    \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\",\n    \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiply\", \"myanmar\", \"n-resize\",\n    \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\",\n    \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\",\n    \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"open-quote\",\n    \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\",\n    \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\",\n    \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\",\n    \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\",\n    \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\",\n    \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\",\n    \"relative\", \"repeat\", \"repeating-linear-gradient\",\n    \"repeating-radial-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\",\n    \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\",\n    \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\",\n    \"s-resize\", \"sans-serif\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\",\n    \"scroll\", \"scrollbar\", \"se-resize\", \"searchfield\",\n    \"searchfield-cancel-button\", \"searchfield-decoration\",\n    \"searchfield-results-button\", \"searchfield-results-decoration\",\n    \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\",\n    \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\",\n    \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\",\n    \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\",\n    \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\",\n    \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"spell-out\", \"square\",\n    \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\",\n    \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"table\",\n    \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\",\n    \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\",\n    \"tamil\",\n    \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\",\n    \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\",\n    \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\",\n    \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\",\n    \"trad-chinese-formal\", \"trad-chinese-informal\",\n    \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\",\n    \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"up\",\n    \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\",\n    \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\",\n    \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\",\n    \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\",\n    \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\",\n    \"xx-large\", \"xx-small\"\n  ], valueKeywords = keySet(valueKeywords_);\n\n  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_)\n    .concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_)\n    .concat(valueKeywords_);\n  CodeMirror.registerHelper(\"hintWords\", \"css\", allWords);\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return [\"comment\", \"comment\"];\n  }\n\n  CodeMirror.defineMIME(\"text/css\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    tokenHooks: {\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-scss\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    tokenHooks: {\n      \"/\": function(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \":\": function(stream) {\n        if (stream.match(/\\s*\\{/))\n          return [null, \"{\"];\n        return false;\n      },\n      \"$\": function(stream) {\n        stream.match(/^[\\w-]+/);\n        if (stream.match(/^\\s*:/, false))\n          return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"#\": function(stream) {\n        if (!stream.eat(\"{\")) return false;\n        return [null, \"interpolation\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"scss\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-less\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    tokenHooks: {\n      \"/\": function(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \"@\": function(stream) {\n        if (stream.eat(\"{\")) return [null, \"interpolation\"];\n        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/, false)) return false;\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        if (stream.match(/^\\s*:/, false))\n          return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"&\": function() {\n        return [\"atom\", \"atom\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"less\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-gss\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    supportsAtComponent: true,\n    tokenHooks: {\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\",\n    helperType: \"gss\"\n  });\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/codemirror/mode/css/css.js\n ** module id = 246\n ** module chunks = 1\n **/","/*!\nParser-Lib\nCopyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n/* Version v0.2.5, Build time: 7-May-2014 03:37:38 */\nvar parserlib = {};\n(function(){\n\n/**\n * A generic base to inherit from for any object\n * that needs event handling.\n * @class EventTarget\n * @constructor\n */\nfunction EventTarget(){\n\n    /**\n     * The array of listeners for various events.\n     * @type Object\n     * @property _listeners\n     * @private\n     */\n    this._listeners = {};\n}\n\nEventTarget.prototype = {\n\n    //restore constructor\n    constructor: EventTarget,\n\n    /**\n     * Adds a listener for a given event type.\n     * @param {String} type The type of event to add a listener for.\n     * @param {Function} listener The function to call when the event occurs.\n     * @return {void}\n     * @method addListener\n     */\n    addListener: function(type, listener){\n        if (!this._listeners[type]){\n            this._listeners[type] = [];\n        }\n\n        this._listeners[type].push(listener);\n    },\n\n    /**\n     * Fires an event based on the passed-in object.\n     * @param {Object|String} event An object with at least a 'type' attribute\n     *      or a string indicating the event name.\n     * @return {void}\n     * @method fire\n     */\n    fire: function(event){\n        if (typeof event == \"string\"){\n            event = { type: event };\n        }\n        if (typeof event.target != \"undefined\"){\n            event.target = this;\n        }\n\n        if (typeof event.type == \"undefined\"){\n            throw new Error(\"Event object missing 'type' property.\");\n        }\n\n        if (this._listeners[event.type]){\n\n            //create a copy of the array and use that so listeners can't chane\n            var listeners = this._listeners[event.type].concat();\n            for (var i=0, len=listeners.length; i < len; i++){\n                listeners[i].call(this, event);\n            }\n        }\n    },\n\n    /**\n     * Removes a listener for a given event type.\n     * @param {String} type The type of event to remove a listener from.\n     * @param {Function} listener The function to remove from the event.\n     * @return {void}\n     * @method removeListener\n     */\n    removeListener: function(type, listener){\n        if (this._listeners[type]){\n            var listeners = this._listeners[type];\n            for (var i=0, len=listeners.length; i < len; i++){\n                if (listeners[i] === listener){\n                    listeners.splice(i, 1);\n                    break;\n                }\n            }\n\n\n        }\n    }\n};\n/**\n * Convenient way to read through strings.\n * @namespace parserlib.util\n * @class StringReader\n * @constructor\n * @param {String} text The text to read.\n */\nfunction StringReader(text){\n\n    /**\n     * The input text with line endings normalized.\n     * @property _input\n     * @type String\n     * @private\n     */\n    this._input = text.replace(/\\n\\r?/g, \"\\n\");\n\n\n    /**\n     * The row for the character to be read next.\n     * @property _line\n     * @type int\n     * @private\n     */\n    this._line = 1;\n\n\n    /**\n     * The column for the character to be read next.\n     * @property _col\n     * @type int\n     * @private\n     */\n    this._col = 1;\n\n    /**\n     * The index of the character in the input to be read next.\n     * @property _cursor\n     * @type int\n     * @private\n     */\n    this._cursor = 0;\n}\n\nStringReader.prototype = {\n\n    //restore constructor\n    constructor: StringReader,\n\n    //-------------------------------------------------------------------------\n    // Position info\n    //-------------------------------------------------------------------------\n\n    /**\n     * Returns the column of the character to be read next.\n     * @return {int} The column of the character to be read next.\n     * @method getCol\n     */\n    getCol: function(){\n        return this._col;\n    },\n\n    /**\n     * Returns the row of the character to be read next.\n     * @return {int} The row of the character to be read next.\n     * @method getLine\n     */\n    getLine: function(){\n        return this._line ;\n    },\n\n    /**\n     * Determines if you're at the end of the input.\n     * @return {Boolean} True if there's no more input, false otherwise.\n     * @method eof\n     */\n    eof: function(){\n        return (this._cursor == this._input.length);\n    },\n\n    //-------------------------------------------------------------------------\n    // Basic reading\n    //-------------------------------------------------------------------------\n\n    /**\n     * Reads the next character without advancing the cursor.\n     * @param {int} count How many characters to look ahead (default is 1).\n     * @return {String} The next character or null if there is no next character.\n     * @method peek\n     */\n    peek: function(count){\n        var c = null;\n        count = (typeof count == \"undefined\" ? 1 : count);\n\n        //if we're not at the end of the input...\n        if (this._cursor < this._input.length){\n\n            //get character and increment cursor and column\n            c = this._input.charAt(this._cursor + count - 1);\n        }\n\n        return c;\n    },\n\n    /**\n     * Reads the next character from the input and adjusts the row and column\n     * accordingly.\n     * @return {String} The next character or null if there is no next character.\n     * @method read\n     */\n    read: function(){\n        var c = null;\n\n        //if we're not at the end of the input...\n        if (this._cursor < this._input.length){\n\n            //if the last character was a newline, increment row count\n            //and reset column count\n            if (this._input.charAt(this._cursor) == \"\\n\"){\n                this._line++;\n                this._col=1;\n            } else {\n                this._col++;\n            }\n\n            //get character and increment cursor and column\n            c = this._input.charAt(this._cursor++);\n        }\n\n        return c;\n    },\n\n    //-------------------------------------------------------------------------\n    // Misc\n    //-------------------------------------------------------------------------\n\n    /**\n     * Saves the current location so it can be returned to later.\n     * @method mark\n     * @return {void}\n     */\n    mark: function(){\n        this._bookmark = {\n            cursor: this._cursor,\n            line:   this._line,\n            col:    this._col\n        };\n    },\n\n    reset: function(){\n        if (this._bookmark){\n            this._cursor = this._bookmark.cursor;\n            this._line = this._bookmark.line;\n            this._col = this._bookmark.col;\n            delete this._bookmark;\n        }\n    },\n\n    //-------------------------------------------------------------------------\n    // Advanced reading\n    //-------------------------------------------------------------------------\n\n    /**\n     * Reads up to and including the given string. Throws an error if that\n     * string is not found.\n     * @param {String} pattern The string to read.\n     * @return {String} The string when it is found.\n     * @throws Error when the string pattern is not found.\n     * @method readTo\n     */\n    readTo: function(pattern){\n\n        var buffer = \"\",\n            c;\n\n        /*\n         * First, buffer must be the same length as the pattern.\n         * Then, buffer must end with the pattern or else reach the\n         * end of the input.\n         */\n        while (buffer.length < pattern.length || buffer.lastIndexOf(pattern) != buffer.length - pattern.length){\n            c = this.read();\n            if (c){\n                buffer += c;\n            } else {\n                throw new Error(\"Expected \\\"\" + pattern + \"\\\" at line \" + this._line  + \", col \" + this._col + \".\");\n            }\n        }\n\n        return buffer;\n\n    },\n\n    /**\n     * Reads characters while each character causes the given\n     * filter function to return true. The function is passed\n     * in each character and either returns true to continue\n     * reading or false to stop.\n     * @param {Function} filter The function to read on each character.\n     * @return {String} The string made up of all characters that passed the\n     *      filter check.\n     * @method readWhile\n     */\n    readWhile: function(filter){\n\n        var buffer = \"\",\n            c = this.read();\n\n        while(c !== null && filter(c)){\n            buffer += c;\n            c = this.read();\n        }\n\n        return buffer;\n\n    },\n\n    /**\n     * Reads characters that match either text or a regular expression and\n     * returns those characters. If a match is found, the row and column\n     * are adjusted; if no match is found, the reader's state is unchanged.\n     * reading or false to stop.\n     * @param {String|RegExp} matchter If a string, then the literal string\n     *      value is searched for. If a regular expression, then any string\n     *      matching the pattern is search for.\n     * @return {String} The string made up of all characters that matched or\n     *      null if there was no match.\n     * @method readMatch\n     */\n    readMatch: function(matcher){\n\n        var source = this._input.substring(this._cursor),\n            value = null;\n\n        //if it's a string, just do a straight match\n        if (typeof matcher == \"string\"){\n            if (source.indexOf(matcher) === 0){\n                value = this.readCount(matcher.length);\n            }\n        } else if (matcher instanceof RegExp){\n            if (matcher.test(source)){\n                value = this.readCount(RegExp.lastMatch.length);\n            }\n        }\n\n        return value;\n    },\n\n\n    /**\n     * Reads a given number of characters. If the end of the input is reached,\n     * it reads only the remaining characters and does not throw an error.\n     * @param {int} count The number of characters to read.\n     * @return {String} The string made up the read characters.\n     * @method readCount\n     */\n    readCount: function(count){\n        var buffer = \"\";\n\n        while(count--){\n            buffer += this.read();\n        }\n\n        return buffer;\n    }\n\n};\n/**\n * Type to use when a syntax error occurs.\n * @class SyntaxError\n * @namespace parserlib.util\n * @constructor\n * @param {String} message The error message.\n * @param {int} line The line at which the error occurred.\n * @param {int} col The column at which the error occurred.\n */\nfunction SyntaxError(message, line, col){\n\n    /**\n     * The column at which the error occurred.\n     * @type int\n     * @property col\n     */\n    this.col = col;\n\n    /**\n     * The line at which the error occurred.\n     * @type int\n     * @property line\n     */\n    this.line = line;\n\n    /**\n     * The text representation of the unit.\n     * @type String\n     * @property text\n     */\n    this.message = message;\n\n}\n\n//inherit from Error\nSyntaxError.prototype = new Error();\n/**\n * Base type to represent a single syntactic unit.\n * @class SyntaxUnit\n * @namespace parserlib.util\n * @constructor\n * @param {String} text The text of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction SyntaxUnit(text, line, col, type){\n\n\n    /**\n     * The column of text on which the unit resides.\n     * @type int\n     * @property col\n     */\n    this.col = col;\n\n    /**\n     * The line of text on which the unit resides.\n     * @type int\n     * @property line\n     */\n    this.line = line;\n\n    /**\n     * The text representation of the unit.\n     * @type String\n     * @property text\n     */\n    this.text = text;\n\n    /**\n     * The type of syntax unit.\n     * @type int\n     * @property type\n     */\n    this.type = type;\n}\n\n/**\n * Create a new syntax unit based solely on the given token.\n * Convenience method for creating a new syntax unit when\n * it represents a single token instead of multiple.\n * @param {Object} token The token object to represent.\n * @return {parserlib.util.SyntaxUnit} The object representing the token.\n * @static\n * @method fromToken\n */\nSyntaxUnit.fromToken = function(token){\n    return new SyntaxUnit(token.value, token.startLine, token.startCol);\n};\n\nSyntaxUnit.prototype = {\n\n    //restore constructor\n    constructor: SyntaxUnit,\n\n    /**\n     * Returns the text representation of the unit.\n     * @return {String} The text representation of the unit.\n     * @method valueOf\n     */\n    valueOf: function(){\n        return this.toString();\n    },\n\n    /**\n     * Returns the text representation of the unit.\n     * @return {String} The text representation of the unit.\n     * @method toString\n     */\n    toString: function(){\n        return this.text;\n    }\n\n};\n/*global StringReader, SyntaxError*/\n\n/**\n * Generic TokenStream providing base functionality.\n * @class TokenStreamBase\n * @namespace parserlib.util\n * @constructor\n * @param {String|StringReader} input The text to tokenize or a reader from\n *      which to read the input.\n */\nfunction TokenStreamBase(input, tokenData){\n\n    /**\n     * The string reader for easy access to the text.\n     * @type StringReader\n     * @property _reader\n     * @private\n     */\n    this._reader = input ? new StringReader(input.toString()) : null;\n\n    /**\n     * Token object for the last consumed token.\n     * @type Token\n     * @property _token\n     * @private\n     */\n    this._token = null;\n\n    /**\n     * The array of token information.\n     * @type Array\n     * @property _tokenData\n     * @private\n     */\n    this._tokenData = tokenData;\n\n    /**\n     * Lookahead token buffer.\n     * @type Array\n     * @property _lt\n     * @private\n     */\n    this._lt = [];\n\n    /**\n     * Lookahead token buffer index.\n     * @type int\n     * @property _ltIndex\n     * @private\n     */\n    this._ltIndex = 0;\n\n    this._ltIndexCache = [];\n}\n\n/**\n * Accepts an array of token information and outputs\n * an array of token data containing key-value mappings\n * and matching functions that the TokenStream needs.\n * @param {Array} tokens An array of token descriptors.\n * @return {Array} An array of processed token data.\n * @method createTokenData\n * @static\n */\nTokenStreamBase.createTokenData = function(tokens){\n\n    var nameMap     = [],\n        typeMap     = {},\n        tokenData     = tokens.concat([]),\n        i            = 0,\n        len            = tokenData.length+1;\n\n    tokenData.UNKNOWN = -1;\n    tokenData.unshift({name:\"EOF\"});\n\n    for (; i < len; i++){\n        nameMap.push(tokenData[i].name);\n        tokenData[tokenData[i].name] = i;\n        if (tokenData[i].text){\n            typeMap[tokenData[i].text] = i;\n        }\n    }\n\n    tokenData.name = function(tt){\n        return nameMap[tt];\n    };\n\n    tokenData.type = function(c){\n        return typeMap[c];\n    };\n\n    return tokenData;\n};\n\nTokenStreamBase.prototype = {\n\n    //restore constructor\n    constructor: TokenStreamBase,\n\n    //-------------------------------------------------------------------------\n    // Matching methods\n    //-------------------------------------------------------------------------\n\n    /**\n     * Determines if the next token matches the given token type.\n     * If so, that token is consumed; if not, the token is placed\n     * back onto the token stream. You can pass in any number of\n     * token types and this will return true if any of the token\n     * types is found.\n     * @param {int|int[]} tokenTypes Either a single token type or an array of\n     *      token types that the next token might be. If an array is passed,\n     *      it's assumed that the token can be any of these.\n     * @param {variant} channel (Optional) The channel to read from. If not\n     *      provided, reads from the default (unnamed) channel.\n     * @return {Boolean} True if the token type matches, false if not.\n     * @method match\n     */\n    match: function(tokenTypes, channel){\n\n        //always convert to an array, makes things easier\n        if (!(tokenTypes instanceof Array)){\n            tokenTypes = [tokenTypes];\n        }\n\n        var tt  = this.get(channel),\n            i   = 0,\n            len = tokenTypes.length;\n\n        while(i < len){\n            if (tt == tokenTypes[i++]){\n                return true;\n            }\n        }\n\n        //no match found, put the token back\n        this.unget();\n        return false;\n    },\n\n    /**\n     * Determines if the next token matches the given token type.\n     * If so, that token is consumed; if not, an error is thrown.\n     * @param {int|int[]} tokenTypes Either a single token type or an array of\n     *      token types that the next token should be. If an array is passed,\n     *      it's assumed that the token must be one of these.\n     * @param {variant} channel (Optional) The channel to read from. If not\n     *      provided, reads from the default (unnamed) channel.\n     * @return {void}\n     * @method mustMatch\n     */\n    mustMatch: function(tokenTypes, channel){\n\n        var token;\n\n        //always convert to an array, makes things easier\n        if (!(tokenTypes instanceof Array)){\n            tokenTypes = [tokenTypes];\n        }\n\n        if (!this.match.apply(this, arguments)){\n            token = this.LT(1);\n            throw new SyntaxError(\"Expected \" + this._tokenData[tokenTypes[0]].name +\n                \" at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n        }\n    },\n\n    //-------------------------------------------------------------------------\n    // Consuming methods\n    //-------------------------------------------------------------------------\n\n    /**\n     * Keeps reading from the token stream until either one of the specified\n     * token types is found or until the end of the input is reached.\n     * @param {int|int[]} tokenTypes Either a single token type or an array of\n     *      token types that the next token should be. If an array is passed,\n     *      it's assumed that the token must be one of these.\n     * @param {variant} channel (Optional) The channel to read from. If not\n     *      provided, reads from the default (unnamed) channel.\n     * @return {void}\n     * @method advance\n     */\n    advance: function(tokenTypes, channel){\n\n        while(this.LA(0) !== 0 && !this.match(tokenTypes, channel)){\n            this.get();\n        }\n\n        return this.LA(0);\n    },\n\n    /**\n     * Consumes the next token from the token stream.\n     * @return {int} The token type of the token that was just consumed.\n     * @method get\n     */\n    get: function(channel){\n\n        var tokenInfo   = this._tokenData,\n            reader      = this._reader,\n            value,\n            i           =0,\n            len         = tokenInfo.length,\n            found       = false,\n            token,\n            info;\n\n        //check the lookahead buffer first\n        if (this._lt.length && this._ltIndex >= 0 && this._ltIndex < this._lt.length){\n\n            i++;\n            this._token = this._lt[this._ltIndex++];\n            info = tokenInfo[this._token.type];\n\n            //obey channels logic\n            while((info.channel !== undefined && channel !== info.channel) &&\n                    this._ltIndex < this._lt.length){\n                this._token = this._lt[this._ltIndex++];\n                info = tokenInfo[this._token.type];\n                i++;\n            }\n\n            //here be dragons\n            if ((info.channel === undefined || channel === info.channel) &&\n                    this._ltIndex <= this._lt.length){\n                this._ltIndexCache.push(i);\n                return this._token.type;\n            }\n        }\n\n        //call token retriever method\n        token = this._getToken();\n\n        //if it should be hidden, don't save a token\n        if (token.type > -1 && !tokenInfo[token.type].hide){\n\n            //apply token channel\n            token.channel = tokenInfo[token.type].channel;\n\n            //save for later\n            this._token = token;\n            this._lt.push(token);\n\n            //save space that will be moved (must be done before array is truncated)\n            this._ltIndexCache.push(this._lt.length - this._ltIndex + i);\n\n            //keep the buffer under 5 items\n            if (this._lt.length > 5){\n                this._lt.shift();\n            }\n\n            //also keep the shift buffer under 5 items\n            if (this._ltIndexCache.length > 5){\n                this._ltIndexCache.shift();\n            }\n\n            //update lookahead index\n            this._ltIndex = this._lt.length;\n        }\n\n        /*\n         * Skip to the next token if:\n         * 1. The token type is marked as hidden.\n         * 2. The token type has a channel specified and it isn't the current channel.\n         */\n        info = tokenInfo[token.type];\n        if (info &&\n                (info.hide ||\n                (info.channel !== undefined && channel !== info.channel))){\n            return this.get(channel);\n        } else {\n            //return just the type\n            return token.type;\n        }\n    },\n\n    /**\n     * Looks ahead a certain number of tokens and returns the token type at\n     * that position. This will throw an error if you lookahead past the\n     * end of input, past the size of the lookahead buffer, or back past\n     * the first token in the lookahead buffer.\n     * @param {int} The index of the token type to retrieve. 0 for the\n     *      current token, 1 for the next, -1 for the previous, etc.\n     * @return {int} The token type of the token in the given position.\n     * @method LA\n     */\n    LA: function(index){\n        var total = index,\n            tt;\n        if (index > 0){\n            //TODO: Store 5 somewhere\n            if (index > 5){\n                throw new Error(\"Too much lookahead.\");\n            }\n\n            //get all those tokens\n            while(total){\n                tt = this.get();\n                total--;\n            }\n\n            //unget all those tokens\n            while(total < index){\n                this.unget();\n                total++;\n            }\n        } else if (index < 0){\n\n            if(this._lt[this._ltIndex+index]){\n                tt = this._lt[this._ltIndex+index].type;\n            } else {\n                throw new Error(\"Too much lookbehind.\");\n            }\n\n        } else {\n            tt = this._token.type;\n        }\n\n        return tt;\n\n    },\n\n    /**\n     * Looks ahead a certain number of tokens and returns the token at\n     * that position. This will throw an error if you lookahead past the\n     * end of input, past the size of the lookahead buffer, or back past\n     * the first token in the lookahead buffer.\n     * @param {int} The index of the token type to retrieve. 0 for the\n     *      current token, 1 for the next, -1 for the previous, etc.\n     * @return {Object} The token of the token in the given position.\n     * @method LA\n     */\n    LT: function(index){\n\n        //lookahead first to prime the token buffer\n        this.LA(index);\n\n        //now find the token, subtract one because _ltIndex is already at the next index\n        return this._lt[this._ltIndex+index-1];\n    },\n\n    /**\n     * Returns the token type for the next token in the stream without\n     * consuming it.\n     * @return {int} The token type of the next token in the stream.\n     * @method peek\n     */\n    peek: function(){\n        return this.LA(1);\n    },\n\n    /**\n     * Returns the actual token object for the last consumed token.\n     * @return {Token} The token object for the last consumed token.\n     * @method token\n     */\n    token: function(){\n        return this._token;\n    },\n\n    /**\n     * Returns the name of the token for the given token type.\n     * @param {int} tokenType The type of token to get the name of.\n     * @return {String} The name of the token or \"UNKNOWN_TOKEN\" for any\n     *      invalid token type.\n     * @method tokenName\n     */\n    tokenName: function(tokenType){\n        if (tokenType < 0 || tokenType > this._tokenData.length){\n            return \"UNKNOWN_TOKEN\";\n        } else {\n            return this._tokenData[tokenType].name;\n        }\n    },\n\n    /**\n     * Returns the token type value for the given token name.\n     * @param {String} tokenName The name of the token whose value should be returned.\n     * @return {int} The token type value for the given token name or -1\n     *      for an unknown token.\n     * @method tokenName\n     */\n    tokenType: function(tokenName){\n        return this._tokenData[tokenName] || -1;\n    },\n\n    /**\n     * Returns the last consumed token to the token stream.\n     * @method unget\n     */\n    unget: function(){\n        //if (this._ltIndex > -1){\n        if (this._ltIndexCache.length){\n            this._ltIndex -= this._ltIndexCache.pop();//--;\n            this._token = this._lt[this._ltIndex - 1];\n        } else {\n            throw new Error(\"Too much lookahead.\");\n        }\n    }\n\n};\n\n\nparserlib.util = {\nStringReader: StringReader,\nSyntaxError : SyntaxError,\nSyntaxUnit  : SyntaxUnit,\nEventTarget : EventTarget,\nTokenStreamBase : TokenStreamBase\n};\n})();\n/*\nParser-Lib\nCopyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n/* Version v0.2.5, Build time: 7-May-2014 03:37:38 */\n(function(){\nvar EventTarget = parserlib.util.EventTarget,\nTokenStreamBase = parserlib.util.TokenStreamBase,\nStringReader = parserlib.util.StringReader,\nSyntaxError = parserlib.util.SyntaxError,\nSyntaxUnit  = parserlib.util.SyntaxUnit;\n\nvar Colors = {\n    aliceblue       :\"#f0f8ff\",\n    antiquewhite    :\"#faebd7\",\n    aqua            :\"#00ffff\",\n    aquamarine      :\"#7fffd4\",\n    azure           :\"#f0ffff\",\n    beige           :\"#f5f5dc\",\n    bisque          :\"#ffe4c4\",\n    black           :\"#000000\",\n    blanchedalmond  :\"#ffebcd\",\n    blue            :\"#0000ff\",\n    blueviolet      :\"#8a2be2\",\n    brown           :\"#a52a2a\",\n    burlywood       :\"#deb887\",\n    cadetblue       :\"#5f9ea0\",\n    chartreuse      :\"#7fff00\",\n    chocolate       :\"#d2691e\",\n    coral           :\"#ff7f50\",\n    cornflowerblue  :\"#6495ed\",\n    cornsilk        :\"#fff8dc\",\n    crimson         :\"#dc143c\",\n    cyan            :\"#00ffff\",\n    darkblue        :\"#00008b\",\n    darkcyan        :\"#008b8b\",\n    darkgoldenrod   :\"#b8860b\",\n    darkgray        :\"#a9a9a9\",\n    darkgrey        :\"#a9a9a9\",\n    darkgreen       :\"#006400\",\n    darkkhaki       :\"#bdb76b\",\n    darkmagenta     :\"#8b008b\",\n    darkolivegreen  :\"#556b2f\",\n    darkorange      :\"#ff8c00\",\n    darkorchid      :\"#9932cc\",\n    darkred         :\"#8b0000\",\n    darksalmon      :\"#e9967a\",\n    darkseagreen    :\"#8fbc8f\",\n    darkslateblue   :\"#483d8b\",\n    darkslategray   :\"#2f4f4f\",\n    darkslategrey   :\"#2f4f4f\",\n    darkturquoise   :\"#00ced1\",\n    darkviolet      :\"#9400d3\",\n    deeppink        :\"#ff1493\",\n    deepskyblue     :\"#00bfff\",\n    dimgray         :\"#696969\",\n    dimgrey         :\"#696969\",\n    dodgerblue      :\"#1e90ff\",\n    firebrick       :\"#b22222\",\n    floralwhite     :\"#fffaf0\",\n    forestgreen     :\"#228b22\",\n    fuchsia         :\"#ff00ff\",\n    gainsboro       :\"#dcdcdc\",\n    ghostwhite      :\"#f8f8ff\",\n    gold            :\"#ffd700\",\n    goldenrod       :\"#daa520\",\n    gray            :\"#808080\",\n    grey            :\"#808080\",\n    green           :\"#008000\",\n    greenyellow     :\"#adff2f\",\n    honeydew        :\"#f0fff0\",\n    hotpink         :\"#ff69b4\",\n    indianred       :\"#cd5c5c\",\n    indigo          :\"#4b0082\",\n    ivory           :\"#fffff0\",\n    khaki           :\"#f0e68c\",\n    lavender        :\"#e6e6fa\",\n    lavenderblush   :\"#fff0f5\",\n    lawngreen       :\"#7cfc00\",\n    lemonchiffon    :\"#fffacd\",\n    lightblue       :\"#add8e6\",\n    lightcoral      :\"#f08080\",\n    lightcyan       :\"#e0ffff\",\n    lightgoldenrodyellow  :\"#fafad2\",\n    lightgray       :\"#d3d3d3\",\n    lightgrey       :\"#d3d3d3\",\n    lightgreen      :\"#90ee90\",\n    lightpink       :\"#ffb6c1\",\n    lightsalmon     :\"#ffa07a\",\n    lightseagreen   :\"#20b2aa\",\n    lightskyblue    :\"#87cefa\",\n    lightslategray  :\"#778899\",\n    lightslategrey  :\"#778899\",\n    lightsteelblue  :\"#b0c4de\",\n    lightyellow     :\"#ffffe0\",\n    lime            :\"#00ff00\",\n    limegreen       :\"#32cd32\",\n    linen           :\"#faf0e6\",\n    magenta         :\"#ff00ff\",\n    maroon          :\"#800000\",\n    mediumaquamarine:\"#66cdaa\",\n    mediumblue      :\"#0000cd\",\n    mediumorchid    :\"#ba55d3\",\n    mediumpurple    :\"#9370d8\",\n    mediumseagreen  :\"#3cb371\",\n    mediumslateblue :\"#7b68ee\",\n    mediumspringgreen   :\"#00fa9a\",\n    mediumturquoise :\"#48d1cc\",\n    mediumvioletred :\"#c71585\",\n    midnightblue    :\"#191970\",\n    mintcream       :\"#f5fffa\",\n    mistyrose       :\"#ffe4e1\",\n    moccasin        :\"#ffe4b5\",\n    navajowhite     :\"#ffdead\",\n    navy            :\"#000080\",\n    oldlace         :\"#fdf5e6\",\n    olive           :\"#808000\",\n    olivedrab       :\"#6b8e23\",\n    orange          :\"#ffa500\",\n    orangered       :\"#ff4500\",\n    orchid          :\"#da70d6\",\n    palegoldenrod   :\"#eee8aa\",\n    palegreen       :\"#98fb98\",\n    paleturquoise   :\"#afeeee\",\n    palevioletred   :\"#d87093\",\n    papayawhip      :\"#ffefd5\",\n    peachpuff       :\"#ffdab9\",\n    peru            :\"#cd853f\",\n    pink            :\"#ffc0cb\",\n    plum            :\"#dda0dd\",\n    powderblue      :\"#b0e0e6\",\n    purple          :\"#800080\",\n    red             :\"#ff0000\",\n    rosybrown       :\"#bc8f8f\",\n    royalblue       :\"#4169e1\",\n    saddlebrown     :\"#8b4513\",\n    salmon          :\"#fa8072\",\n    sandybrown      :\"#f4a460\",\n    seagreen        :\"#2e8b57\",\n    seashell        :\"#fff5ee\",\n    sienna          :\"#a0522d\",\n    silver          :\"#c0c0c0\",\n    skyblue         :\"#87ceeb\",\n    slateblue       :\"#6a5acd\",\n    slategray       :\"#708090\",\n    slategrey       :\"#708090\",\n    snow            :\"#fffafa\",\n    springgreen     :\"#00ff7f\",\n    steelblue       :\"#4682b4\",\n    tan             :\"#d2b48c\",\n    teal            :\"#008080\",\n    thistle         :\"#d8bfd8\",\n    tomato          :\"#ff6347\",\n    turquoise       :\"#40e0d0\",\n    violet          :\"#ee82ee\",\n    wheat           :\"#f5deb3\",\n    white           :\"#ffffff\",\n    whitesmoke      :\"#f5f5f5\",\n    yellow          :\"#ffff00\",\n    yellowgreen     :\"#9acd32\",\n    //CSS2 system colors http://www.w3.org/TR/css3-color/#css2-system\n    activeBorder        :\"Active window border.\",\n    activecaption       :\"Active window caption.\",\n    appworkspace        :\"Background color of multiple document interface.\",\n    background          :\"Desktop background.\",\n    buttonface          :\"The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n    buttonhighlight     :\"The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n    buttonshadow        :\"The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n    buttontext          :\"Text on push buttons.\",\n    captiontext         :\"Text in caption, size box, and scrollbar arrow box.\",\n    graytext            :\"Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.\",\n    greytext            :\"Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.\",\n    highlight           :\"Item(s) selected in a control.\",\n    highlighttext       :\"Text of item(s) selected in a control.\",\n    inactiveborder      :\"Inactive window border.\",\n    inactivecaption     :\"Inactive window caption.\",\n    inactivecaptiontext :\"Color of text in an inactive caption.\",\n    infobackground      :\"Background color for tooltip controls.\",\n    infotext            :\"Text color for tooltip controls.\",\n    menu                :\"Menu background.\",\n    menutext            :\"Text in menus.\",\n    scrollbar           :\"Scroll bar gray area.\",\n    threeddarkshadow    :\"The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n    threedface          :\"The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n    threedhighlight     :\"The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n    threedlightshadow   :\"The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n    threedshadow        :\"The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n    window              :\"Window background.\",\n    windowframe         :\"Window frame.\",\n    windowtext          :\"Text in windows.\"\n};\n/*global SyntaxUnit, Parser*/\n/**\n * Represents a selector combinator (whitespace, +, >).\n * @namespace parserlib.css\n * @class Combinator\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} text The text representation of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction Combinator(text, line, col){\n\n    SyntaxUnit.call(this, text, line, col, Parser.COMBINATOR_TYPE);\n\n    /**\n     * The type of modifier.\n     * @type String\n     * @property type\n     */\n    this.type = \"unknown\";\n\n    //pretty simple\n    if (/^\\s+$/.test(text)){\n        this.type = \"descendant\";\n    } else if (text == \">\"){\n        this.type = \"child\";\n    } else if (text == \"+\"){\n        this.type = \"adjacent-sibling\";\n    } else if (text == \"~\"){\n        this.type = \"sibling\";\n    }\n\n}\n\nCombinator.prototype = new SyntaxUnit();\nCombinator.prototype.constructor = Combinator;\n\n/*global SyntaxUnit, Parser*/\n/**\n * Represents a media feature, such as max-width:500.\n * @namespace parserlib.css\n * @class MediaFeature\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {SyntaxUnit} name The name of the feature.\n * @param {SyntaxUnit} value The value of the feature or null if none.\n */\nfunction MediaFeature(name, value){\n\n    SyntaxUnit.call(this, \"(\" + name + (value !== null ? \":\" + value : \"\") + \")\", name.startLine, name.startCol, Parser.MEDIA_FEATURE_TYPE);\n\n    /**\n     * The name of the media feature\n     * @type String\n     * @property name\n     */\n    this.name = name;\n\n    /**\n     * The value for the feature or null if there is none.\n     * @type SyntaxUnit\n     * @property value\n     */\n    this.value = value;\n}\n\nMediaFeature.prototype = new SyntaxUnit();\nMediaFeature.prototype.constructor = MediaFeature;\n\n/*global SyntaxUnit, Parser*/\n/**\n * Represents an individual media query.\n * @namespace parserlib.css\n * @class MediaQuery\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} modifier The modifier \"not\" or \"only\" (or null).\n * @param {String} mediaType The type of media (i.e., \"print\").\n * @param {Array} parts Array of selectors parts making up this selector.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction MediaQuery(modifier, mediaType, features, line, col){\n\n    SyntaxUnit.call(this, (modifier ? modifier + \" \": \"\") + (mediaType ? mediaType : \"\") + (mediaType && features.length > 0 ? \" and \" : \"\") + features.join(\" and \"), line, col, Parser.MEDIA_QUERY_TYPE);\n\n    /**\n     * The media modifier (\"not\" or \"only\")\n     * @type String\n     * @property modifier\n     */\n    this.modifier = modifier;\n\n    /**\n     * The mediaType (i.e., \"print\")\n     * @type String\n     * @property mediaType\n     */\n    this.mediaType = mediaType;\n\n    /**\n     * The parts that make up the selector.\n     * @type Array\n     * @property features\n     */\n    this.features = features;\n\n}\n\nMediaQuery.prototype = new SyntaxUnit();\nMediaQuery.prototype.constructor = MediaQuery;\n\n/*global Tokens, TokenStream, SyntaxError, Properties, Validation, ValidationError, SyntaxUnit,\n    PropertyValue, PropertyValuePart, SelectorPart, SelectorSubPart, Selector,\n    PropertyName, Combinator, MediaFeature, MediaQuery, EventTarget */\n\n/**\n * A CSS3 parser.\n * @namespace parserlib.css\n * @class Parser\n * @constructor\n * @param {Object} options (Optional) Various options for the parser:\n *      starHack (true|false) to allow IE6 star hack as valid,\n *      underscoreHack (true|false) to interpret leading underscores\n *      as IE6-7 targeting for known properties, ieFilters (true|false)\n *      to indicate that IE < 8 filters should be accepted and not throw\n *      syntax errors.\n */\nfunction Parser(options){\n\n    //inherit event functionality\n    EventTarget.call(this);\n\n\n    this.options = options || {};\n\n    this._tokenStream = null;\n}\n\n//Static constants\nParser.DEFAULT_TYPE = 0;\nParser.COMBINATOR_TYPE = 1;\nParser.MEDIA_FEATURE_TYPE = 2;\nParser.MEDIA_QUERY_TYPE = 3;\nParser.PROPERTY_NAME_TYPE = 4;\nParser.PROPERTY_VALUE_TYPE = 5;\nParser.PROPERTY_VALUE_PART_TYPE = 6;\nParser.SELECTOR_TYPE = 7;\nParser.SELECTOR_PART_TYPE = 8;\nParser.SELECTOR_SUB_PART_TYPE = 9;\n\nParser.prototype = function(){\n\n    var proto = new EventTarget(),  //new prototype\n        prop,\n        additions =  {\n\n            //restore constructor\n            constructor: Parser,\n\n            //instance constants - yuck\n            DEFAULT_TYPE : 0,\n            COMBINATOR_TYPE : 1,\n            MEDIA_FEATURE_TYPE : 2,\n            MEDIA_QUERY_TYPE : 3,\n            PROPERTY_NAME_TYPE : 4,\n            PROPERTY_VALUE_TYPE : 5,\n            PROPERTY_VALUE_PART_TYPE : 6,\n            SELECTOR_TYPE : 7,\n            SELECTOR_PART_TYPE : 8,\n            SELECTOR_SUB_PART_TYPE : 9,\n\n            //-----------------------------------------------------------------\n            // Grammar\n            //-----------------------------------------------------------------\n\n            _stylesheet: function(){\n\n                /*\n                 * stylesheet\n                 *  : [ CHARSET_SYM S* STRING S* ';' ]?\n                 *    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*\n                 *    [ namespace [S|CDO|CDC]* ]*\n                 *    [ [ ruleset | media | page | font_face | keyframes ] [S|CDO|CDC]* ]*\n                 *  ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    charset     = null,\n                    count,\n                    token,\n                    tt;\n\n                this.fire(\"startstylesheet\");\n\n                //try to read character set\n                this._charset();\n\n                this._skipCruft();\n\n                //try to read imports - may be more than one\n                while (tokenStream.peek() == Tokens.IMPORT_SYM){\n                    this._import();\n                    this._skipCruft();\n                }\n\n                //try to read namespaces - may be more than one\n                while (tokenStream.peek() == Tokens.NAMESPACE_SYM){\n                    this._namespace();\n                    this._skipCruft();\n                }\n\n                //get the next token\n                tt = tokenStream.peek();\n\n                //try to read the rest\n                while(tt > Tokens.EOF){\n\n                    try {\n\n                        switch(tt){\n                            case Tokens.MEDIA_SYM:\n                                this._media();\n                                this._skipCruft();\n                                break;\n                            case Tokens.PAGE_SYM:\n                                this._page();\n                                this._skipCruft();\n                                break;\n                            case Tokens.FONT_FACE_SYM:\n                                this._font_face();\n                                this._skipCruft();\n                                break;\n                            case Tokens.KEYFRAMES_SYM:\n                                this._keyframes();\n                                this._skipCruft();\n                                break;\n                            case Tokens.VIEWPORT_SYM:\n                                this._viewport();\n                                this._skipCruft();\n                                break;\n                            case Tokens.UNKNOWN_SYM:  //unknown @ rule\n                                tokenStream.get();\n                                if (!this.options.strict){\n\n                                    //fire error event\n                                    this.fire({\n                                        type:       \"error\",\n                                        error:      null,\n                                        message:    \"Unknown @ rule: \" + tokenStream.LT(0).value + \".\",\n                                        line:       tokenStream.LT(0).startLine,\n                                        col:        tokenStream.LT(0).startCol\n                                    });\n\n                                    //skip braces\n                                    count=0;\n                                    while (tokenStream.advance([Tokens.LBRACE, Tokens.RBRACE]) == Tokens.LBRACE){\n                                        count++;    //keep track of nesting depth\n                                    }\n\n                                    while(count){\n                                        tokenStream.advance([Tokens.RBRACE]);\n                                        count--;\n                                    }\n\n                                } else {\n                                    //not a syntax error, rethrow it\n                                    throw new SyntaxError(\"Unknown @ rule.\", tokenStream.LT(0).startLine, tokenStream.LT(0).startCol);\n                                }\n                                break;\n                            case Tokens.S:\n                                this._readWhitespace();\n                                break;\n                            default:\n                                if(!this._ruleset()){\n\n                                    //error handling for known issues\n                                    switch(tt){\n                                        case Tokens.CHARSET_SYM:\n                                            token = tokenStream.LT(1);\n                                            this._charset(false);\n                                            throw new SyntaxError(\"@charset not allowed here.\", token.startLine, token.startCol);\n                                        case Tokens.IMPORT_SYM:\n                                            token = tokenStream.LT(1);\n                                            this._import(false);\n                                            throw new SyntaxError(\"@import not allowed here.\", token.startLine, token.startCol);\n                                        case Tokens.NAMESPACE_SYM:\n                                            token = tokenStream.LT(1);\n                                            this._namespace(false);\n                                            throw new SyntaxError(\"@namespace not allowed here.\", token.startLine, token.startCol);\n                                        default:\n                                            tokenStream.get();  //get the last token\n                                            this._unexpectedToken(tokenStream.token());\n                                    }\n\n                                }\n                        }\n                    } catch(ex) {\n                        if (ex instanceof SyntaxError && !this.options.strict){\n                            this.fire({\n                                type:       \"error\",\n                                error:      ex,\n                                message:    ex.message,\n                                line:       ex.line,\n                                col:        ex.col\n                            });\n                        } else {\n                            throw ex;\n                        }\n                    }\n\n                    tt = tokenStream.peek();\n                }\n\n                if (tt != Tokens.EOF){\n                    this._unexpectedToken(tokenStream.token());\n                }\n\n                this.fire(\"endstylesheet\");\n            },\n\n            _charset: function(emit){\n                var tokenStream = this._tokenStream,\n                    charset,\n                    token,\n                    line,\n                    col;\n\n                if (tokenStream.match(Tokens.CHARSET_SYM)){\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n\n                    this._readWhitespace();\n                    tokenStream.mustMatch(Tokens.STRING);\n\n                    token = tokenStream.token();\n                    charset = token.value;\n\n                    this._readWhitespace();\n                    tokenStream.mustMatch(Tokens.SEMICOLON);\n\n                    if (emit !== false){\n                        this.fire({\n                            type:   \"charset\",\n                            charset:charset,\n                            line:   line,\n                            col:    col\n                        });\n                    }\n                }\n            },\n\n            _import: function(emit){\n                /*\n                 * import\n                 *   : IMPORT_SYM S*\n                 *    [STRING|URI] S* media_query_list? ';' S*\n                 */\n\n                var tokenStream = this._tokenStream,\n                    tt,\n                    uri,\n                    importToken,\n                    mediaList   = [];\n\n                //read import symbol\n                tokenStream.mustMatch(Tokens.IMPORT_SYM);\n                importToken = tokenStream.token();\n                this._readWhitespace();\n\n                tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);\n\n                //grab the URI value\n                uri = tokenStream.token().value.replace(/^(?:url\\()?[\"']?([^\"']+?)[\"']?\\)?$/, \"$1\");\n\n                this._readWhitespace();\n\n                mediaList = this._media_query_list();\n\n                //must end with a semicolon\n                tokenStream.mustMatch(Tokens.SEMICOLON);\n                this._readWhitespace();\n\n                if (emit !== false){\n                    this.fire({\n                        type:   \"import\",\n                        uri:    uri,\n                        media:  mediaList,\n                        line:   importToken.startLine,\n                        col:    importToken.startCol\n                    });\n                }\n\n            },\n\n            _namespace: function(emit){\n                /*\n                 * namespace\n                 *   : NAMESPACE_SYM S* [namespace_prefix S*]? [STRING|URI] S* ';' S*\n                 */\n\n                var tokenStream = this._tokenStream,\n                    line,\n                    col,\n                    prefix,\n                    uri;\n\n                //read import symbol\n                tokenStream.mustMatch(Tokens.NAMESPACE_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n                this._readWhitespace();\n\n                //it's a namespace prefix - no _namespace_prefix() method because it's just an IDENT\n                if (tokenStream.match(Tokens.IDENT)){\n                    prefix = tokenStream.token().value;\n                    this._readWhitespace();\n                }\n\n                tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);\n                /*if (!tokenStream.match(Tokens.STRING)){\n                    tokenStream.mustMatch(Tokens.URI);\n                }*/\n\n                //grab the URI value\n                uri = tokenStream.token().value.replace(/(?:url\\()?[\"']([^\"']+)[\"']\\)?/, \"$1\");\n\n                this._readWhitespace();\n\n                //must end with a semicolon\n                tokenStream.mustMatch(Tokens.SEMICOLON);\n                this._readWhitespace();\n\n                if (emit !== false){\n                    this.fire({\n                        type:   \"namespace\",\n                        prefix: prefix,\n                        uri:    uri,\n                        line:   line,\n                        col:    col\n                    });\n                }\n\n            },\n\n            _media: function(){\n                /*\n                 * media\n                 *   : MEDIA_SYM S* media_query_list S* '{' S* ruleset* '}' S*\n                 *   ;\n                 */\n                var tokenStream     = this._tokenStream,\n                    line,\n                    col,\n                    mediaList;//       = [];\n\n                //look for @media\n                tokenStream.mustMatch(Tokens.MEDIA_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n\n                this._readWhitespace();\n\n                mediaList = this._media_query_list();\n\n                tokenStream.mustMatch(Tokens.LBRACE);\n                this._readWhitespace();\n\n                this.fire({\n                    type:   \"startmedia\",\n                    media:  mediaList,\n                    line:   line,\n                    col:    col\n                });\n\n                while(true) {\n                    if (tokenStream.peek() == Tokens.PAGE_SYM){\n                        this._page();\n                    } else if (tokenStream.peek() == Tokens.FONT_FACE_SYM){\n                        this._font_face();\n                    } else if (tokenStream.peek() == Tokens.VIEWPORT_SYM){\n                        this._viewport();\n                    } else if (!this._ruleset()){\n                        break;\n                    }\n                }\n\n                tokenStream.mustMatch(Tokens.RBRACE);\n                this._readWhitespace();\n\n                this.fire({\n                    type:   \"endmedia\",\n                    media:  mediaList,\n                    line:   line,\n                    col:    col\n                });\n            },\n\n\n            //CSS3 Media Queries\n            _media_query_list: function(){\n                /*\n                 * media_query_list\n                 *   : S* [media_query [ ',' S* media_query ]* ]?\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    mediaList   = [];\n\n\n                this._readWhitespace();\n\n                if (tokenStream.peek() == Tokens.IDENT || tokenStream.peek() == Tokens.LPAREN){\n                    mediaList.push(this._media_query());\n                }\n\n                while(tokenStream.match(Tokens.COMMA)){\n                    this._readWhitespace();\n                    mediaList.push(this._media_query());\n                }\n\n                return mediaList;\n            },\n\n            /*\n             * Note: \"expression\" in the grammar maps to the _media_expression\n             * method.\n\n             */\n            _media_query: function(){\n                /*\n                 * media_query\n                 *   : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*\n                 *   | expression [ AND S* expression ]*\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    type        = null,\n                    ident       = null,\n                    token       = null,\n                    expressions = [];\n\n                if (tokenStream.match(Tokens.IDENT)){\n                    ident = tokenStream.token().value.toLowerCase();\n\n                    //since there's no custom tokens for these, need to manually check\n                    if (ident != \"only\" && ident != \"not\"){\n                        tokenStream.unget();\n                        ident = null;\n                    } else {\n                        token = tokenStream.token();\n                    }\n                }\n\n                this._readWhitespace();\n\n                if (tokenStream.peek() == Tokens.IDENT){\n                    type = this._media_type();\n                    if (token === null){\n                        token = tokenStream.token();\n                    }\n                } else if (tokenStream.peek() == Tokens.LPAREN){\n                    if (token === null){\n                        token = tokenStream.LT(1);\n                    }\n                    expressions.push(this._media_expression());\n                }\n\n                if (type === null && expressions.length === 0){\n                    return null;\n                } else {\n                    this._readWhitespace();\n                    while (tokenStream.match(Tokens.IDENT)){\n                        if (tokenStream.token().value.toLowerCase() != \"and\"){\n                            this._unexpectedToken(tokenStream.token());\n                        }\n\n                        this._readWhitespace();\n                        expressions.push(this._media_expression());\n                    }\n                }\n\n                return new MediaQuery(ident, type, expressions, token.startLine, token.startCol);\n            },\n\n            //CSS3 Media Queries\n            _media_type: function(){\n                /*\n                 * media_type\n                 *   : IDENT\n                 *   ;\n                 */\n                return this._media_feature();\n            },\n\n            /**\n             * Note: in CSS3 Media Queries, this is called \"expression\".\n             * Renamed here to avoid conflict with CSS3 Selectors\n             * definition of \"expression\". Also note that \"expr\" in the\n             * grammar now maps to \"expression\" from CSS3 selectors.\n             * @method _media_expression\n             * @private\n             */\n            _media_expression: function(){\n                /*\n                 * expression\n                 *  : '(' S* media_feature S* [ ':' S* expr ]? ')' S*\n                 *  ;\n                 */\n                var tokenStream = this._tokenStream,\n                    feature     = null,\n                    token,\n                    expression  = null;\n\n                tokenStream.mustMatch(Tokens.LPAREN);\n\n                feature = this._media_feature();\n                this._readWhitespace();\n\n                if (tokenStream.match(Tokens.COLON)){\n                    this._readWhitespace();\n                    token = tokenStream.LT(1);\n                    expression = this._expression();\n                }\n\n                tokenStream.mustMatch(Tokens.RPAREN);\n                this._readWhitespace();\n\n                return new MediaFeature(feature, (expression ? new SyntaxUnit(expression, token.startLine, token.startCol) : null));\n            },\n\n            //CSS3 Media Queries\n            _media_feature: function(){\n                /*\n                 * media_feature\n                 *   : IDENT\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream;\n\n                tokenStream.mustMatch(Tokens.IDENT);\n\n                return SyntaxUnit.fromToken(tokenStream.token());\n            },\n\n            //CSS3 Paged Media\n            _page: function(){\n                /*\n                 * page:\n                 *    PAGE_SYM S* IDENT? pseudo_page? S*\n                 *    '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*\n                 *    ;\n                 */\n                var tokenStream = this._tokenStream,\n                    line,\n                    col,\n                    identifier  = null,\n                    pseudoPage  = null;\n\n                //look for @page\n                tokenStream.mustMatch(Tokens.PAGE_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n\n                this._readWhitespace();\n\n                if (tokenStream.match(Tokens.IDENT)){\n                    identifier = tokenStream.token().value;\n\n                    //The value 'auto' may not be used as a page name and MUST be treated as a syntax error.\n                    if (identifier.toLowerCase() === \"auto\"){\n                        this._unexpectedToken(tokenStream.token());\n                    }\n                }\n\n                //see if there's a colon upcoming\n                if (tokenStream.peek() == Tokens.COLON){\n                    pseudoPage = this._pseudo_page();\n                }\n\n                this._readWhitespace();\n\n                this.fire({\n                    type:   \"startpage\",\n                    id:     identifier,\n                    pseudo: pseudoPage,\n                    line:   line,\n                    col:    col\n                });\n\n                this._readDeclarations(true, true);\n\n                this.fire({\n                    type:   \"endpage\",\n                    id:     identifier,\n                    pseudo: pseudoPage,\n                    line:   line,\n                    col:    col\n                });\n\n            },\n\n            //CSS3 Paged Media\n            _margin: function(){\n                /*\n                 * margin :\n                 *    margin_sym S* '{' declaration [ ';' S* declaration? ]* '}' S*\n                 *    ;\n                 */\n                var tokenStream = this._tokenStream,\n                    line,\n                    col,\n                    marginSym   = this._margin_sym();\n\n                if (marginSym){\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n\n                    this.fire({\n                        type: \"startpagemargin\",\n                        margin: marginSym,\n                        line:   line,\n                        col:    col\n                    });\n\n                    this._readDeclarations(true);\n\n                    this.fire({\n                        type: \"endpagemargin\",\n                        margin: marginSym,\n                        line:   line,\n                        col:    col\n                    });\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n\n            //CSS3 Paged Media\n            _margin_sym: function(){\n\n                /*\n                 * margin_sym :\n                 *    TOPLEFTCORNER_SYM |\n                 *    TOPLEFT_SYM |\n                 *    TOPCENTER_SYM |\n                 *    TOPRIGHT_SYM |\n                 *    TOPRIGHTCORNER_SYM |\n                 *    BOTTOMLEFTCORNER_SYM |\n                 *    BOTTOMLEFT_SYM |\n                 *    BOTTOMCENTER_SYM |\n                 *    BOTTOMRIGHT_SYM |\n                 *    BOTTOMRIGHTCORNER_SYM |\n                 *    LEFTTOP_SYM |\n                 *    LEFTMIDDLE_SYM |\n                 *    LEFTBOTTOM_SYM |\n                 *    RIGHTTOP_SYM |\n                 *    RIGHTMIDDLE_SYM |\n                 *    RIGHTBOTTOM_SYM\n                 *    ;\n                 */\n\n                var tokenStream = this._tokenStream;\n\n                if(tokenStream.match([Tokens.TOPLEFTCORNER_SYM, Tokens.TOPLEFT_SYM,\n                        Tokens.TOPCENTER_SYM, Tokens.TOPRIGHT_SYM, Tokens.TOPRIGHTCORNER_SYM,\n                        Tokens.BOTTOMLEFTCORNER_SYM, Tokens.BOTTOMLEFT_SYM,\n                        Tokens.BOTTOMCENTER_SYM, Tokens.BOTTOMRIGHT_SYM,\n                        Tokens.BOTTOMRIGHTCORNER_SYM, Tokens.LEFTTOP_SYM,\n                        Tokens.LEFTMIDDLE_SYM, Tokens.LEFTBOTTOM_SYM, Tokens.RIGHTTOP_SYM,\n                        Tokens.RIGHTMIDDLE_SYM, Tokens.RIGHTBOTTOM_SYM]))\n                {\n                    return SyntaxUnit.fromToken(tokenStream.token());\n                } else {\n                    return null;\n                }\n\n            },\n\n            _pseudo_page: function(){\n                /*\n                 * pseudo_page\n                 *   : ':' IDENT\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream;\n\n                tokenStream.mustMatch(Tokens.COLON);\n                tokenStream.mustMatch(Tokens.IDENT);\n\n                //TODO: CSS3 Paged Media says only \"left\", \"center\", and \"right\" are allowed\n\n                return tokenStream.token().value;\n            },\n\n            _font_face: function(){\n                /*\n                 * font_face\n                 *   : FONT_FACE_SYM S*\n                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    line,\n                    col;\n\n                //look for @page\n                tokenStream.mustMatch(Tokens.FONT_FACE_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n\n                this._readWhitespace();\n\n                this.fire({\n                    type:   \"startfontface\",\n                    line:   line,\n                    col:    col\n                });\n\n                this._readDeclarations(true);\n\n                this.fire({\n                    type:   \"endfontface\",\n                    line:   line,\n                    col:    col\n                });\n            },\n\n            _viewport: function(){\n                /*\n                 * viewport\n                 *   : VIEWPORT_SYM S*\n                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*\n                 *   ;\n                 */\n                 var tokenStream = this._tokenStream,\n                    line,\n                    col;\n\n                    tokenStream.mustMatch(Tokens.VIEWPORT_SYM);\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n\n                    this._readWhitespace();\n\n                    this.fire({\n                        type:   \"startviewport\",\n                        line:   line,\n                        col:    col\n                    });\n\n                    this._readDeclarations(true);\n\n                    this.fire({\n                        type:   \"endviewport\",\n                        line:   line,\n                        col:    col\n                    });\n\n            },\n\n            _operator: function(inFunction){\n\n                /*\n                 * operator (outside function)\n                 *  : '/' S* | ',' S* | /( empty )/\n                 * operator (inside function)\n                 *  : '/' S* | '+' S* | '*' S* | '-' S* /( empty )/\n                 *  ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    token       = null;\n\n                if (tokenStream.match([Tokens.SLASH, Tokens.COMMA]) ||\n                    (inFunction && tokenStream.match([Tokens.PLUS, Tokens.STAR, Tokens.MINUS]))){\n                    token =  tokenStream.token();\n                    this._readWhitespace();\n                }\n                return token ? PropertyValuePart.fromToken(token) : null;\n\n            },\n\n            _combinator: function(){\n\n                /*\n                 * combinator\n                 *  : PLUS S* | GREATER S* | TILDE S* | S+\n                 *  ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    value       = null,\n                    token;\n\n                if(tokenStream.match([Tokens.PLUS, Tokens.GREATER, Tokens.TILDE])){\n                    token = tokenStream.token();\n                    value = new Combinator(token.value, token.startLine, token.startCol);\n                    this._readWhitespace();\n                }\n\n                return value;\n            },\n\n            _unary_operator: function(){\n\n                /*\n                 * unary_operator\n                 *  : '-' | '+'\n                 *  ;\n                 */\n\n                var tokenStream = this._tokenStream;\n\n                if (tokenStream.match([Tokens.MINUS, Tokens.PLUS])){\n                    return tokenStream.token().value;\n                } else {\n                    return null;\n                }\n            },\n\n            _property: function(){\n\n                /*\n                 * property\n                 *   : IDENT S*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    value       = null,\n                    hack        = null,\n                    tokenValue,\n                    token,\n                    line,\n                    col;\n\n                //check for star hack - throws error if not allowed\n                if (tokenStream.peek() == Tokens.STAR && this.options.starHack){\n                    tokenStream.get();\n                    token = tokenStream.token();\n                    hack = token.value;\n                    line = token.startLine;\n                    col = token.startCol;\n                }\n\n                if(tokenStream.match(Tokens.IDENT)){\n                    token = tokenStream.token();\n                    tokenValue = token.value;\n\n                    //check for underscore hack - no error if not allowed because it's valid CSS syntax\n                    if (tokenValue.charAt(0) == \"_\" && this.options.underscoreHack){\n                        hack = \"_\";\n                        tokenValue = tokenValue.substring(1);\n                    }\n\n                    value = new PropertyName(tokenValue, hack, (line||token.startLine), (col||token.startCol));\n                    this._readWhitespace();\n                }\n\n                return value;\n            },\n\n            //Augmented with CSS3 Selectors\n            _ruleset: function(){\n                /*\n                 * ruleset\n                 *   : selectors_group\n                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    tt,\n                    selectors;\n\n\n                /*\n                 * Error Recovery: If even a single selector fails to parse,\n                 * then the entire ruleset should be thrown away.\n                 */\n                try {\n                    selectors = this._selectors_group();\n                } catch (ex){\n                    if (ex instanceof SyntaxError && !this.options.strict){\n\n                        //fire error event\n                        this.fire({\n                            type:       \"error\",\n                            error:      ex,\n                            message:    ex.message,\n                            line:       ex.line,\n                            col:        ex.col\n                        });\n\n                        //skip over everything until closing brace\n                        tt = tokenStream.advance([Tokens.RBRACE]);\n                        if (tt == Tokens.RBRACE){\n                            //if there's a right brace, the rule is finished so don't do anything\n                        } else {\n                            //otherwise, rethrow the error because it wasn't handled properly\n                            throw ex;\n                        }\n\n                    } else {\n                        //not a syntax error, rethrow it\n                        throw ex;\n                    }\n\n                    //trigger parser to continue\n                    return true;\n                }\n\n                //if it got here, all selectors parsed\n                if (selectors){\n\n                    this.fire({\n                        type:       \"startrule\",\n                        selectors:  selectors,\n                        line:       selectors[0].line,\n                        col:        selectors[0].col\n                    });\n\n                    this._readDeclarations(true);\n\n                    this.fire({\n                        type:       \"endrule\",\n                        selectors:  selectors,\n                        line:       selectors[0].line,\n                        col:        selectors[0].col\n                    });\n\n                }\n\n                return selectors;\n\n            },\n\n            //CSS3 Selectors\n            _selectors_group: function(){\n\n                /*\n                 * selectors_group\n                 *   : selector [ COMMA S* selector ]*\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    selectors   = [],\n                    selector;\n\n                selector = this._selector();\n                if (selector !== null){\n\n                    selectors.push(selector);\n                    while(tokenStream.match(Tokens.COMMA)){\n                        this._readWhitespace();\n                        selector = this._selector();\n                        if (selector !== null){\n                            selectors.push(selector);\n                        } else {\n                            this._unexpectedToken(tokenStream.LT(1));\n                        }\n                    }\n                }\n\n                return selectors.length ? selectors : null;\n            },\n\n            //CSS3 Selectors\n            _selector: function(){\n                /*\n                 * selector\n                 *   : simple_selector_sequence [ combinator simple_selector_sequence ]*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    selector    = [],\n                    nextSelector = null,\n                    combinator  = null,\n                    ws          = null;\n\n                //if there's no simple selector, then there's no selector\n                nextSelector = this._simple_selector_sequence();\n                if (nextSelector === null){\n                    return null;\n                }\n\n                selector.push(nextSelector);\n\n                do {\n\n                    //look for a combinator\n                    combinator = this._combinator();\n\n                    if (combinator !== null){\n                        selector.push(combinator);\n                        nextSelector = this._simple_selector_sequence();\n\n                        //there must be a next selector\n                        if (nextSelector === null){\n                            this._unexpectedToken(tokenStream.LT(1));\n                        } else {\n\n                            //nextSelector is an instance of SelectorPart\n                            selector.push(nextSelector);\n                        }\n                    } else {\n\n                        //if there's not whitespace, we're done\n                        if (this._readWhitespace()){\n\n                            //add whitespace separator\n                            ws = new Combinator(tokenStream.token().value, tokenStream.token().startLine, tokenStream.token().startCol);\n\n                            //combinator is not required\n                            combinator = this._combinator();\n\n                            //selector is required if there's a combinator\n                            nextSelector = this._simple_selector_sequence();\n                            if (nextSelector === null){\n                                if (combinator !== null){\n                                    this._unexpectedToken(tokenStream.LT(1));\n                                }\n                            } else {\n\n                                if (combinator !== null){\n                                    selector.push(combinator);\n                                } else {\n                                    selector.push(ws);\n                                }\n\n                                selector.push(nextSelector);\n                            }\n                        } else {\n                            break;\n                        }\n\n                    }\n                } while(true);\n\n                return new Selector(selector, selector[0].line, selector[0].col);\n            },\n\n            //CSS3 Selectors\n            _simple_selector_sequence: function(){\n                /*\n                 * simple_selector_sequence\n                 *   : [ type_selector | universal ]\n                 *     [ HASH | class | attrib | pseudo | negation ]*\n                 *   | [ HASH | class | attrib | pseudo | negation ]+\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n\n                    //parts of a simple selector\n                    elementName = null,\n                    modifiers   = [],\n\n                    //complete selector text\n                    selectorText= \"\",\n\n                    //the different parts after the element name to search for\n                    components  = [\n                        //HASH\n                        function(){\n                            return tokenStream.match(Tokens.HASH) ?\n                                    new SelectorSubPart(tokenStream.token().value, \"id\", tokenStream.token().startLine, tokenStream.token().startCol) :\n                                    null;\n                        },\n                        this._class,\n                        this._attrib,\n                        this._pseudo,\n                        this._negation\n                    ],\n                    i           = 0,\n                    len         = components.length,\n                    component   = null,\n                    found       = false,\n                    line,\n                    col;\n\n\n                //get starting line and column for the selector\n                line = tokenStream.LT(1).startLine;\n                col = tokenStream.LT(1).startCol;\n\n                elementName = this._type_selector();\n                if (!elementName){\n                    elementName = this._universal();\n                }\n\n                if (elementName !== null){\n                    selectorText += elementName;\n                }\n\n                while(true){\n\n                    //whitespace means we're done\n                    if (tokenStream.peek() === Tokens.S){\n                        break;\n                    }\n\n                    //check for each component\n                    while(i < len && component === null){\n                        component = components[i++].call(this);\n                    }\n\n                    if (component === null){\n\n                        //we don't have a selector\n                        if (selectorText === \"\"){\n                            return null;\n                        } else {\n                            break;\n                        }\n                    } else {\n                        i = 0;\n                        modifiers.push(component);\n                        selectorText += component.toString();\n                        component = null;\n                    }\n                }\n\n\n                return selectorText !== \"\" ?\n                        new SelectorPart(elementName, modifiers, selectorText, line, col) :\n                        null;\n            },\n\n            //CSS3 Selectors\n            _type_selector: function(){\n                /*\n                 * type_selector\n                 *   : [ namespace_prefix ]? element_name\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    ns          = this._namespace_prefix(),\n                    elementName = this._element_name();\n\n                if (!elementName){\n                    /*\n                     * Need to back out the namespace that was read due to both\n                     * type_selector and universal reading namespace_prefix\n                     * first. Kind of hacky, but only way I can figure out\n                     * right now how to not change the grammar.\n                     */\n                    if (ns){\n                        tokenStream.unget();\n                        if (ns.length > 1){\n                            tokenStream.unget();\n                        }\n                    }\n\n                    return null;\n                } else {\n                    if (ns){\n                        elementName.text = ns + elementName.text;\n                        elementName.col -= ns.length;\n                    }\n                    return elementName;\n                }\n            },\n\n            //CSS3 Selectors\n            _class: function(){\n                /*\n                 * class\n                 *   : '.' IDENT\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    token;\n\n                if (tokenStream.match(Tokens.DOT)){\n                    tokenStream.mustMatch(Tokens.IDENT);\n                    token = tokenStream.token();\n                    return new SelectorSubPart(\".\" + token.value, \"class\", token.startLine, token.startCol - 1);\n                } else {\n                    return null;\n                }\n\n            },\n\n            //CSS3 Selectors\n            _element_name: function(){\n                /*\n                 * element_name\n                 *   : IDENT\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    token;\n\n                if (tokenStream.match(Tokens.IDENT)){\n                    token = tokenStream.token();\n                    return new SelectorSubPart(token.value, \"elementName\", token.startLine, token.startCol);\n\n                } else {\n                    return null;\n                }\n            },\n\n            //CSS3 Selectors\n            _namespace_prefix: function(){\n                /*\n                 * namespace_prefix\n                 *   : [ IDENT | '*' ]? '|'\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    value       = \"\";\n\n                //verify that this is a namespace prefix\n                if (tokenStream.LA(1) === Tokens.PIPE || tokenStream.LA(2) === Tokens.PIPE){\n\n                    if(tokenStream.match([Tokens.IDENT, Tokens.STAR])){\n                        value += tokenStream.token().value;\n                    }\n\n                    tokenStream.mustMatch(Tokens.PIPE);\n                    value += \"|\";\n\n                }\n\n                return value.length ? value : null;\n            },\n\n            //CSS3 Selectors\n            _universal: function(){\n                /*\n                 * universal\n                 *   : [ namespace_prefix ]? '*'\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    value       = \"\",\n                    ns;\n\n                ns = this._namespace_prefix();\n                if(ns){\n                    value += ns;\n                }\n\n                if(tokenStream.match(Tokens.STAR)){\n                    value += \"*\";\n                }\n\n                return value.length ? value : null;\n\n           },\n\n            //CSS3 Selectors\n            _attrib: function(){\n                /*\n                 * attrib\n                 *   : '[' S* [ namespace_prefix ]? IDENT S*\n                 *         [ [ PREFIXMATCH |\n                 *             SUFFIXMATCH |\n                 *             SUBSTRINGMATCH |\n                 *             '=' |\n                 *             INCLUDES |\n                 *             DASHMATCH ] S* [ IDENT | STRING ] S*\n                 *         ]? ']'\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    value       = null,\n                    ns,\n                    token;\n\n                if (tokenStream.match(Tokens.LBRACKET)){\n                    token = tokenStream.token();\n                    value = token.value;\n                    value += this._readWhitespace();\n\n                    ns = this._namespace_prefix();\n\n                    if (ns){\n                        value += ns;\n                    }\n\n                    tokenStream.mustMatch(Tokens.IDENT);\n                    value += tokenStream.token().value;\n                    value += this._readWhitespace();\n\n                    if(tokenStream.match([Tokens.PREFIXMATCH, Tokens.SUFFIXMATCH, Tokens.SUBSTRINGMATCH,\n                            Tokens.EQUALS, Tokens.INCLUDES, Tokens.DASHMATCH])){\n\n                        value += tokenStream.token().value;\n                        value += this._readWhitespace();\n\n                        tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);\n                        value += tokenStream.token().value;\n                        value += this._readWhitespace();\n                    }\n\n                    tokenStream.mustMatch(Tokens.RBRACKET);\n\n                    return new SelectorSubPart(value + \"]\", \"attribute\", token.startLine, token.startCol);\n                } else {\n                    return null;\n                }\n            },\n\n            //CSS3 Selectors\n            _pseudo: function(){\n\n                /*\n                 * pseudo\n                 *   : ':' ':'? [ IDENT | functional_pseudo ]\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    pseudo      = null,\n                    colons      = \":\",\n                    line,\n                    col;\n\n                if (tokenStream.match(Tokens.COLON)){\n\n                    if (tokenStream.match(Tokens.COLON)){\n                        colons += \":\";\n                    }\n\n                    if (tokenStream.match(Tokens.IDENT)){\n                        pseudo = tokenStream.token().value;\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol - colons.length;\n                    } else if (tokenStream.peek() == Tokens.FUNCTION){\n                        line = tokenStream.LT(1).startLine;\n                        col = tokenStream.LT(1).startCol - colons.length;\n                        pseudo = this._functional_pseudo();\n                    }\n\n                    if (pseudo){\n                        pseudo = new SelectorSubPart(colons + pseudo, \"pseudo\", line, col);\n                    }\n                }\n\n                return pseudo;\n            },\n\n            //CSS3 Selectors\n            _functional_pseudo: function(){\n                /*\n                 * functional_pseudo\n                 *   : FUNCTION S* expression ')'\n                 *   ;\n                */\n\n                var tokenStream = this._tokenStream,\n                    value = null;\n\n                if(tokenStream.match(Tokens.FUNCTION)){\n                    value = tokenStream.token().value;\n                    value += this._readWhitespace();\n                    value += this._expression();\n                    tokenStream.mustMatch(Tokens.RPAREN);\n                    value += \")\";\n                }\n\n                return value;\n            },\n\n            //CSS3 Selectors\n            _expression: function(){\n                /*\n                 * expression\n                 *   : [ [ PLUS | '-' | DIMENSION | NUMBER | STRING | IDENT ] S* ]+\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    value       = \"\";\n\n                while(tokenStream.match([Tokens.PLUS, Tokens.MINUS, Tokens.DIMENSION,\n                        Tokens.NUMBER, Tokens.STRING, Tokens.IDENT, Tokens.LENGTH,\n                        Tokens.FREQ, Tokens.ANGLE, Tokens.TIME,\n                        Tokens.RESOLUTION, Tokens.SLASH])){\n\n                    value += tokenStream.token().value;\n                    value += this._readWhitespace();\n                }\n\n                return value.length ? value : null;\n\n            },\n\n            //CSS3 Selectors\n            _negation: function(){\n                /*\n                 * negation\n                 *   : NOT S* negation_arg S* ')'\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    line,\n                    col,\n                    value       = \"\",\n                    arg,\n                    subpart     = null;\n\n                if (tokenStream.match(Tokens.NOT)){\n                    value = tokenStream.token().value;\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n                    value += this._readWhitespace();\n                    arg = this._negation_arg();\n                    value += arg;\n                    value += this._readWhitespace();\n                    tokenStream.match(Tokens.RPAREN);\n                    value += tokenStream.token().value;\n\n                    subpart = new SelectorSubPart(value, \"not\", line, col);\n                    subpart.args.push(arg);\n                }\n\n                return subpart;\n            },\n\n            //CSS3 Selectors\n            _negation_arg: function(){\n                /*\n                 * negation_arg\n                 *   : type_selector | universal | HASH | class | attrib | pseudo\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    args        = [\n                        this._type_selector,\n                        this._universal,\n                        function(){\n                            return tokenStream.match(Tokens.HASH) ?\n                                    new SelectorSubPart(tokenStream.token().value, \"id\", tokenStream.token().startLine, tokenStream.token().startCol) :\n                                    null;\n                        },\n                        this._class,\n                        this._attrib,\n                        this._pseudo\n                    ],\n                    arg         = null,\n                    i           = 0,\n                    len         = args.length,\n                    elementName,\n                    line,\n                    col,\n                    part;\n\n                line = tokenStream.LT(1).startLine;\n                col = tokenStream.LT(1).startCol;\n\n                while(i < len && arg === null){\n\n                    arg = args[i].call(this);\n                    i++;\n                }\n\n                //must be a negation arg\n                if (arg === null){\n                    this._unexpectedToken(tokenStream.LT(1));\n                }\n\n                //it's an element name\n                if (arg.type == \"elementName\"){\n                    part = new SelectorPart(arg, [], arg.toString(), line, col);\n                } else {\n                    part = new SelectorPart(null, [arg], arg.toString(), line, col);\n                }\n\n                return part;\n            },\n\n            _declaration: function(){\n\n                /*\n                 * declaration\n                 *   : property ':' S* expr prio?\n                 *   | /( empty )/\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    property    = null,\n                    expr        = null,\n                    prio        = null,\n                    error       = null,\n                    invalid     = null,\n                    propertyName= \"\";\n\n                property = this._property();\n                if (property !== null){\n\n                    tokenStream.mustMatch(Tokens.COLON);\n                    this._readWhitespace();\n\n                    expr = this._expr();\n\n                    //if there's no parts for the value, it's an error\n                    if (!expr || expr.length === 0){\n                        this._unexpectedToken(tokenStream.LT(1));\n                    }\n\n                    prio = this._prio();\n\n                    /*\n                     * If hacks should be allowed, then only check the root\n                     * property. If hacks should not be allowed, treat\n                     * _property or *property as invalid properties.\n                     */\n                    propertyName = property.toString();\n                    if (this.options.starHack && property.hack == \"*\" ||\n                            this.options.underscoreHack && property.hack == \"_\") {\n\n                        propertyName = property.text;\n                    }\n\n                    try {\n                        this._validateProperty(propertyName, expr);\n                    } catch (ex) {\n                        invalid = ex;\n                    }\n\n                    this.fire({\n                        type:       \"property\",\n                        property:   property,\n                        value:      expr,\n                        important:  prio,\n                        line:       property.line,\n                        col:        property.col,\n                        invalid:    invalid\n                    });\n\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n\n            _prio: function(){\n                /*\n                 * prio\n                 *   : IMPORTANT_SYM S*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    result      = tokenStream.match(Tokens.IMPORTANT_SYM);\n\n                this._readWhitespace();\n                return result;\n            },\n\n            _expr: function(inFunction){\n                /*\n                 * expr\n                 *   : term [ operator term ]*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    values      = [],\n\t\t\t\t\t//valueParts\t= [],\n                    value       = null,\n                    operator    = null;\n\n                value = this._term(inFunction);\n                if (value !== null){\n\n                    values.push(value);\n\n                    do {\n                        operator = this._operator(inFunction);\n\n                        //if there's an operator, keep building up the value parts\n                        if (operator){\n                            values.push(operator);\n                        } /*else {\n                            //if there's not an operator, you have a full value\n\t\t\t\t\t\t\tvalues.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));\n\t\t\t\t\t\t\tvalueParts = [];\n\t\t\t\t\t\t}*/\n\n                        value = this._term(inFunction);\n\n                        if (value === null){\n                            break;\n                        } else {\n                            values.push(value);\n                        }\n                    } while(true);\n                }\n\n\t\t\t\t//cleanup\n                /*if (valueParts.length){\n                    values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));\n                }*/\n\n                return values.length > 0 ? new PropertyValue(values, values[0].line, values[0].col) : null;\n            },\n\n            _term: function(inFunction){\n\n                /*\n                 * term\n                 *   : unary_operator?\n                 *     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | ANGLE S* |\n                 *       TIME S* | FREQ S* | function | ie_function ]\n                 *   | STRING S* | IDENT S* | URI S* | UNICODERANGE S* | hexcolor\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    unary       = null,\n                    value       = null,\n                    endChar     = null,\n                    token,\n                    line,\n                    col;\n\n                //returns the operator or null\n                unary = this._unary_operator();\n                if (unary !== null){\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n                }\n\n                //exception for IE filters\n                if (tokenStream.peek() == Tokens.IE_FUNCTION && this.options.ieFilters){\n\n                    value = this._ie_function();\n                    if (unary === null){\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol;\n                    }\n\n                //see if it's a simple block\n                } else if (inFunction && tokenStream.match([Tokens.LPAREN, Tokens.LBRACE, Tokens.LBRACKET])){\n\n                    token = tokenStream.token();\n                    endChar = token.endChar;\n                    value = token.value + this._expr(inFunction).text;\n                    if (unary === null){\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol;\n                    }\n                    tokenStream.mustMatch(Tokens.type(endChar));\n                    value += endChar;\n                    this._readWhitespace();\n\n                //see if there's a simple match\n                } else if (tokenStream.match([Tokens.NUMBER, Tokens.PERCENTAGE, Tokens.LENGTH,\n                        Tokens.ANGLE, Tokens.TIME,\n                        Tokens.FREQ, Tokens.STRING, Tokens.IDENT, Tokens.URI, Tokens.UNICODE_RANGE])){\n\n                    value = tokenStream.token().value;\n                    if (unary === null){\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol;\n                    }\n                    this._readWhitespace();\n                } else {\n\n                    //see if it's a color\n                    token = this._hexcolor();\n                    if (token === null){\n\n                        //if there's no unary, get the start of the next token for line/col info\n                        if (unary === null){\n                            line = tokenStream.LT(1).startLine;\n                            col = tokenStream.LT(1).startCol;\n                        }\n\n                        //has to be a function\n                        if (value === null){\n\n                            /*\n                             * This checks for alpha(opacity=0) style of IE\n                             * functions. IE_FUNCTION only presents progid: style.\n                             */\n                            if (tokenStream.LA(3) == Tokens.EQUALS && this.options.ieFilters){\n                                value = this._ie_function();\n                            } else {\n                                value = this._function();\n                            }\n                        }\n\n                        /*if (value === null){\n                            return null;\n                            //throw new Error(\"Expected identifier at line \" + tokenStream.token().startLine + \", character \" +  tokenStream.token().startCol + \".\");\n                        }*/\n\n                    } else {\n                        value = token.value;\n                        if (unary === null){\n                            line = token.startLine;\n                            col = token.startCol;\n                        }\n                    }\n\n                }\n\n                return value !== null ?\n                        new PropertyValuePart(unary !== null ? unary + value : value, line, col) :\n                        null;\n\n            },\n\n            _function: function(){\n\n                /*\n                 * function\n                 *   : FUNCTION S* expr ')' S*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    functionText = null,\n                    expr        = null,\n                    lt;\n\n                if (tokenStream.match(Tokens.FUNCTION)){\n                    functionText = tokenStream.token().value;\n                    this._readWhitespace();\n                    expr = this._expr(true);\n                    functionText += expr;\n\n                    //START: Horrible hack in case it's an IE filter\n                    if (this.options.ieFilters && tokenStream.peek() == Tokens.EQUALS){\n                        do {\n\n                            if (this._readWhitespace()){\n                                functionText += tokenStream.token().value;\n                            }\n\n                            //might be second time in the loop\n                            if (tokenStream.LA(0) == Tokens.COMMA){\n                                functionText += tokenStream.token().value;\n                            }\n\n                            tokenStream.match(Tokens.IDENT);\n                            functionText += tokenStream.token().value;\n\n                            tokenStream.match(Tokens.EQUALS);\n                            functionText += tokenStream.token().value;\n\n                            //functionText += this._term();\n                            lt = tokenStream.peek();\n                            while(lt != Tokens.COMMA && lt != Tokens.S && lt != Tokens.RPAREN){\n                                tokenStream.get();\n                                functionText += tokenStream.token().value;\n                                lt = tokenStream.peek();\n                            }\n                        } while(tokenStream.match([Tokens.COMMA, Tokens.S]));\n                    }\n\n                    //END: Horrible Hack\n\n                    tokenStream.match(Tokens.RPAREN);\n                    functionText += \")\";\n                    this._readWhitespace();\n                }\n\n                return functionText;\n            },\n\n            _ie_function: function(){\n\n                /* (My own extension)\n                 * ie_function\n                 *   : IE_FUNCTION S* IDENT '=' term [S* ','? IDENT '=' term]+ ')' S*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    functionText = null,\n                    expr        = null,\n                    lt;\n\n                //IE function can begin like a regular function, too\n                if (tokenStream.match([Tokens.IE_FUNCTION, Tokens.FUNCTION])){\n                    functionText = tokenStream.token().value;\n\n                    do {\n\n                        if (this._readWhitespace()){\n                            functionText += tokenStream.token().value;\n                        }\n\n                        //might be second time in the loop\n                        if (tokenStream.LA(0) == Tokens.COMMA){\n                            functionText += tokenStream.token().value;\n                        }\n\n                        tokenStream.match(Tokens.IDENT);\n                        functionText += tokenStream.token().value;\n\n                        tokenStream.match(Tokens.EQUALS);\n                        functionText += tokenStream.token().value;\n\n                        //functionText += this._term();\n                        lt = tokenStream.peek();\n                        while(lt != Tokens.COMMA && lt != Tokens.S && lt != Tokens.RPAREN){\n                            tokenStream.get();\n                            functionText += tokenStream.token().value;\n                            lt = tokenStream.peek();\n                        }\n                    } while(tokenStream.match([Tokens.COMMA, Tokens.S]));\n\n                    tokenStream.match(Tokens.RPAREN);\n                    functionText += \")\";\n                    this._readWhitespace();\n                }\n\n                return functionText;\n            },\n\n            _hexcolor: function(){\n                /*\n                 * There is a constraint on the color that it must\n                 * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])\n                 * after the \"#\"; e.g., \"#000\" is OK, but \"#abcd\" is not.\n                 *\n                 * hexcolor\n                 *   : HASH S*\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    token = null,\n                    color;\n\n                if(tokenStream.match(Tokens.HASH)){\n\n                    //need to do some validation here\n\n                    token = tokenStream.token();\n                    color = token.value;\n                    if (!/#[a-f0-9]{3,6}/i.test(color)){\n                        throw new SyntaxError(\"Expected a hex color but found '\" + color + \"' at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n                    }\n                    this._readWhitespace();\n                }\n\n                return token;\n            },\n\n            //-----------------------------------------------------------------\n            // Animations methods\n            //-----------------------------------------------------------------\n\n            _keyframes: function(){\n\n                /*\n                 * keyframes:\n                 *   : KEYFRAMES_SYM S* keyframe_name S* '{' S* keyframe_rule* '}' {\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    token,\n                    tt,\n                    name,\n                    prefix = \"\";\n\n                tokenStream.mustMatch(Tokens.KEYFRAMES_SYM);\n                token = tokenStream.token();\n                if (/^@\\-([^\\-]+)\\-/.test(token.value)) {\n                    prefix = RegExp.$1;\n                }\n\n                this._readWhitespace();\n                name = this._keyframe_name();\n\n                this._readWhitespace();\n                tokenStream.mustMatch(Tokens.LBRACE);\n\n                this.fire({\n                    type:   \"startkeyframes\",\n                    name:   name,\n                    prefix: prefix,\n                    line:   token.startLine,\n                    col:    token.startCol\n                });\n\n                this._readWhitespace();\n                tt = tokenStream.peek();\n\n                //check for key\n                while(tt == Tokens.IDENT || tt == Tokens.PERCENTAGE) {\n                    this._keyframe_rule();\n                    this._readWhitespace();\n                    tt = tokenStream.peek();\n                }\n\n                this.fire({\n                    type:   \"endkeyframes\",\n                    name:   name,\n                    prefix: prefix,\n                    line:   token.startLine,\n                    col:    token.startCol\n                });\n\n                this._readWhitespace();\n                tokenStream.mustMatch(Tokens.RBRACE);\n\n            },\n\n            _keyframe_name: function(){\n\n                /*\n                 * keyframe_name:\n                 *   : IDENT\n                 *   | STRING\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    token;\n\n                tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);\n                return SyntaxUnit.fromToken(tokenStream.token());\n            },\n\n            _keyframe_rule: function(){\n\n                /*\n                 * keyframe_rule:\n                 *   : key_list S*\n                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    token,\n                    keyList = this._key_list();\n\n                this.fire({\n                    type:   \"startkeyframerule\",\n                    keys:   keyList,\n                    line:   keyList[0].line,\n                    col:    keyList[0].col\n                });\n\n                this._readDeclarations(true);\n\n                this.fire({\n                    type:   \"endkeyframerule\",\n                    keys:   keyList,\n                    line:   keyList[0].line,\n                    col:    keyList[0].col\n                });\n\n            },\n\n            _key_list: function(){\n\n                /*\n                 * key_list:\n                 *   : key [ S* ',' S* key]*\n                 *   ;\n                 */\n                var tokenStream = this._tokenStream,\n                    token,\n                    key,\n                    keyList = [];\n\n                //must be least one key\n                keyList.push(this._key());\n\n                this._readWhitespace();\n\n                while(tokenStream.match(Tokens.COMMA)){\n                    this._readWhitespace();\n                    keyList.push(this._key());\n                    this._readWhitespace();\n                }\n\n                return keyList;\n            },\n\n            _key: function(){\n                /*\n                 * There is a restriction that IDENT can be only \"from\" or \"to\".\n                 *\n                 * key\n                 *   : PERCENTAGE\n                 *   | IDENT\n                 *   ;\n                 */\n\n                var tokenStream = this._tokenStream,\n                    token;\n\n                if (tokenStream.match(Tokens.PERCENTAGE)){\n                    return SyntaxUnit.fromToken(tokenStream.token());\n                } else if (tokenStream.match(Tokens.IDENT)){\n                    token = tokenStream.token();\n\n                    if (/from|to/i.test(token.value)){\n                        return SyntaxUnit.fromToken(token);\n                    }\n\n                    tokenStream.unget();\n                }\n\n                //if it gets here, there wasn't a valid token, so time to explode\n                this._unexpectedToken(tokenStream.LT(1));\n            },\n\n            //-----------------------------------------------------------------\n            // Helper methods\n            //-----------------------------------------------------------------\n\n            /**\n             * Not part of CSS grammar, but useful for skipping over\n             * combination of white space and HTML-style comments.\n             * @return {void}\n             * @method _skipCruft\n             * @private\n             */\n            _skipCruft: function(){\n                while(this._tokenStream.match([Tokens.S, Tokens.CDO, Tokens.CDC])){\n                    //noop\n                }\n            },\n\n            /**\n             * Not part of CSS grammar, but this pattern occurs frequently\n             * in the official CSS grammar. Split out here to eliminate\n             * duplicate code.\n             * @param {Boolean} checkStart Indicates if the rule should check\n             *      for the left brace at the beginning.\n             * @param {Boolean} readMargins Indicates if the rule should check\n             *      for margin patterns.\n             * @return {void}\n             * @method _readDeclarations\n             * @private\n             */\n            _readDeclarations: function(checkStart, readMargins){\n                /*\n                 * Reads the pattern\n                 * S* '{' S* declaration [ ';' S* declaration ]* '}' S*\n                 * or\n                 * S* '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*\n                 * Note that this is how it is described in CSS3 Paged Media, but is actually incorrect.\n                 * A semicolon is only necessary following a declaration is there's another declaration\n                 * or margin afterwards.\n                 */\n                var tokenStream = this._tokenStream,\n                    tt;\n\n\n                this._readWhitespace();\n\n                if (checkStart){\n                    tokenStream.mustMatch(Tokens.LBRACE);\n                }\n\n                this._readWhitespace();\n\n                try {\n\n                    while(true){\n\n                        if (tokenStream.match(Tokens.SEMICOLON) || (readMargins && this._margin())){\n                            //noop\n                        } else if (this._declaration()){\n                            if (!tokenStream.match(Tokens.SEMICOLON)){\n                                break;\n                            }\n                        } else {\n                            break;\n                        }\n\n                        //if ((!this._margin() && !this._declaration()) || !tokenStream.match(Tokens.SEMICOLON)){\n                        //    break;\n                        //}\n                        this._readWhitespace();\n                    }\n\n                    tokenStream.mustMatch(Tokens.RBRACE);\n                    this._readWhitespace();\n\n                } catch (ex) {\n                    if (ex instanceof SyntaxError && !this.options.strict){\n\n                        //fire error event\n                        this.fire({\n                            type:       \"error\",\n                            error:      ex,\n                            message:    ex.message,\n                            line:       ex.line,\n                            col:        ex.col\n                        });\n\n                        //see if there's another declaration\n                        tt = tokenStream.advance([Tokens.SEMICOLON, Tokens.RBRACE]);\n                        if (tt == Tokens.SEMICOLON){\n                            //if there's a semicolon, then there might be another declaration\n                            this._readDeclarations(false, readMargins);\n                        } else if (tt != Tokens.RBRACE){\n                            //if there's a right brace, the rule is finished so don't do anything\n                            //otherwise, rethrow the error because it wasn't handled properly\n                            throw ex;\n                        }\n\n                    } else {\n                        //not a syntax error, rethrow it\n                        throw ex;\n                    }\n                }\n\n            },\n\n            /**\n             * In some cases, you can end up with two white space tokens in a\n             * row. Instead of making a change in every function that looks for\n             * white space, this function is used to match as much white space\n             * as necessary.\n             * @method _readWhitespace\n             * @return {String} The white space if found, empty string if not.\n             * @private\n             */\n            _readWhitespace: function(){\n\n                var tokenStream = this._tokenStream,\n                    ws = \"\";\n\n                while(tokenStream.match(Tokens.S)){\n                    ws += tokenStream.token().value;\n                }\n\n                return ws;\n            },\n\n\n            /**\n             * Throws an error when an unexpected token is found.\n             * @param {Object} token The token that was found.\n             * @method _unexpectedToken\n             * @return {void}\n             * @private\n             */\n            _unexpectedToken: function(token){\n                throw new SyntaxError(\"Unexpected token '\" + token.value + \"' at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n            },\n\n            /**\n             * Helper method used for parsing subparts of a style sheet.\n             * @return {void}\n             * @method _verifyEnd\n             * @private\n             */\n            _verifyEnd: function(){\n                if (this._tokenStream.LA(1) != Tokens.EOF){\n                    this._unexpectedToken(this._tokenStream.LT(1));\n                }\n            },\n\n            //-----------------------------------------------------------------\n            // Validation methods\n            //-----------------------------------------------------------------\n            _validateProperty: function(property, value){\n                Validation.validate(property, value);\n            },\n\n            //-----------------------------------------------------------------\n            // Parsing methods\n            //-----------------------------------------------------------------\n\n            parse: function(input){\n                this._tokenStream = new TokenStream(input, Tokens);\n                this._stylesheet();\n            },\n\n            parseStyleSheet: function(input){\n                //just passthrough\n                return this.parse(input);\n            },\n\n            parseMediaQuery: function(input){\n                this._tokenStream = new TokenStream(input, Tokens);\n                var result = this._media_query();\n\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n\n                //otherwise return result\n                return result;\n            },\n\n            /**\n             * Parses a property value (everything after the semicolon).\n             * @return {parserlib.css.PropertyValue} The property value.\n             * @throws parserlib.util.SyntaxError If an unexpected token is found.\n             * @method parserPropertyValue\n             */\n            parsePropertyValue: function(input){\n\n                this._tokenStream = new TokenStream(input, Tokens);\n                this._readWhitespace();\n\n                var result = this._expr();\n\n                //okay to have a trailing white space\n                this._readWhitespace();\n\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n\n                //otherwise return result\n                return result;\n            },\n\n            /**\n             * Parses a complete CSS rule, including selectors and\n             * properties.\n             * @param {String} input The text to parser.\n             * @return {Boolean} True if the parse completed successfully, false if not.\n             * @method parseRule\n             */\n            parseRule: function(input){\n                this._tokenStream = new TokenStream(input, Tokens);\n\n                //skip any leading white space\n                this._readWhitespace();\n\n                var result = this._ruleset();\n\n                //skip any trailing white space\n                this._readWhitespace();\n\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n\n                //otherwise return result\n                return result;\n            },\n\n            /**\n             * Parses a single CSS selector (no comma)\n             * @param {String} input The text to parse as a CSS selector.\n             * @return {Selector} An object representing the selector.\n             * @throws parserlib.util.SyntaxError If an unexpected token is found.\n             * @method parseSelector\n             */\n            parseSelector: function(input){\n\n                this._tokenStream = new TokenStream(input, Tokens);\n\n                //skip any leading white space\n                this._readWhitespace();\n\n                var result = this._selector();\n\n                //skip any trailing white space\n                this._readWhitespace();\n\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n\n                //otherwise return result\n                return result;\n            },\n\n            /**\n             * Parses an HTML style attribute: a set of CSS declarations\n             * separated by semicolons.\n             * @param {String} input The text to parse as a style attribute\n             * @return {void}\n             * @method parseStyleAttribute\n             */\n            parseStyleAttribute: function(input){\n                input += \"}\"; // for error recovery in _readDeclarations()\n                this._tokenStream = new TokenStream(input, Tokens);\n                this._readDeclarations();\n            }\n        };\n\n    //copy over onto prototype\n    for (prop in additions){\n        if (additions.hasOwnProperty(prop)){\n            proto[prop] = additions[prop];\n        }\n    }\n\n    return proto;\n}();\n\n\n/*\nnth\n  : S* [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]? |\n         ['-'|'+']? INTEGER | {O}{D}{D} | {E}{V}{E}{N} ] S*\n  ;\n*/\n/*global Validation, ValidationTypes, ValidationError*/\nvar Properties = {\n\n    //A\n    \"align-items\"                   : \"flex-start | flex-end | center | baseline | stretch\",\n    \"align-content\"                 : \"flex-start | flex-end | center | space-between | space-around | stretch\",\n    \"align-self\"                    : \"auto | flex-start | flex-end | center | baseline | stretch\",\n    \"-webkit-align-items\"           : \"flex-start | flex-end | center | baseline | stretch\",\n    \"-webkit-align-content\"         : \"flex-start | flex-end | center | space-between | space-around | stretch\",\n    \"-webkit-align-self\"            : \"auto | flex-start | flex-end | center | baseline | stretch\",\n    \"alignment-adjust\"              : \"auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>\",\n    \"alignment-baseline\"            : \"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n    \"animation\"                     : 1,\n    \"animation-delay\"               : { multi: \"<time>\", comma: true },\n    \"animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n    \"animation-duration\"            : { multi: \"<time>\", comma: true },\n    \"animation-fill-mode\"           : { multi: \"none | forwards | backwards | both\", comma: true },\n    \"animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n    \"animation-name\"                : { multi: \"none | <ident>\", comma: true },\n    \"animation-play-state\"          : { multi: \"running | paused\", comma: true },\n    \"animation-timing-function\"     : 1,\n\n    //vendor prefixed\n    \"-moz-animation-delay\"               : { multi: \"<time>\", comma: true },\n    \"-moz-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n    \"-moz-animation-duration\"            : { multi: \"<time>\", comma: true },\n    \"-moz-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n    \"-moz-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n    \"-moz-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\n    \"-ms-animation-delay\"               : { multi: \"<time>\", comma: true },\n    \"-ms-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n    \"-ms-animation-duration\"            : { multi: \"<time>\", comma: true },\n    \"-ms-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n    \"-ms-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n    \"-ms-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\n    \"-webkit-animation-delay\"               : { multi: \"<time>\", comma: true },\n    \"-webkit-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n    \"-webkit-animation-duration\"            : { multi: \"<time>\", comma: true },\n    \"-webkit-animation-fill-mode\"           : { multi: \"none | forwards | backwards | both\", comma: true },\n    \"-webkit-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n    \"-webkit-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n    \"-webkit-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\n    \"-o-animation-delay\"               : { multi: \"<time>\", comma: true },\n    \"-o-animation-direction\"           : { multi: \"normal | alternate\", comma: true },\n    \"-o-animation-duration\"            : { multi: \"<time>\", comma: true },\n    \"-o-animation-iteration-count\"     : { multi: \"<number> | infinite\", comma: true },\n    \"-o-animation-name\"                : { multi: \"none | <ident>\", comma: true },\n    \"-o-animation-play-state\"          : { multi: \"running | paused\", comma: true },\n\n    \"appearance\"                    : \"icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit\",\n    \"azimuth\"                       : function (expression) {\n        var simple      = \"<angle> | leftwards | rightwards | inherit\",\n            direction   = \"left-side | far-left | left | center-left | center | center-right | right | far-right | right-side\",\n            behind      = false,\n            valid       = false,\n            part;\n\n        if (!ValidationTypes.isAny(expression, simple)) {\n            if (ValidationTypes.isAny(expression, \"behind\")) {\n                behind = true;\n                valid = true;\n            }\n\n            if (ValidationTypes.isAny(expression, direction)) {\n                valid = true;\n                if (!behind) {\n                    ValidationTypes.isAny(expression, \"behind\");\n                }\n            }\n        }\n\n        if (expression.hasNext()) {\n            part = expression.next();\n            if (valid) {\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            } else {\n                throw new ValidationError(\"Expected (<'azimuth'>) but found '\" + part + \"'.\", part.line, part.col);\n            }\n        }\n    },\n\n    //B\n    \"backface-visibility\"           : \"visible | hidden\",\n    \"background\"                    : 1,\n    \"background-attachment\"         : { multi: \"<attachment>\", comma: true },\n    \"background-clip\"               : { multi: \"<box>\", comma: true },\n    \"background-color\"              : \"<color> | inherit\",\n    \"background-image\"              : { multi: \"<bg-image>\", comma: true },\n    \"background-origin\"             : { multi: \"<box>\", comma: true },\n    \"background-position\"           : { multi: \"<bg-position>\", comma: true },\n    \"background-repeat\"             : { multi: \"<repeat-style>\" },\n    \"background-size\"               : { multi: \"<bg-size>\", comma: true },\n    \"baseline-shift\"                : \"baseline | sub | super | <percentage> | <length>\",\n    \"behavior\"                      : 1,\n    \"binding\"                       : 1,\n    \"bleed\"                         : \"<length>\",\n    \"bookmark-label\"                : \"<content> | <attr> | <string>\",\n    \"bookmark-level\"                : \"none | <integer>\",\n    \"bookmark-state\"                : \"open | closed\",\n    \"bookmark-target\"               : \"none | <uri> | <attr>\",\n    \"border\"                        : \"<border-width> || <border-style> || <color>\",\n    \"border-bottom\"                 : \"<border-width> || <border-style> || <color>\",\n    \"border-bottom-color\"           : \"<color> | inherit\",\n    \"border-bottom-left-radius\"     :  \"<x-one-radius>\",\n    \"border-bottom-right-radius\"    :  \"<x-one-radius>\",\n    \"border-bottom-style\"           : \"<border-style>\",\n    \"border-bottom-width\"           : \"<border-width>\",\n    \"border-collapse\"               : \"collapse | separate | inherit\",\n    \"border-color\"                  : { multi: \"<color> | inherit\", max: 4 },\n    \"border-image\"                  : 1,\n    \"border-image-outset\"           : { multi: \"<length> | <number>\", max: 4 },\n    \"border-image-repeat\"           : { multi: \"stretch | repeat | round\", max: 2 },\n    \"border-image-slice\"            : function(expression) {\n\n        var valid   = false,\n            numeric = \"<number> | <percentage>\",\n            fill    = false,\n            count   = 0,\n            max     = 4,\n            part;\n\n        if (ValidationTypes.isAny(expression, \"fill\")) {\n            fill = true;\n            valid = true;\n        }\n\n        while (expression.hasNext() && count < max) {\n            valid = ValidationTypes.isAny(expression, numeric);\n            if (!valid) {\n                break;\n            }\n            count++;\n        }\n\n\n        if (!fill) {\n            ValidationTypes.isAny(expression, \"fill\");\n        } else {\n            valid = true;\n        }\n\n        if (expression.hasNext()) {\n            part = expression.next();\n            if (valid) {\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            } else {\n                throw new ValidationError(\"Expected ([<number> | <percentage>]{1,4} && fill?) but found '\" + part + \"'.\", part.line, part.col);\n            }\n        }\n    },\n    \"border-image-source\"           : \"<image> | none\",\n    \"border-image-width\"            : { multi: \"<length> | <percentage> | <number> | auto\", max: 4 },\n    \"border-left\"                   : \"<border-width> || <border-style> || <color>\",\n    \"border-left-color\"             : \"<color> | inherit\",\n    \"border-left-style\"             : \"<border-style>\",\n    \"border-left-width\"             : \"<border-width>\",\n    \"border-radius\"                 : function(expression) {\n\n        var valid   = false,\n            simple = \"<length> | <percentage> | inherit\",\n            slash   = false,\n            fill    = false,\n            count   = 0,\n            max     = 8,\n            part;\n\n        while (expression.hasNext() && count < max) {\n            valid = ValidationTypes.isAny(expression, simple);\n            if (!valid) {\n\n                if (expression.peek() == \"/\" && count > 0 && !slash) {\n                    slash = true;\n                    max = count + 5;\n                    expression.next();\n                } else {\n                    break;\n                }\n            }\n            count++;\n        }\n\n        if (expression.hasNext()) {\n            part = expression.next();\n            if (valid) {\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            } else {\n                throw new ValidationError(\"Expected (<'border-radius'>) but found '\" + part + \"'.\", part.line, part.col);\n            }\n        }\n    },\n    \"border-right\"                  : \"<border-width> || <border-style> || <color>\",\n    \"border-right-color\"            : \"<color> | inherit\",\n    \"border-right-style\"            : \"<border-style>\",\n    \"border-right-width\"            : \"<border-width>\",\n    \"border-spacing\"                : { multi: \"<length> | inherit\", max: 2 },\n    \"border-style\"                  : { multi: \"<border-style>\", max: 4 },\n    \"border-top\"                    : \"<border-width> || <border-style> || <color>\",\n    \"border-top-color\"              : \"<color> | inherit\",\n    \"border-top-left-radius\"        : \"<x-one-radius>\",\n    \"border-top-right-radius\"       : \"<x-one-radius>\",\n    \"border-top-style\"              : \"<border-style>\",\n    \"border-top-width\"              : \"<border-width>\",\n    \"border-width\"                  : { multi: \"<border-width>\", max: 4 },\n    \"bottom\"                        : \"<margin-width> | inherit\",\n    \"-moz-box-align\"                : \"start | end | center | baseline | stretch\",\n    \"-moz-box-decoration-break\"     : \"slice |clone\",\n    \"-moz-box-direction\"            : \"normal | reverse | inherit\",\n    \"-moz-box-flex\"                 : \"<number>\",\n    \"-moz-box-flex-group\"           : \"<integer>\",\n    \"-moz-box-lines\"                : \"single | multiple\",\n    \"-moz-box-ordinal-group\"        : \"<integer>\",\n    \"-moz-box-orient\"               : \"horizontal | vertical | inline-axis | block-axis | inherit\",\n    \"-moz-box-pack\"                 : \"start | end | center | justify\",\n    \"-webkit-box-align\"             : \"start | end | center | baseline | stretch\",\n    \"-webkit-box-decoration-break\"  : \"slice |clone\",\n    \"-webkit-box-direction\"         : \"normal | reverse | inherit\",\n    \"-webkit-box-flex\"              : \"<number>\",\n    \"-webkit-box-flex-group\"        : \"<integer>\",\n    \"-webkit-box-lines\"             : \"single | multiple\",\n    \"-webkit-box-ordinal-group\"     : \"<integer>\",\n    \"-webkit-box-orient\"            : \"horizontal | vertical | inline-axis | block-axis | inherit\",\n    \"-webkit-box-pack\"              : \"start | end | center | justify\",\n    \"box-shadow\"                    : function (expression) {\n        var result      = false,\n            part;\n\n        if (!ValidationTypes.isAny(expression, \"none\")) {\n            Validation.multiProperty(\"<shadow>\", expression, true, Infinity);\n        } else {\n            if (expression.hasNext()) {\n                part = expression.next();\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            }\n        }\n    },\n    \"box-sizing\"                    : \"content-box | border-box | inherit\",\n    \"break-after\"                   : \"auto | always | avoid | left | right | page | column | avoid-page | avoid-column\",\n    \"break-before\"                  : \"auto | always | avoid | left | right | page | column | avoid-page | avoid-column\",\n    \"break-inside\"                  : \"auto | avoid | avoid-page | avoid-column\",\n\n    //C\n    \"caption-side\"                  : \"top | bottom | inherit\",\n    \"clear\"                         : \"none | right | left | both | inherit\",\n    \"clip\"                          : 1,\n    \"color\"                         : \"<color> | inherit\",\n    \"color-profile\"                 : 1,\n    \"column-count\"                  : \"<integer> | auto\",                      //http://www.w3.org/TR/css3-multicol/\n    \"column-fill\"                   : \"auto | balance\",\n    \"column-gap\"                    : \"<length> | normal\",\n    \"column-rule\"                   : \"<border-width> || <border-style> || <color>\",\n    \"column-rule-color\"             : \"<color>\",\n    \"column-rule-style\"             : \"<border-style>\",\n    \"column-rule-width\"             : \"<border-width>\",\n    \"column-span\"                   : \"none | all\",\n    \"column-width\"                  : \"<length> | auto\",\n    \"columns\"                       : 1,\n    \"content\"                       : 1,\n    \"counter-increment\"             : 1,\n    \"counter-reset\"                 : 1,\n    \"crop\"                          : \"<shape> | auto\",\n    \"cue\"                           : \"cue-after | cue-before | inherit\",\n    \"cue-after\"                     : 1,\n    \"cue-before\"                    : 1,\n    \"cursor\"                        : 1,\n\n    //D\n    \"direction\"                     : \"ltr | rtl | inherit\",\n    \"display\"                       : \"inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex\",\n    \"dominant-baseline\"             : 1,\n    \"drop-initial-after-adjust\"     : \"central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>\",\n    \"drop-initial-after-align\"      : \"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n    \"drop-initial-before-adjust\"    : \"before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>\",\n    \"drop-initial-before-align\"     : \"caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n    \"drop-initial-size\"             : \"auto | line | <length> | <percentage>\",\n    \"drop-initial-value\"            : \"initial | <integer>\",\n\n    //E\n    \"elevation\"                     : \"<angle> | below | level | above | higher | lower | inherit\",\n    \"empty-cells\"                   : \"show | hide | inherit\",\n\n    //F\n    \"filter\"                        : 1,\n    \"fit\"                           : \"fill | hidden | meet | slice\",\n    \"fit-position\"                  : 1,\n    \"flex\"                          : \"<flex>\",\n    \"flex-basis\"                    : \"<width>\",\n    \"flex-direction\"                : \"row | row-reverse | column | column-reverse\",\n    \"flex-flow\"                     : \"<flex-direction> || <flex-wrap>\",\n    \"flex-grow\"                     : \"<number>\",\n    \"flex-shrink\"                   : \"<number>\",\n    \"flex-wrap\"                     : \"nowrap | wrap | wrap-reverse\",\n    \"-webkit-flex\"                  : \"<flex>\",\n    \"-webkit-flex-basis\"            : \"<width>\",\n    \"-webkit-flex-direction\"        : \"row | row-reverse | column | column-reverse\",\n    \"-webkit-flex-flow\"             : \"<flex-direction> || <flex-wrap>\",\n    \"-webkit-flex-grow\"             : \"<number>\",\n    \"-webkit-flex-shrink\"           : \"<number>\",\n    \"-webkit-flex-wrap\"             : \"nowrap | wrap | wrap-reverse\",\n    \"-ms-flex\"                      : \"<flex>\",\n    \"-ms-flex-align\"                : \"start | end | center | stretch | baseline\",\n    \"-ms-flex-direction\"            : \"row | row-reverse | column | column-reverse | inherit\",\n    \"-ms-flex-order\"                : \"<number>\",\n    \"-ms-flex-pack\"                 : \"start | end | center | justify\",\n    \"-ms-flex-wrap\"                 : \"nowrap | wrap | wrap-reverse\",\n    \"float\"                         : \"left | right | none | inherit\",\n    \"float-offset\"                  : 1,\n    \"font\"                          : 1,\n    \"font-family\"                   : 1,\n    \"font-size\"                     : \"<absolute-size> | <relative-size> | <length> | <percentage> | inherit\",\n    \"font-size-adjust\"              : \"<number> | none | inherit\",\n    \"font-stretch\"                  : \"normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit\",\n    \"font-style\"                    : \"normal | italic | oblique | inherit\",\n    \"font-variant\"                  : \"normal | small-caps | inherit\",\n    \"font-weight\"                   : \"normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit\",\n\n    //G\n    \"grid-cell-stacking\"            : \"columns | rows | layer\",\n    \"grid-column\"                   : 1,\n    \"grid-columns\"                  : 1,\n    \"grid-column-align\"             : \"start | end | center | stretch\",\n    \"grid-column-sizing\"            : 1,\n    \"grid-column-span\"              : \"<integer>\",\n    \"grid-flow\"                     : \"none | rows | columns\",\n    \"grid-layer\"                    : \"<integer>\",\n    \"grid-row\"                      : 1,\n    \"grid-rows\"                     : 1,\n    \"grid-row-align\"                : \"start | end | center | stretch\",\n    \"grid-row-span\"                 : \"<integer>\",\n    \"grid-row-sizing\"               : 1,\n\n    //H\n    \"hanging-punctuation\"           : 1,\n    \"height\"                        : \"<margin-width> | <content-sizing> | inherit\",\n    \"hyphenate-after\"               : \"<integer> | auto\",\n    \"hyphenate-before\"              : \"<integer> | auto\",\n    \"hyphenate-character\"           : \"<string> | auto\",\n    \"hyphenate-lines\"               : \"no-limit | <integer>\",\n    \"hyphenate-resource\"            : 1,\n    \"hyphens\"                       : \"none | manual | auto\",\n\n    //I\n    \"icon\"                          : 1,\n    \"image-orientation\"             : \"angle | auto\",\n    \"image-rendering\"               : 1,\n    \"image-resolution\"              : 1,\n    \"inline-box-align\"              : \"initial | last | <integer>\",\n\n    //J\n    \"justify-content\"               : \"flex-start | flex-end | center | space-between | space-around\",\n    \"-webkit-justify-content\"       : \"flex-start | flex-end | center | space-between | space-around\",\n\n    //L\n    \"left\"                          : \"<margin-width> | inherit\",\n    \"letter-spacing\"                : \"<length> | normal | inherit\",\n    \"line-height\"                   : \"<number> | <length> | <percentage> | normal | inherit\",\n    \"line-break\"                    : \"auto | loose | normal | strict\",\n    \"line-stacking\"                 : 1,\n    \"line-stacking-ruby\"            : \"exclude-ruby | include-ruby\",\n    \"line-stacking-shift\"           : \"consider-shifts | disregard-shifts\",\n    \"line-stacking-strategy\"        : \"inline-line-height | block-line-height | max-height | grid-height\",\n    \"list-style\"                    : 1,\n    \"list-style-image\"              : \"<uri> | none | inherit\",\n    \"list-style-position\"           : \"inside | outside | inherit\",\n    \"list-style-type\"               : \"disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit\",\n\n    //M\n    \"margin\"                        : { multi: \"<margin-width> | inherit\", max: 4 },\n    \"margin-bottom\"                 : \"<margin-width> | inherit\",\n    \"margin-left\"                   : \"<margin-width> | inherit\",\n    \"margin-right\"                  : \"<margin-width> | inherit\",\n    \"margin-top\"                    : \"<margin-width> | inherit\",\n    \"mark\"                          : 1,\n    \"mark-after\"                    : 1,\n    \"mark-before\"                   : 1,\n    \"marks\"                         : 1,\n    \"marquee-direction\"             : 1,\n    \"marquee-play-count\"            : 1,\n    \"marquee-speed\"                 : 1,\n    \"marquee-style\"                 : 1,\n    \"max-height\"                    : \"<length> | <percentage> | <content-sizing> | none | inherit\",\n    \"max-width\"                     : \"<length> | <percentage> | <content-sizing> | none | inherit\",\n    \"min-height\"                    : \"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit\",\n    \"min-width\"                     : \"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit\",\n    \"move-to\"                       : 1,\n\n    //N\n    \"nav-down\"                      : 1,\n    \"nav-index\"                     : 1,\n    \"nav-left\"                      : 1,\n    \"nav-right\"                     : 1,\n    \"nav-up\"                        : 1,\n\n    //O\n    \"opacity\"                       : \"<number> | inherit\",\n    \"order\"                         : \"<integer>\",\n    \"-webkit-order\"                 : \"<integer>\",\n    \"orphans\"                       : \"<integer> | inherit\",\n    \"outline\"                       : 1,\n    \"outline-color\"                 : \"<color> | invert | inherit\",\n    \"outline-offset\"                : 1,\n    \"outline-style\"                 : \"<border-style> | inherit\",\n    \"outline-width\"                 : \"<border-width> | inherit\",\n    \"overflow\"                      : \"visible | hidden | scroll | auto | inherit\",\n    \"overflow-style\"                : 1,\n    \"overflow-wrap\"                 : \"normal | break-word\",\n    \"overflow-x\"                    : 1,\n    \"overflow-y\"                    : 1,\n\n    //P\n    \"padding\"                       : { multi: \"<padding-width> | inherit\", max: 4 },\n    \"padding-bottom\"                : \"<padding-width> | inherit\",\n    \"padding-left\"                  : \"<padding-width> | inherit\",\n    \"padding-right\"                 : \"<padding-width> | inherit\",\n    \"padding-top\"                   : \"<padding-width> | inherit\",\n    \"page\"                          : 1,\n    \"page-break-after\"              : \"auto | always | avoid | left | right | inherit\",\n    \"page-break-before\"             : \"auto | always | avoid | left | right | inherit\",\n    \"page-break-inside\"             : \"auto | avoid | inherit\",\n    \"page-policy\"                   : 1,\n    \"pause\"                         : 1,\n    \"pause-after\"                   : 1,\n    \"pause-before\"                  : 1,\n    \"perspective\"                   : 1,\n    \"perspective-origin\"            : 1,\n    \"phonemes\"                      : 1,\n    \"pitch\"                         : 1,\n    \"pitch-range\"                   : 1,\n    \"play-during\"                   : 1,\n    \"pointer-events\"                : \"auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit\",\n    \"position\"                      : \"static | relative | absolute | fixed | inherit\",\n    \"presentation-level\"            : 1,\n    \"punctuation-trim\"              : 1,\n\n    //Q\n    \"quotes\"                        : 1,\n\n    //R\n    \"rendering-intent\"              : 1,\n    \"resize\"                        : 1,\n    \"rest\"                          : 1,\n    \"rest-after\"                    : 1,\n    \"rest-before\"                   : 1,\n    \"richness\"                      : 1,\n    \"right\"                         : \"<margin-width> | inherit\",\n    \"rotation\"                      : 1,\n    \"rotation-point\"                : 1,\n    \"ruby-align\"                    : 1,\n    \"ruby-overhang\"                 : 1,\n    \"ruby-position\"                 : 1,\n    \"ruby-span\"                     : 1,\n\n    //S\n    \"size\"                          : 1,\n    \"speak\"                         : \"normal | none | spell-out | inherit\",\n    \"speak-header\"                  : \"once | always | inherit\",\n    \"speak-numeral\"                 : \"digits | continuous | inherit\",\n    \"speak-punctuation\"             : \"code | none | inherit\",\n    \"speech-rate\"                   : 1,\n    \"src\"                           : 1,\n    \"stress\"                        : 1,\n    \"string-set\"                    : 1,\n\n    \"table-layout\"                  : \"auto | fixed | inherit\",\n    \"tab-size\"                      : \"<integer> | <length>\",\n    \"target\"                        : 1,\n    \"target-name\"                   : 1,\n    \"target-new\"                    : 1,\n    \"target-position\"               : 1,\n    \"text-align\"                    : \"left | right | center | justify | inherit\" ,\n    \"text-align-last\"               : 1,\n    \"text-decoration\"               : 1,\n    \"text-emphasis\"                 : 1,\n    \"text-height\"                   : 1,\n    \"text-indent\"                   : \"<length> | <percentage> | inherit\",\n    \"text-justify\"                  : \"auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida\",\n    \"text-outline\"                  : 1,\n    \"text-overflow\"                 : 1,\n    \"text-rendering\"                : \"auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit\",\n    \"text-shadow\"                   : 1,\n    \"text-transform\"                : \"capitalize | uppercase | lowercase | none | inherit\",\n    \"text-wrap\"                     : \"normal | none | avoid\",\n    \"top\"                           : \"<margin-width> | inherit\",\n    \"-ms-touch-action\"              : \"auto | none | pan-x | pan-y\",\n    \"touch-action\"                  : \"auto | none | pan-x | pan-y\",\n    \"transform\"                     : 1,\n    \"transform-origin\"              : 1,\n    \"transform-style\"               : 1,\n    \"transition\"                    : 1,\n    \"transition-delay\"              : 1,\n    \"transition-duration\"           : 1,\n    \"transition-property\"           : 1,\n    \"transition-timing-function\"    : 1,\n\n    //U\n    \"unicode-bidi\"                  : \"normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit\",\n    \"user-modify\"                   : \"read-only | read-write | write-only | inherit\",\n    \"user-select\"                   : \"none | text | toggle | element | elements | all | inherit\",\n\n    //V\n    \"vertical-align\"                : \"auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length>\",\n    \"visibility\"                    : \"visible | hidden | collapse | inherit\",\n    \"voice-balance\"                 : 1,\n    \"voice-duration\"                : 1,\n    \"voice-family\"                  : 1,\n    \"voice-pitch\"                   : 1,\n    \"voice-pitch-range\"             : 1,\n    \"voice-rate\"                    : 1,\n    \"voice-stress\"                  : 1,\n    \"voice-volume\"                  : 1,\n    \"volume\"                        : 1,\n\n    //W\n    \"white-space\"                   : \"normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap\", //http://perishablepress.com/wrapping-content/\n    \"white-space-collapse\"          : 1,\n    \"widows\"                        : \"<integer> | inherit\",\n    \"width\"                         : \"<length> | <percentage> | <content-sizing> | auto | inherit\",\n    \"word-break\"                    : \"normal | keep-all | break-all\",\n    \"word-spacing\"                  : \"<length> | normal | inherit\",\n    \"word-wrap\"                     : \"normal | break-word\",\n    \"writing-mode\"                  : \"horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit\",\n\n    //Z\n    \"z-index\"                       : \"<integer> | auto | inherit\",\n    \"zoom\"                          : \"<number> | <percentage> | normal\"\n};\n/*global SyntaxUnit, Parser*/\n/**\n * Represents a selector combinator (whitespace, +, >).\n * @namespace parserlib.css\n * @class PropertyName\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} text The text representation of the unit.\n * @param {String} hack The type of IE hack applied (\"*\", \"_\", or null).\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction PropertyName(text, hack, line, col){\n\n    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_NAME_TYPE);\n\n    /**\n     * The type of IE hack applied (\"*\", \"_\", or null).\n     * @type String\n     * @property hack\n     */\n    this.hack = hack;\n\n}\n\nPropertyName.prototype = new SyntaxUnit();\nPropertyName.prototype.constructor = PropertyName;\nPropertyName.prototype.toString = function(){\n    return (this.hack ? this.hack : \"\") + this.text;\n};\n/*global SyntaxUnit, Parser*/\n/**\n * Represents a single part of a CSS property value, meaning that it represents\n * just everything single part between \":\" and \";\". If there are multiple values\n * separated by commas, this type represents just one of the values.\n * @param {String[]} parts An array of value parts making up this value.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n * @namespace parserlib.css\n * @class PropertyValue\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n */\nfunction PropertyValue(parts, line, col){\n\n    SyntaxUnit.call(this, parts.join(\" \"), line, col, Parser.PROPERTY_VALUE_TYPE);\n\n    /**\n     * The parts that make up the selector.\n     * @type Array\n     * @property parts\n     */\n    this.parts = parts;\n\n}\n\nPropertyValue.prototype = new SyntaxUnit();\nPropertyValue.prototype.constructor = PropertyValue;\n\n/*global SyntaxUnit, Parser*/\n/**\n * A utility class that allows for easy iteration over the various parts of a\n * property value.\n * @param {parserlib.css.PropertyValue} value The property value to iterate over.\n * @namespace parserlib.css\n * @class PropertyValueIterator\n * @constructor\n */\nfunction PropertyValueIterator(value){\n\n    /**\n     * Iterator value\n     * @type int\n     * @property _i\n     * @private\n     */\n    this._i = 0;\n\n    /**\n     * The parts that make up the value.\n     * @type Array\n     * @property _parts\n     * @private\n     */\n    this._parts = value.parts;\n\n    /**\n     * Keeps track of bookmarks along the way.\n     * @type Array\n     * @property _marks\n     * @private\n     */\n    this._marks = [];\n\n    /**\n     * Holds the original property value.\n     * @type parserlib.css.PropertyValue\n     * @property value\n     */\n    this.value = value;\n\n}\n\n/**\n * Returns the total number of parts in the value.\n * @return {int} The total number of parts in the value.\n * @method count\n */\nPropertyValueIterator.prototype.count = function(){\n    return this._parts.length;\n};\n\n/**\n * Indicates if the iterator is positioned at the first item.\n * @return {Boolean} True if positioned at first item, false if not.\n * @method isFirst\n */\nPropertyValueIterator.prototype.isFirst = function(){\n    return this._i === 0;\n};\n\n/**\n * Indicates if there are more parts of the property value.\n * @return {Boolean} True if there are more parts, false if not.\n * @method hasNext\n */\nPropertyValueIterator.prototype.hasNext = function(){\n    return (this._i < this._parts.length);\n};\n\n/**\n * Marks the current spot in the iteration so it can be restored to\n * later on.\n * @return {void}\n * @method mark\n */\nPropertyValueIterator.prototype.mark = function(){\n    this._marks.push(this._i);\n};\n\n/**\n * Returns the next part of the property value or null if there is no next\n * part. Does not move the internal counter forward.\n * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next\n * part.\n * @method peek\n */\nPropertyValueIterator.prototype.peek = function(count){\n    return this.hasNext() ? this._parts[this._i + (count || 0)] : null;\n};\n\n/**\n * Returns the next part of the property value or null if there is no next\n * part.\n * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next\n * part.\n * @method next\n */\nPropertyValueIterator.prototype.next = function(){\n    return this.hasNext() ? this._parts[this._i++] : null;\n};\n\n/**\n * Returns the previous part of the property value or null if there is no\n * previous part.\n * @return {parserlib.css.PropertyValuePart} The previous part of the\n * property value or null if there is no next part.\n * @method previous\n */\nPropertyValueIterator.prototype.previous = function(){\n    return this._i > 0 ? this._parts[--this._i] : null;\n};\n\n/**\n * Restores the last saved bookmark.\n * @return {void}\n * @method restore\n */\nPropertyValueIterator.prototype.restore = function(){\n    if (this._marks.length){\n        this._i = this._marks.pop();\n    }\n};\n\n/*global SyntaxUnit, Parser, Colors*/\n/**\n * Represents a single part of a CSS property value, meaning that it represents\n * just one part of the data between \":\" and \";\".\n * @param {String} text The text representation of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n * @namespace parserlib.css\n * @class PropertyValuePart\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n */\nfunction PropertyValuePart(text, line, col){\n\n    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_VALUE_PART_TYPE);\n\n    /**\n     * Indicates the type of value unit.\n     * @type String\n     * @property type\n     */\n    this.type = \"unknown\";\n\n    //figure out what type of data it is\n\n    var temp;\n\n    //it is a measurement?\n    if (/^([+\\-]?[\\d\\.]+)([a-z]+)$/i.test(text)){  //dimension\n        this.type = \"dimension\";\n        this.value = +RegExp.$1;\n        this.units = RegExp.$2;\n\n        //try to narrow down\n        switch(this.units.toLowerCase()){\n\n            case \"em\":\n            case \"rem\":\n            case \"ex\":\n            case \"px\":\n            case \"cm\":\n            case \"mm\":\n            case \"in\":\n            case \"pt\":\n            case \"pc\":\n            case \"ch\":\n            case \"vh\":\n            case \"vw\":\n            case \"vmax\":\n            case \"vmin\":\n                this.type = \"length\";\n                break;\n\n            case \"deg\":\n            case \"rad\":\n            case \"grad\":\n                this.type = \"angle\";\n                break;\n\n            case \"ms\":\n            case \"s\":\n                this.type = \"time\";\n                break;\n\n            case \"hz\":\n            case \"khz\":\n                this.type = \"frequency\";\n                break;\n\n            case \"dpi\":\n            case \"dpcm\":\n                this.type = \"resolution\";\n                break;\n\n            //default\n\n        }\n\n    } else if (/^([+\\-]?[\\d\\.]+)%$/i.test(text)){  //percentage\n        this.type = \"percentage\";\n        this.value = +RegExp.$1;\n    } else if (/^([+\\-]?\\d+)$/i.test(text)){  //integer\n        this.type = \"integer\";\n        this.value = +RegExp.$1;\n    } else if (/^([+\\-]?[\\d\\.]+)$/i.test(text)){  //number\n        this.type = \"number\";\n        this.value = +RegExp.$1;\n\n    } else if (/^#([a-f0-9]{3,6})/i.test(text)){  //hexcolor\n        this.type = \"color\";\n        temp = RegExp.$1;\n        if (temp.length == 3){\n            this.red    = parseInt(temp.charAt(0)+temp.charAt(0),16);\n            this.green  = parseInt(temp.charAt(1)+temp.charAt(1),16);\n            this.blue   = parseInt(temp.charAt(2)+temp.charAt(2),16);\n        } else {\n            this.red    = parseInt(temp.substring(0,2),16);\n            this.green  = parseInt(temp.substring(2,4),16);\n            this.blue   = parseInt(temp.substring(4,6),16);\n        }\n    } else if (/^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i.test(text)){ //rgb() color with absolute numbers\n        this.type   = \"color\";\n        this.red    = +RegExp.$1;\n        this.green  = +RegExp.$2;\n        this.blue   = +RegExp.$3;\n    } else if (/^rgb\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)/i.test(text)){ //rgb() color with percentages\n        this.type   = \"color\";\n        this.red    = +RegExp.$1 * 255 / 100;\n        this.green  = +RegExp.$2 * 255 / 100;\n        this.blue   = +RegExp.$3 * 255 / 100;\n    } else if (/^rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)){ //rgba() color with absolute numbers\n        this.type   = \"color\";\n        this.red    = +RegExp.$1;\n        this.green  = +RegExp.$2;\n        this.blue   = +RegExp.$3;\n        this.alpha  = +RegExp.$4;\n    } else if (/^rgba\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)){ //rgba() color with percentages\n        this.type   = \"color\";\n        this.red    = +RegExp.$1 * 255 / 100;\n        this.green  = +RegExp.$2 * 255 / 100;\n        this.blue   = +RegExp.$3 * 255 / 100;\n        this.alpha  = +RegExp.$4;\n    } else if (/^hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)/i.test(text)){ //hsl()\n        this.type   = \"color\";\n        this.hue    = +RegExp.$1;\n        this.saturation = +RegExp.$2 / 100;\n        this.lightness  = +RegExp.$3 / 100;\n    } else if (/^hsla\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)){ //hsla() color with percentages\n        this.type   = \"color\";\n        this.hue    = +RegExp.$1;\n        this.saturation = +RegExp.$2 / 100;\n        this.lightness  = +RegExp.$3 / 100;\n        this.alpha  = +RegExp.$4;\n    } else if (/^url\\([\"']?([^\\)\"']+)[\"']?\\)/i.test(text)){ //URI\n        this.type   = \"uri\";\n        this.uri    = RegExp.$1;\n    } else if (/^([^\\(]+)\\(/i.test(text)){\n        this.type   = \"function\";\n        this.name   = RegExp.$1;\n        this.value  = text;\n    } else if (/^[\"'][^\"']*[\"']/.test(text)){    //string\n        this.type   = \"string\";\n        this.value  = eval(text);\n    } else if (Colors[text.toLowerCase()]){  //named color\n        this.type   = \"color\";\n        temp        = Colors[text.toLowerCase()].substring(1);\n        this.red    = parseInt(temp.substring(0,2),16);\n        this.green  = parseInt(temp.substring(2,4),16);\n        this.blue   = parseInt(temp.substring(4,6),16);\n    } else if (/^[\\,\\/]$/.test(text)){\n        this.type   = \"operator\";\n        this.value  = text;\n    } else if (/^[a-z\\-_\\u0080-\\uFFFF][a-z0-9\\-_\\u0080-\\uFFFF]*$/i.test(text)){\n        this.type   = \"identifier\";\n        this.value  = text;\n    }\n\n}\n\nPropertyValuePart.prototype = new SyntaxUnit();\nPropertyValuePart.prototype.constructor = PropertyValuePart;\n\n/**\n * Create a new syntax unit based solely on the given token.\n * Convenience method for creating a new syntax unit when\n * it represents a single token instead of multiple.\n * @param {Object} token The token object to represent.\n * @return {parserlib.css.PropertyValuePart} The object representing the token.\n * @static\n * @method fromToken\n */\nPropertyValuePart.fromToken = function(token){\n    return new PropertyValuePart(token.value, token.startLine, token.startCol);\n};\nvar Pseudos = {\n    \":first-letter\": 1,\n    \":first-line\":   1,\n    \":before\":       1,\n    \":after\":        1\n};\n\nPseudos.ELEMENT = 1;\nPseudos.CLASS = 2;\n\nPseudos.isElement = function(pseudo){\n    return pseudo.indexOf(\"::\") === 0 || Pseudos[pseudo.toLowerCase()] == Pseudos.ELEMENT;\n};\n/*global SyntaxUnit, Parser, Specificity*/\n/**\n * Represents an entire single selector, including all parts but not\n * including multiple selectors (those separated by commas).\n * @namespace parserlib.css\n * @class Selector\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {Array} parts Array of selectors parts making up this selector.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction Selector(parts, line, col){\n\n    SyntaxUnit.call(this, parts.join(\" \"), line, col, Parser.SELECTOR_TYPE);\n\n    /**\n     * The parts that make up the selector.\n     * @type Array\n     * @property parts\n     */\n    this.parts = parts;\n\n    /**\n     * The specificity of the selector.\n     * @type parserlib.css.Specificity\n     * @property specificity\n     */\n    this.specificity = Specificity.calculate(this);\n\n}\n\nSelector.prototype = new SyntaxUnit();\nSelector.prototype.constructor = Selector;\n\n/*global SyntaxUnit, Parser*/\n/**\n * Represents a single part of a selector string, meaning a single set of\n * element name and modifiers. This does not include combinators such as\n * spaces, +, >, etc.\n * @namespace parserlib.css\n * @class SelectorPart\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} elementName The element name in the selector or null\n *      if there is no element name.\n * @param {Array} modifiers Array of individual modifiers for the element.\n *      May be empty if there are none.\n * @param {String} text The text representation of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction SelectorPart(elementName, modifiers, text, line, col){\n\n    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_PART_TYPE);\n\n    /**\n     * The tag name of the element to which this part\n     * of the selector affects.\n     * @type String\n     * @property elementName\n     */\n    this.elementName = elementName;\n\n    /**\n     * The parts that come after the element name, such as class names, IDs,\n     * pseudo classes/elements, etc.\n     * @type Array\n     * @property modifiers\n     */\n    this.modifiers = modifiers;\n\n}\n\nSelectorPart.prototype = new SyntaxUnit();\nSelectorPart.prototype.constructor = SelectorPart;\n\n/*global SyntaxUnit, Parser*/\n/**\n * Represents a selector modifier string, meaning a class name, element name,\n * element ID, pseudo rule, etc.\n * @namespace parserlib.css\n * @class SelectorSubPart\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} text The text representation of the unit.\n * @param {String} type The type of selector modifier.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */\nfunction SelectorSubPart(text, type, line, col){\n\n    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_SUB_PART_TYPE);\n\n    /**\n     * The type of modifier.\n     * @type String\n     * @property type\n     */\n    this.type = type;\n\n    /**\n     * Some subparts have arguments, this represents them.\n     * @type Array\n     * @property args\n     */\n    this.args = [];\n\n}\n\nSelectorSubPart.prototype = new SyntaxUnit();\nSelectorSubPart.prototype.constructor = SelectorSubPart;\n\n/*global Pseudos, SelectorPart*/\n/**\n * Represents a selector's specificity.\n * @namespace parserlib.css\n * @class Specificity\n * @constructor\n * @param {int} a Should be 1 for inline styles, zero for stylesheet styles\n * @param {int} b Number of ID selectors\n * @param {int} c Number of classes and pseudo classes\n * @param {int} d Number of element names and pseudo elements\n */\nfunction Specificity(a, b, c, d){\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n}\n\nSpecificity.prototype = {\n    constructor: Specificity,\n\n    /**\n     * Compare this specificity to another.\n     * @param {Specificity} other The other specificity to compare to.\n     * @return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.\n     * @method compare\n     */\n    compare: function(other){\n        var comps = [\"a\", \"b\", \"c\", \"d\"],\n            i, len;\n\n        for (i=0, len=comps.length; i < len; i++){\n            if (this[comps[i]] < other[comps[i]]){\n                return -1;\n            } else if (this[comps[i]] > other[comps[i]]){\n                return 1;\n            }\n        }\n\n        return 0;\n    },\n\n    /**\n     * Creates a numeric value for the specificity.\n     * @return {int} The numeric value for the specificity.\n     * @method valueOf\n     */\n    valueOf: function(){\n        return (this.a * 1000) + (this.b * 100) + (this.c * 10) + this.d;\n    },\n\n    /**\n     * Returns a string representation for specificity.\n     * @return {String} The string representation of specificity.\n     * @method toString\n     */\n    toString: function(){\n        return this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d;\n    }\n\n};\n\n/**\n * Calculates the specificity of the given selector.\n * @param {parserlib.css.Selector} The selector to calculate specificity for.\n * @return {parserlib.css.Specificity} The specificity of the selector.\n * @static\n * @method calculate\n */\nSpecificity.calculate = function(selector){\n\n    var i, len,\n        part,\n        b=0, c=0, d=0;\n\n    function updateValues(part){\n\n        var i, j, len, num,\n            elementName = part.elementName ? part.elementName.text : \"\",\n            modifier;\n\n        if (elementName && elementName.charAt(elementName.length-1) != \"*\") {\n            d++;\n        }\n\n        for (i=0, len=part.modifiers.length; i < len; i++){\n            modifier = part.modifiers[i];\n            switch(modifier.type){\n                case \"class\":\n                case \"attribute\":\n                    c++;\n                    break;\n\n                case \"id\":\n                    b++;\n                    break;\n\n                case \"pseudo\":\n                    if (Pseudos.isElement(modifier.text)){\n                        d++;\n                    } else {\n                        c++;\n                    }\n                    break;\n\n                case \"not\":\n                    for (j=0, num=modifier.args.length; j < num; j++){\n                        updateValues(modifier.args[j]);\n                    }\n            }\n         }\n    }\n\n    for (i=0, len=selector.parts.length; i < len; i++){\n        part = selector.parts[i];\n\n        if (part instanceof SelectorPart){\n            updateValues(part);\n        }\n    }\n\n    return new Specificity(0, b, c, d);\n};\n/*global Tokens, TokenStreamBase*/\n\nvar h = /^[0-9a-fA-F]$/,\n    nonascii = /^[\\u0080-\\uFFFF]$/,\n    nl = /\\n|\\r\\n|\\r|\\f/;\n\n//-----------------------------------------------------------------------------\n// Helper functions\n//-----------------------------------------------------------------------------\n\n\nfunction isHexDigit(c){\n    return c !== null && h.test(c);\n}\n\nfunction isDigit(c){\n    return c !== null && /\\d/.test(c);\n}\n\nfunction isWhitespace(c){\n    return c !== null && /\\s/.test(c);\n}\n\nfunction isNewLine(c){\n    return c !== null && nl.test(c);\n}\n\nfunction isNameStart(c){\n    return c !== null && (/[a-z_\\u0080-\\uFFFF\\\\]/i.test(c));\n}\n\nfunction isNameChar(c){\n    return c !== null && (isNameStart(c) || /[0-9\\-\\\\]/.test(c));\n}\n\nfunction isIdentStart(c){\n    return c !== null && (isNameStart(c) || /\\-\\\\/.test(c));\n}\n\nfunction mix(receiver, supplier){\n\tfor (var prop in supplier){\n\t\tif (supplier.hasOwnProperty(prop)){\n\t\t\treceiver[prop] = supplier[prop];\n\t\t}\n\t}\n\treturn receiver;\n}\n\n//-----------------------------------------------------------------------------\n// CSS Token Stream\n//-----------------------------------------------------------------------------\n\n\n/**\n * A token stream that produces CSS tokens.\n * @param {String|Reader} input The source of text to tokenize.\n * @constructor\n * @class TokenStream\n * @namespace parserlib.css\n */\nfunction TokenStream(input){\n\tTokenStreamBase.call(this, input, Tokens);\n}\n\nTokenStream.prototype = mix(new TokenStreamBase(), {\n\n    /**\n     * Overrides the TokenStreamBase method of the same name\n     * to produce CSS tokens.\n     * @param {variant} channel The name of the channel to use\n     *      for the next token.\n     * @return {Object} A token object representing the next token.\n     * @method _getToken\n     * @private\n     */\n    _getToken: function(channel){\n\n        var c,\n            reader = this._reader,\n            token   = null,\n            startLine   = reader.getLine(),\n            startCol    = reader.getCol();\n\n        c = reader.read();\n\n\n        while(c){\n            switch(c){\n\n                /*\n                 * Potential tokens:\n                 * - COMMENT\n                 * - SLASH\n                 * - CHAR\n                 */\n                case \"/\":\n\n                    if(reader.peek() == \"*\"){\n                        token = this.commentToken(c, startLine, startCol);\n                    } else {\n                        token = this.charToken(c, startLine, startCol);\n                    }\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - DASHMATCH\n                 * - INCLUDES\n                 * - PREFIXMATCH\n                 * - SUFFIXMATCH\n                 * - SUBSTRINGMATCH\n                 * - CHAR\n                 */\n                case \"|\":\n                case \"~\":\n                case \"^\":\n                case \"$\":\n                case \"*\":\n                    if(reader.peek() == \"=\"){\n                        token = this.comparisonToken(c, startLine, startCol);\n                    } else {\n                        token = this.charToken(c, startLine, startCol);\n                    }\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - STRING\n                 * - INVALID\n                 */\n                case \"\\\"\":\n                case \"'\":\n                    token = this.stringToken(c, startLine, startCol);\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - HASH\n                 * - CHAR\n                 */\n                case \"#\":\n                    if (isNameChar(reader.peek())){\n                        token = this.hashToken(c, startLine, startCol);\n                    } else {\n                        token = this.charToken(c, startLine, startCol);\n                    }\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - DOT\n                 * - NUMBER\n                 * - DIMENSION\n                 * - PERCENTAGE\n                 */\n                case \".\":\n                    if (isDigit(reader.peek())){\n                        token = this.numberToken(c, startLine, startCol);\n                    } else {\n                        token = this.charToken(c, startLine, startCol);\n                    }\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - CDC\n                 * - MINUS\n                 * - NUMBER\n                 * - DIMENSION\n                 * - PERCENTAGE\n                 */\n                case \"-\":\n                    if (reader.peek() == \"-\"){  //could be closing HTML-style comment\n                        token = this.htmlCommentEndToken(c, startLine, startCol);\n                    } else if (isNameStart(reader.peek())){\n                        token = this.identOrFunctionToken(c, startLine, startCol);\n                    } else {\n                        token = this.charToken(c, startLine, startCol);\n                    }\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - IMPORTANT_SYM\n                 * - CHAR\n                 */\n                case \"!\":\n                    token = this.importantToken(c, startLine, startCol);\n                    break;\n\n                /*\n                 * Any at-keyword or CHAR\n                 */\n                case \"@\":\n                    token = this.atRuleToken(c, startLine, startCol);\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - NOT\n                 * - CHAR\n                 */\n                case \":\":\n                    token = this.notToken(c, startLine, startCol);\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - CDO\n                 * - CHAR\n                 */\n                case \"<\":\n                    token = this.htmlCommentStartToken(c, startLine, startCol);\n                    break;\n\n                /*\n                 * Potential tokens:\n                 * - UNICODE_RANGE\n                 * - URL\n                 * - CHAR\n                 */\n                case \"U\":\n                case \"u\":\n                    if (reader.peek() == \"+\"){\n                        token = this.unicodeRangeToken(c, startLine, startCol);\n                        break;\n                    }\n                    /* falls through */\n                default:\n\n                    /*\n                     * Potential tokens:\n                     * - NUMBER\n                     * - DIMENSION\n                     * - LENGTH\n                     * - FREQ\n                     * - TIME\n                     * - EMS\n                     * - EXS\n                     * - ANGLE\n                     */\n                    if (isDigit(c)){\n                        token = this.numberToken(c, startLine, startCol);\n                    } else\n\n                    /*\n                     * Potential tokens:\n                     * - S\n                     */\n                    if (isWhitespace(c)){\n                        token = this.whitespaceToken(c, startLine, startCol);\n                    } else\n\n                    /*\n                     * Potential tokens:\n                     * - IDENT\n                     */\n                    if (isIdentStart(c)){\n                        token = this.identOrFunctionToken(c, startLine, startCol);\n                    } else\n\n                    /*\n                     * Potential tokens:\n                     * - CHAR\n                     * - PLUS\n                     */\n                    {\n                        token = this.charToken(c, startLine, startCol);\n                    }\n\n\n\n\n\n\n            }\n\n            //make sure this token is wanted\n            //TODO: check channel\n            break;\n        }\n\n        if (!token && c === null){\n            token = this.createToken(Tokens.EOF,null,startLine,startCol);\n        }\n\n        return token;\n    },\n\n    //-------------------------------------------------------------------------\n    // Methods to create tokens\n    //-------------------------------------------------------------------------\n\n    /**\n     * Produces a token based on available data and the current\n     * reader position information. This method is called by other\n     * private methods to create tokens and is never called directly.\n     * @param {int} tt The token type.\n     * @param {String} value The text value of the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @param {Object} options (Optional) Specifies a channel property\n     *      to indicate that a different channel should be scanned\n     *      and/or a hide property indicating that the token should\n     *      be hidden.\n     * @return {Object} A token object.\n     * @method createToken\n     */\n    createToken: function(tt, value, startLine, startCol, options){\n        var reader = this._reader;\n        options = options || {};\n\n        return {\n            value:      value,\n            type:       tt,\n            channel:    options.channel,\n            endChar:    options.endChar,\n            hide:       options.hide || false,\n            startLine:  startLine,\n            startCol:   startCol,\n            endLine:    reader.getLine(),\n            endCol:     reader.getCol()\n        };\n    },\n\n    //-------------------------------------------------------------------------\n    // Methods to create specific tokens\n    //-------------------------------------------------------------------------\n\n    /**\n     * Produces a token for any at-rule. If the at-rule is unknown, then\n     * the token is for a single \"@\" character.\n     * @param {String} first The first character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method atRuleToken\n     */\n    atRuleToken: function(first, startLine, startCol){\n        var rule    = first,\n            reader  = this._reader,\n            tt      = Tokens.CHAR,\n            valid   = false,\n            ident,\n            c;\n\n        /*\n         * First, mark where we are. There are only four @ rules,\n         * so anything else is really just an invalid token.\n         * Basically, if this doesn't match one of the known @\n         * rules, just return '@' as an unknown token and allow\n         * parsing to continue after that point.\n         */\n        reader.mark();\n\n        //try to find the at-keyword\n        ident = this.readName();\n        rule = first + ident;\n        tt = Tokens.type(rule.toLowerCase());\n\n        //if it's not valid, use the first character only and reset the reader\n        if (tt == Tokens.CHAR || tt == Tokens.UNKNOWN){\n            if (rule.length > 1){\n                tt = Tokens.UNKNOWN_SYM;\n            } else {\n                tt = Tokens.CHAR;\n                rule = first;\n                reader.reset();\n            }\n        }\n\n        return this.createToken(tt, rule, startLine, startCol);\n    },\n\n    /**\n     * Produces a character token based on the given character\n     * and location in the stream. If there's a special (non-standard)\n     * token name, this is used; otherwise CHAR is used.\n     * @param {String} c The character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method charToken\n     */\n    charToken: function(c, startLine, startCol){\n        var tt = Tokens.type(c);\n        var opts = {};\n\n        if (tt == -1){\n            tt = Tokens.CHAR;\n        } else {\n            opts.endChar = Tokens[tt].endChar;\n        }\n\n        return this.createToken(tt, c, startLine, startCol, opts);\n    },\n\n    /**\n     * Produces a character token based on the given character\n     * and location in the stream. If there's a special (non-standard)\n     * token name, this is used; otherwise CHAR is used.\n     * @param {String} first The first character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method commentToken\n     */\n    commentToken: function(first, startLine, startCol){\n        var reader  = this._reader,\n            comment = this.readComment(first);\n\n        return this.createToken(Tokens.COMMENT, comment, startLine, startCol);\n    },\n\n    /**\n     * Produces a comparison token based on the given character\n     * and location in the stream. The next character must be\n     * read and is already known to be an equals sign.\n     * @param {String} c The character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method comparisonToken\n     */\n    comparisonToken: function(c, startLine, startCol){\n        var reader  = this._reader,\n            comparison  = c + reader.read(),\n            tt      = Tokens.type(comparison) || Tokens.CHAR;\n\n        return this.createToken(tt, comparison, startLine, startCol);\n    },\n\n    /**\n     * Produces a hash token based on the specified information. The\n     * first character provided is the pound sign (#) and then this\n     * method reads a name afterward.\n     * @param {String} first The first character (#) in the hash name.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method hashToken\n     */\n    hashToken: function(first, startLine, startCol){\n        var reader  = this._reader,\n            name    = this.readName(first);\n\n        return this.createToken(Tokens.HASH, name, startLine, startCol);\n    },\n\n    /**\n     * Produces a CDO or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method htmlCommentStartToken\n     */\n    htmlCommentStartToken: function(first, startLine, startCol){\n        var reader      = this._reader,\n            text        = first;\n\n        reader.mark();\n        text += reader.readCount(3);\n\n        if (text == \"<!--\"){\n            return this.createToken(Tokens.CDO, text, startLine, startCol);\n        } else {\n            reader.reset();\n            return this.charToken(first, startLine, startCol);\n        }\n    },\n\n    /**\n     * Produces a CDC or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method htmlCommentEndToken\n     */\n    htmlCommentEndToken: function(first, startLine, startCol){\n        var reader      = this._reader,\n            text        = first;\n\n        reader.mark();\n        text += reader.readCount(2);\n\n        if (text == \"-->\"){\n            return this.createToken(Tokens.CDC, text, startLine, startCol);\n        } else {\n            reader.reset();\n            return this.charToken(first, startLine, startCol);\n        }\n    },\n\n    /**\n     * Produces an IDENT or FUNCTION token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the identifier.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method identOrFunctionToken\n     */\n    identOrFunctionToken: function(first, startLine, startCol){\n        var reader  = this._reader,\n            ident   = this.readName(first),\n            tt      = Tokens.IDENT;\n\n        //if there's a left paren immediately after, it's a URI or function\n        if (reader.peek() == \"(\"){\n            ident += reader.read();\n            if (ident.toLowerCase() == \"url(\"){\n                tt = Tokens.URI;\n                ident = this.readURI(ident);\n\n                //didn't find a valid URL or there's no closing paren\n                if (ident.toLowerCase() == \"url(\"){\n                    tt = Tokens.FUNCTION;\n                }\n            } else {\n                tt = Tokens.FUNCTION;\n            }\n        } else if (reader.peek() == \":\"){  //might be an IE function\n\n            //IE-specific functions always being with progid:\n            if (ident.toLowerCase() == \"progid\"){\n                ident += reader.readTo(\"(\");\n                tt = Tokens.IE_FUNCTION;\n            }\n        }\n\n        return this.createToken(tt, ident, startLine, startCol);\n    },\n\n    /**\n     * Produces an IMPORTANT_SYM or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method importantToken\n     */\n    importantToken: function(first, startLine, startCol){\n        var reader      = this._reader,\n            important   = first,\n            tt          = Tokens.CHAR,\n            temp,\n            c;\n\n        reader.mark();\n        c = reader.read();\n\n        while(c){\n\n            //there can be a comment in here\n            if (c == \"/\"){\n\n                //if the next character isn't a star, then this isn't a valid !important token\n                if (reader.peek() != \"*\"){\n                    break;\n                } else {\n                    temp = this.readComment(c);\n                    if (temp === \"\"){    //broken!\n                        break;\n                    }\n                }\n            } else if (isWhitespace(c)){\n                important += c + this.readWhitespace();\n            } else if (/i/i.test(c)){\n                temp = reader.readCount(8);\n                if (/mportant/i.test(temp)){\n                    important += c + temp;\n                    tt = Tokens.IMPORTANT_SYM;\n\n                }\n                break;  //we're done\n            } else {\n                break;\n            }\n\n            c = reader.read();\n        }\n\n        if (tt == Tokens.CHAR){\n            reader.reset();\n            return this.charToken(first, startLine, startCol);\n        } else {\n            return this.createToken(tt, important, startLine, startCol);\n        }\n\n\n    },\n\n    /**\n     * Produces a NOT or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method notToken\n     */\n    notToken: function(first, startLine, startCol){\n        var reader      = this._reader,\n            text        = first;\n\n        reader.mark();\n        text += reader.readCount(4);\n\n        if (text.toLowerCase() == \":not(\"){\n            return this.createToken(Tokens.NOT, text, startLine, startCol);\n        } else {\n            reader.reset();\n            return this.charToken(first, startLine, startCol);\n        }\n    },\n\n    /**\n     * Produces a number token based on the given character\n     * and location in the stream. This may return a token of\n     * NUMBER, EMS, EXS, LENGTH, ANGLE, TIME, FREQ, DIMENSION,\n     * or PERCENTAGE.\n     * @param {String} first The first character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method numberToken\n     */\n    numberToken: function(first, startLine, startCol){\n        var reader  = this._reader,\n            value   = this.readNumber(first),\n            ident,\n            tt      = Tokens.NUMBER,\n            c       = reader.peek();\n\n        if (isIdentStart(c)){\n            ident = this.readName(reader.read());\n            value += ident;\n\n            if (/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(ident)){\n                tt = Tokens.LENGTH;\n            } else if (/^deg|^rad$|^grad$/i.test(ident)){\n                tt = Tokens.ANGLE;\n            } else if (/^ms$|^s$/i.test(ident)){\n                tt = Tokens.TIME;\n            } else if (/^hz$|^khz$/i.test(ident)){\n                tt = Tokens.FREQ;\n            } else if (/^dpi$|^dpcm$/i.test(ident)){\n                tt = Tokens.RESOLUTION;\n            } else {\n                tt = Tokens.DIMENSION;\n            }\n\n        } else if (c == \"%\"){\n            value += reader.read();\n            tt = Tokens.PERCENTAGE;\n        }\n\n        return this.createToken(tt, value, startLine, startCol);\n    },\n\n    /**\n     * Produces a string token based on the given character\n     * and location in the stream. Since strings may be indicated\n     * by single or double quotes, a failure to match starting\n     * and ending quotes results in an INVALID token being generated.\n     * The first character in the string is passed in and then\n     * the rest are read up to and including the final quotation mark.\n     * @param {String} first The first character in the string.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method stringToken\n     */\n    stringToken: function(first, startLine, startCol){\n        var delim   = first,\n            string  = first,\n            reader  = this._reader,\n            prev    = first,\n            tt      = Tokens.STRING,\n            c       = reader.read();\n\n        while(c){\n            string += c;\n\n            //if the delimiter is found with an escapement, we're done.\n            if (c == delim && prev != \"\\\\\"){\n                break;\n            }\n\n            //if there's a newline without an escapement, it's an invalid string\n            if (isNewLine(reader.peek()) && c != \"\\\\\"){\n                tt = Tokens.INVALID;\n                break;\n            }\n\n            //save previous and get next\n            prev = c;\n            c = reader.read();\n        }\n\n        //if c is null, that means we're out of input and the string was never closed\n        if (c === null){\n            tt = Tokens.INVALID;\n        }\n\n        return this.createToken(tt, string, startLine, startCol);\n    },\n\n    unicodeRangeToken: function(first, startLine, startCol){\n        var reader  = this._reader,\n            value   = first,\n            temp,\n            tt      = Tokens.CHAR;\n\n        //then it should be a unicode range\n        if (reader.peek() == \"+\"){\n            reader.mark();\n            value += reader.read();\n            value += this.readUnicodeRangePart(true);\n\n            //ensure there's an actual unicode range here\n            if (value.length == 2){\n                reader.reset();\n            } else {\n\n                tt = Tokens.UNICODE_RANGE;\n\n                //if there's a ? in the first part, there can't be a second part\n                if (value.indexOf(\"?\") == -1){\n\n                    if (reader.peek() == \"-\"){\n                        reader.mark();\n                        temp = reader.read();\n                        temp += this.readUnicodeRangePart(false);\n\n                        //if there's not another value, back up and just take the first\n                        if (temp.length == 1){\n                            reader.reset();\n                        } else {\n                            value += temp;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        return this.createToken(tt, value, startLine, startCol);\n    },\n\n    /**\n     * Produces a S token based on the specified information. Since whitespace\n     * may have multiple characters, this consumes all whitespace characters\n     * into a single token.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method whitespaceToken\n     */\n    whitespaceToken: function(first, startLine, startCol){\n        var reader  = this._reader,\n            value   = first + this.readWhitespace();\n        return this.createToken(Tokens.S, value, startLine, startCol);\n    },\n\n\n\n\n    //-------------------------------------------------------------------------\n    // Methods to read values from the string stream\n    //-------------------------------------------------------------------------\n\n    readUnicodeRangePart: function(allowQuestionMark){\n        var reader  = this._reader,\n            part = \"\",\n            c       = reader.peek();\n\n        //first read hex digits\n        while(isHexDigit(c) && part.length < 6){\n            reader.read();\n            part += c;\n            c = reader.peek();\n        }\n\n        //then read question marks if allowed\n        if (allowQuestionMark){\n            while(c == \"?\" && part.length < 6){\n                reader.read();\n                part += c;\n                c = reader.peek();\n            }\n        }\n\n        //there can't be any other characters after this point\n\n        return part;\n    },\n\n    readWhitespace: function(){\n        var reader  = this._reader,\n            whitespace = \"\",\n            c       = reader.peek();\n\n        while(isWhitespace(c)){\n            reader.read();\n            whitespace += c;\n            c = reader.peek();\n        }\n\n        return whitespace;\n    },\n    readNumber: function(first){\n        var reader  = this._reader,\n            number  = first,\n            hasDot  = (first == \".\"),\n            c       = reader.peek();\n\n\n        while(c){\n            if (isDigit(c)){\n                number += reader.read();\n            } else if (c == \".\"){\n                if (hasDot){\n                    break;\n                } else {\n                    hasDot = true;\n                    number += reader.read();\n                }\n            } else {\n                break;\n            }\n\n            c = reader.peek();\n        }\n\n        return number;\n    },\n    readString: function(){\n        var reader  = this._reader,\n            delim   = reader.read(),\n            string  = delim,\n            prev    = delim,\n            c       = reader.peek();\n\n        while(c){\n            c = reader.read();\n            string += c;\n\n            //if the delimiter is found with an escapement, we're done.\n            if (c == delim && prev != \"\\\\\"){\n                break;\n            }\n\n            //if there's a newline without an escapement, it's an invalid string\n            if (isNewLine(reader.peek()) && c != \"\\\\\"){\n                string = \"\";\n                break;\n            }\n\n            //save previous and get next\n            prev = c;\n            c = reader.peek();\n        }\n\n        //if c is null, that means we're out of input and the string was never closed\n        if (c === null){\n            string = \"\";\n        }\n\n        return string;\n    },\n    readURI: function(first){\n        var reader  = this._reader,\n            uri     = first,\n            inner   = \"\",\n            c       = reader.peek();\n\n        reader.mark();\n\n        //skip whitespace before\n        while(c && isWhitespace(c)){\n            reader.read();\n            c = reader.peek();\n        }\n\n        //it's a string\n        if (c == \"'\" || c == \"\\\"\"){\n            inner = this.readString();\n        } else {\n            inner = this.readURL();\n        }\n\n        c = reader.peek();\n\n        //skip whitespace after\n        while(c && isWhitespace(c)){\n            reader.read();\n            c = reader.peek();\n        }\n\n        //if there was no inner value or the next character isn't closing paren, it's not a URI\n        if (inner === \"\" || c != \")\"){\n            uri = first;\n            reader.reset();\n        } else {\n            uri += inner + reader.read();\n        }\n\n        return uri;\n    },\n    readURL: function(){\n        var reader  = this._reader,\n            url     = \"\",\n            c       = reader.peek();\n\n        //TODO: Check for escape and nonascii\n        while (/^[!#$%&\\\\*-~]$/.test(c)){\n            url += reader.read();\n            c = reader.peek();\n        }\n\n        return url;\n\n    },\n    readName: function(first){\n        var reader  = this._reader,\n            ident   = first || \"\",\n            c       = reader.peek();\n\n        while(true){\n            if (c == \"\\\\\"){\n                ident += this.readEscape(reader.read());\n                c = reader.peek();\n            } else if(c && isNameChar(c)){\n                ident += reader.read();\n                c = reader.peek();\n            } else {\n                break;\n            }\n        }\n\n        return ident;\n    },\n\n    readEscape: function(first){\n        var reader  = this._reader,\n            cssEscape = first || \"\",\n            i       = 0,\n            c       = reader.peek();\n\n        if (isHexDigit(c)){\n            do {\n                cssEscape += reader.read();\n                c = reader.peek();\n            } while(c && isHexDigit(c) && ++i < 6);\n        }\n\n        if (cssEscape.length == 3 && /\\s/.test(c) ||\n            cssEscape.length == 7 || cssEscape.length == 1){\n                reader.read();\n        } else {\n            c = \"\";\n        }\n\n        return cssEscape + c;\n    },\n\n    readComment: function(first){\n        var reader  = this._reader,\n            comment = first || \"\",\n            c       = reader.read();\n\n        if (c == \"*\"){\n            while(c){\n                comment += c;\n\n                //look for end of comment\n                if (comment.length > 2 && c == \"*\" && reader.peek() == \"/\"){\n                    comment += reader.read();\n                    break;\n                }\n\n                c = reader.read();\n            }\n\n            return comment;\n        } else {\n            return \"\";\n        }\n\n    }\n});\n\nvar Tokens  = [\n\n    /*\n     * The following token names are defined in CSS3 Grammar: http://www.w3.org/TR/css3-syntax/#lexical\n     */\n\n    //HTML-style comments\n    { name: \"CDO\"},\n    { name: \"CDC\"},\n\n    //ignorables\n    { name: \"S\", whitespace: true/*, channel: \"ws\"*/},\n    { name: \"COMMENT\", comment: true, hide: true, channel: \"comment\" },\n\n    //attribute equality\n    { name: \"INCLUDES\", text: \"~=\"},\n    { name: \"DASHMATCH\", text: \"|=\"},\n    { name: \"PREFIXMATCH\", text: \"^=\"},\n    { name: \"SUFFIXMATCH\", text: \"$=\"},\n    { name: \"SUBSTRINGMATCH\", text: \"*=\"},\n\n    //identifier types\n    { name: \"STRING\"},\n    { name: \"IDENT\"},\n    { name: \"HASH\"},\n\n    //at-keywords\n    { name: \"IMPORT_SYM\", text: \"@import\"},\n    { name: \"PAGE_SYM\", text: \"@page\"},\n    { name: \"MEDIA_SYM\", text: \"@media\"},\n    { name: \"FONT_FACE_SYM\", text: \"@font-face\"},\n    { name: \"CHARSET_SYM\", text: \"@charset\"},\n    { name: \"NAMESPACE_SYM\", text: \"@namespace\"},\n    { name: \"VIEWPORT_SYM\", text: [\"@viewport\", \"@-ms-viewport\"]},\n    { name: \"UNKNOWN_SYM\" },\n    //{ name: \"ATKEYWORD\"},\n\n    //CSS3 animations\n    { name: \"KEYFRAMES_SYM\", text: [ \"@keyframes\", \"@-webkit-keyframes\", \"@-moz-keyframes\", \"@-o-keyframes\" ] },\n\n    //important symbol\n    { name: \"IMPORTANT_SYM\"},\n\n    //measurements\n    { name: \"LENGTH\"},\n    { name: \"ANGLE\"},\n    { name: \"TIME\"},\n    { name: \"FREQ\"},\n    { name: \"DIMENSION\"},\n    { name: \"PERCENTAGE\"},\n    { name: \"NUMBER\"},\n\n    //functions\n    { name: \"URI\"},\n    { name: \"FUNCTION\"},\n\n    //Unicode ranges\n    { name: \"UNICODE_RANGE\"},\n\n    /*\n     * The following token names are defined in CSS3 Selectors: http://www.w3.org/TR/css3-selectors/#selector-syntax\n     */\n\n    //invalid string\n    { name: \"INVALID\"},\n\n    //combinators\n    { name: \"PLUS\", text: \"+\" },\n    { name: \"GREATER\", text: \">\"},\n    { name: \"COMMA\", text: \",\"},\n    { name: \"TILDE\", text: \"~\"},\n\n    //modifier\n    { name: \"NOT\"},\n\n    /*\n     * Defined in CSS3 Paged Media\n     */\n    { name: \"TOPLEFTCORNER_SYM\", text: \"@top-left-corner\"},\n    { name: \"TOPLEFT_SYM\", text: \"@top-left\"},\n    { name: \"TOPCENTER_SYM\", text: \"@top-center\"},\n    { name: \"TOPRIGHT_SYM\", text: \"@top-right\"},\n    { name: \"TOPRIGHTCORNER_SYM\", text: \"@top-right-corner\"},\n    { name: \"BOTTOMLEFTCORNER_SYM\", text: \"@bottom-left-corner\"},\n    { name: \"BOTTOMLEFT_SYM\", text: \"@bottom-left\"},\n    { name: \"BOTTOMCENTER_SYM\", text: \"@bottom-center\"},\n    { name: \"BOTTOMRIGHT_SYM\", text: \"@bottom-right\"},\n    { name: \"BOTTOMRIGHTCORNER_SYM\", text: \"@bottom-right-corner\"},\n    { name: \"LEFTTOP_SYM\", text: \"@left-top\"},\n    { name: \"LEFTMIDDLE_SYM\", text: \"@left-middle\"},\n    { name: \"LEFTBOTTOM_SYM\", text: \"@left-bottom\"},\n    { name: \"RIGHTTOP_SYM\", text: \"@right-top\"},\n    { name: \"RIGHTMIDDLE_SYM\", text: \"@right-middle\"},\n    { name: \"RIGHTBOTTOM_SYM\", text: \"@right-bottom\"},\n\n    /*\n     * The following token names are defined in CSS3 Media Queries: http://www.w3.org/TR/css3-mediaqueries/#syntax\n     */\n    /*{ name: \"MEDIA_ONLY\", state: \"media\"},\n    { name: \"MEDIA_NOT\", state: \"media\"},\n    { name: \"MEDIA_AND\", state: \"media\"},*/\n    { name: \"RESOLUTION\", state: \"media\"},\n\n    /*\n     * The following token names are not defined in any CSS specification but are used by the lexer.\n     */\n\n    //not a real token, but useful for stupid IE filters\n    { name: \"IE_FUNCTION\" },\n\n    //part of CSS3 grammar but not the Flex code\n    { name: \"CHAR\" },\n\n    //TODO: Needed?\n    //Not defined as tokens, but might as well be\n    {\n        name: \"PIPE\",\n        text: \"|\"\n    },\n    {\n        name: \"SLASH\",\n        text: \"/\"\n    },\n    {\n        name: \"MINUS\",\n        text: \"-\"\n    },\n    {\n        name: \"STAR\",\n        text: \"*\"\n    },\n\n    {\n        name: \"LBRACE\",\n        endChar: \"}\",\n        text: \"{\"\n    },\n    {\n        name: \"RBRACE\",\n        text: \"}\"\n    },\n    {\n        name: \"LBRACKET\",\n        endChar: \"]\",\n        text: \"[\"\n    },\n    {\n        name: \"RBRACKET\",\n        text: \"]\"\n    },\n    {\n        name: \"EQUALS\",\n        text: \"=\"\n    },\n    {\n        name: \"COLON\",\n        text: \":\"\n    },\n    {\n        name: \"SEMICOLON\",\n        text: \";\"\n    },\n\n    {\n        name: \"LPAREN\",\n        endChar: \")\",\n        text: \"(\"\n    },\n    {\n        name: \"RPAREN\",\n        text: \")\"\n    },\n    {\n        name: \"DOT\",\n        text: \".\"\n    }\n];\n\n(function(){\n\n    var nameMap = [],\n        typeMap = {};\n\n    Tokens.UNKNOWN = -1;\n    Tokens.unshift({name:\"EOF\"});\n    for (var i=0, len = Tokens.length; i < len; i++){\n        nameMap.push(Tokens[i].name);\n        Tokens[Tokens[i].name] = i;\n        if (Tokens[i].text){\n            if (Tokens[i].text instanceof Array){\n                for (var j=0; j < Tokens[i].text.length; j++){\n                    typeMap[Tokens[i].text[j]] = i;\n                }\n            } else {\n                typeMap[Tokens[i].text] = i;\n            }\n        }\n    }\n\n    Tokens.name = function(tt){\n        return nameMap[tt];\n    };\n\n    Tokens.type = function(c){\n        return typeMap[c] || -1;\n    };\n\n})();\n\n\n\n//This file will likely change a lot! Very experimental!\n/*global Properties, ValidationTypes, ValidationError, PropertyValueIterator */\nvar Validation = {\n\n    validate: function(property, value){\n\n        //normalize name\n        var name        = property.toString().toLowerCase(),\n            parts       = value.parts,\n            expression  = new PropertyValueIterator(value),\n            spec        = Properties[name],\n            part,\n            valid,\n            j, count,\n            msg,\n            types,\n            last,\n            literals,\n            max, multi, group;\n\n        if (!spec) {\n            if (name.indexOf(\"-\") !== 0){    //vendor prefixed are ok\n                throw new ValidationError(\"Unknown property '\" + property + \"'.\", property.line, property.col);\n            }\n        } else if (typeof spec != \"number\"){\n\n            //initialization\n            if (typeof spec == \"string\"){\n                if (spec.indexOf(\"||\") > -1) {\n                    this.groupProperty(spec, expression);\n                } else {\n                    this.singleProperty(spec, expression, 1);\n                }\n\n            } else if (spec.multi) {\n                this.multiProperty(spec.multi, expression, spec.comma, spec.max || Infinity);\n            } else if (typeof spec == \"function\") {\n                spec(expression);\n            }\n\n        }\n\n    },\n\n    singleProperty: function(types, expression, max, partial) {\n\n        var result      = false,\n            value       = expression.value,\n            count       = 0,\n            part;\n\n        while (expression.hasNext() && count < max) {\n            result = ValidationTypes.isAny(expression, types);\n            if (!result) {\n                break;\n            }\n            count++;\n        }\n\n        if (!result) {\n            if (expression.hasNext() && !expression.isFirst()) {\n                part = expression.peek();\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            } else {\n                 throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n            }\n        } else if (expression.hasNext()) {\n            part = expression.next();\n            throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n        }\n\n    },\n\n    multiProperty: function (types, expression, comma, max) {\n\n        var result      = false,\n            value       = expression.value,\n            count       = 0,\n            sep         = false,\n            part;\n\n        while(expression.hasNext() && !result && count < max) {\n            if (ValidationTypes.isAny(expression, types)) {\n                count++;\n                if (!expression.hasNext()) {\n                    result = true;\n\n                } else if (comma) {\n                    if (expression.peek() == \",\") {\n                        part = expression.next();\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                break;\n\n            }\n        }\n\n        if (!result) {\n            if (expression.hasNext() && !expression.isFirst()) {\n                part = expression.peek();\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            } else {\n                part = expression.previous();\n                if (comma && part == \",\") {\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n                }\n            }\n\n        } else if (expression.hasNext()) {\n            part = expression.next();\n            throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n        }\n\n    },\n\n    groupProperty: function (types, expression, comma) {\n\n        var result      = false,\n            value       = expression.value,\n            typeCount   = types.split(\"||\").length,\n            groups      = { count: 0 },\n            partial     = false,\n            name,\n            part;\n\n        while(expression.hasNext() && !result) {\n            name = ValidationTypes.isAnyOfGroup(expression, types);\n            if (name) {\n\n                //no dupes\n                if (groups[name]) {\n                    break;\n                } else {\n                    groups[name] = 1;\n                    groups.count++;\n                    partial = true;\n\n                    if (groups.count == typeCount || !expression.hasNext()) {\n                        result = true;\n                    }\n                }\n            } else {\n                break;\n            }\n        }\n\n        if (!result) {\n            if (partial && expression.hasNext()) {\n                    part = expression.peek();\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            } else {\n                throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n            }\n        } else if (expression.hasNext()) {\n            part = expression.next();\n            throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n        }\n    }\n\n\n\n};\n/**\n * Type to use when a validation error occurs.\n * @class ValidationError\n * @namespace parserlib.util\n * @constructor\n * @param {String} message The error message.\n * @param {int} line The line at which the error occurred.\n * @param {int} col The column at which the error occurred.\n */\nfunction ValidationError(message, line, col){\n\n    /**\n     * The column at which the error occurred.\n     * @type int\n     * @property col\n     */\n    this.col = col;\n\n    /**\n     * The line at which the error occurred.\n     * @type int\n     * @property line\n     */\n    this.line = line;\n\n    /**\n     * The text representation of the unit.\n     * @type String\n     * @property text\n     */\n    this.message = message;\n\n}\n\n//inherit from Error\nValidationError.prototype = new Error();\n//This file will likely change a lot! Very experimental!\n/*global Properties, Validation, ValidationError, PropertyValueIterator, console*/\nvar ValidationTypes = {\n\n    isLiteral: function (part, literals) {\n        var text = part.text.toString().toLowerCase(),\n            args = literals.split(\" | \"),\n            i, len, found = false;\n\n        for (i=0,len=args.length; i < len && !found; i++){\n            if (text == args[i].toLowerCase()){\n                found = true;\n            }\n        }\n\n        return found;\n    },\n\n    isSimple: function(type) {\n        return !!this.simple[type];\n    },\n\n    isComplex: function(type) {\n        return !!this.complex[type];\n    },\n\n    /**\n     * Determines if the next part(s) of the given expression\n     * are any of the given types.\n     */\n    isAny: function (expression, types) {\n        var args = types.split(\" | \"),\n            i, len, found = false;\n\n        for (i=0,len=args.length; i < len && !found && expression.hasNext(); i++){\n            found = this.isType(expression, args[i]);\n        }\n\n        return found;\n    },\n\n    /**\n     * Determines if the next part(s) of the given expression\n     * are one of a group.\n     */\n    isAnyOfGroup: function(expression, types) {\n        var args = types.split(\" || \"),\n            i, len, found = false;\n\n        for (i=0,len=args.length; i < len && !found; i++){\n            found = this.isType(expression, args[i]);\n        }\n\n        return found ? args[i-1] : false;\n    },\n\n    /**\n     * Determines if the next part(s) of the given expression\n     * are of a given type.\n     */\n    isType: function (expression, type) {\n        var part = expression.peek(),\n            result = false;\n\n        if (type.charAt(0) != \"<\") {\n            result = this.isLiteral(part, type);\n            if (result) {\n                expression.next();\n            }\n        } else if (this.simple[type]) {\n            result = this.simple[type](part);\n            if (result) {\n                expression.next();\n            }\n        } else {\n            result = this.complex[type](expression);\n        }\n\n        return result;\n    },\n\n\n\n    simple: {\n\n        \"<absolute-size>\": function(part){\n            return ValidationTypes.isLiteral(part, \"xx-small | x-small | small | medium | large | x-large | xx-large\");\n        },\n\n        \"<attachment>\": function(part){\n            return ValidationTypes.isLiteral(part, \"scroll | fixed | local\");\n        },\n\n        \"<attr>\": function(part){\n            return part.type == \"function\" && part.name == \"attr\";\n        },\n\n        \"<bg-image>\": function(part){\n            return this[\"<image>\"](part) || this[\"<gradient>\"](part) ||  part == \"none\";\n        },\n\n        \"<gradient>\": function(part) {\n            return part.type == \"function\" && /^(?:\\-(?:ms|moz|o|webkit)\\-)?(?:repeating\\-)?(?:radial\\-|linear\\-)?gradient/i.test(part);\n        },\n\n        \"<box>\": function(part){\n            return ValidationTypes.isLiteral(part, \"padding-box | border-box | content-box\");\n        },\n\n        \"<content>\": function(part){\n            return part.type == \"function\" && part.name == \"content\";\n        },\n\n        \"<relative-size>\": function(part){\n            return ValidationTypes.isLiteral(part, \"smaller | larger\");\n        },\n\n        //any identifier\n        \"<ident>\": function(part){\n            return part.type == \"identifier\";\n        },\n\n        \"<length>\": function(part){\n            if (part.type == \"function\" && /^(?:\\-(?:ms|moz|o|webkit)\\-)?calc/i.test(part)){\n                return true;\n            }else{\n                return part.type == \"length\" || part.type == \"number\" || part.type == \"integer\" || part == \"0\";\n            }\n        },\n\n        \"<color>\": function(part){\n            return part.type == \"color\" || part == \"transparent\";\n        },\n\n        \"<number>\": function(part){\n            return part.type == \"number\" || this[\"<integer>\"](part);\n        },\n\n        \"<integer>\": function(part){\n            return part.type == \"integer\";\n        },\n\n        \"<line>\": function(part){\n            return part.type == \"integer\";\n        },\n\n        \"<angle>\": function(part){\n            return part.type == \"angle\";\n        },\n\n        \"<uri>\": function(part){\n            return part.type == \"uri\";\n        },\n\n        \"<image>\": function(part){\n            return this[\"<uri>\"](part);\n        },\n\n        \"<percentage>\": function(part){\n            return part.type == \"percentage\" || part == \"0\";\n        },\n\n        \"<border-width>\": function(part){\n            return this[\"<length>\"](part) || ValidationTypes.isLiteral(part, \"thin | medium | thick\");\n        },\n\n        \"<border-style>\": function(part){\n            return ValidationTypes.isLiteral(part, \"none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\");\n        },\n\n        \"<content-sizing>\": function(part){ // http://www.w3.org/TR/css3-sizing/#width-height-keywords\n            return ValidationTypes.isLiteral(part, \"fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content\");\n        },\n\n        \"<margin-width>\": function(part){\n            return this[\"<length>\"](part) || this[\"<percentage>\"](part) || ValidationTypes.isLiteral(part, \"auto\");\n        },\n\n        \"<padding-width>\": function(part){\n            return this[\"<length>\"](part) || this[\"<percentage>\"](part);\n        },\n\n        \"<shape>\": function(part){\n            return part.type == \"function\" && (part.name == \"rect\" || part.name == \"inset-rect\");\n        },\n\n        \"<time>\": function(part) {\n            return part.type == \"time\";\n        },\n\n        \"<flex-grow>\": function(part){\n            return this[\"<number>\"](part);\n        },\n\n        \"<flex-shrink>\": function(part){\n            return this[\"<number>\"](part);\n        },\n\n        \"<width>\": function(part){\n            return this[\"<margin-width>\"](part);\n        },\n\n        \"<flex-basis>\": function(part){\n            return this[\"<width>\"](part);\n        },\n\n        \"<flex-direction>\": function(part){\n            return ValidationTypes.isLiteral(part, \"row | row-reverse | column | column-reverse\");\n        },\n\n        \"<flex-wrap>\": function(part){\n            return ValidationTypes.isLiteral(part, \"nowrap | wrap | wrap-reverse\");\n        }\n    },\n\n    complex: {\n\n        \"<bg-position>\": function(expression){\n            var types   = this,\n                result  = false,\n                numeric = \"<percentage> | <length>\",\n                xDir    = \"left | right\",\n                yDir    = \"top | bottom\",\n                count = 0,\n                hasNext = function() {\n                    return expression.hasNext() && expression.peek() != \",\";\n                };\n\n            while (expression.peek(count) && expression.peek(count) != \",\") {\n                count++;\n            }\n\n/*\n<position> = [\n  [ left | center | right | top | bottom | <percentage> | <length> ]\n|\n  [ left | center | right | <percentage> | <length> ]\n  [ top | center | bottom | <percentage> | <length> ]\n|\n  [ center | [ left | right ] [ <percentage> | <length> ]? ] &&\n  [ center | [ top | bottom ] [ <percentage> | <length> ]? ]\n]\n*/\n\n            if (count < 3) {\n                if (ValidationTypes.isAny(expression, xDir + \" | center | \" + numeric)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, yDir + \" | center | \" + numeric);\n                } else if (ValidationTypes.isAny(expression, yDir)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, xDir + \" | center\");\n                }\n            } else {\n                if (ValidationTypes.isAny(expression, xDir)) {\n                    if (ValidationTypes.isAny(expression, yDir)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, numeric);\n                    } else if (ValidationTypes.isAny(expression, numeric)) {\n                        if (ValidationTypes.isAny(expression, yDir)) {\n                            result = true;\n                            ValidationTypes.isAny(expression, numeric);\n                        } else if (ValidationTypes.isAny(expression, \"center\")) {\n                            result = true;\n                        }\n                    }\n                } else if (ValidationTypes.isAny(expression, yDir)) {\n                    if (ValidationTypes.isAny(expression, xDir)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, numeric);\n                    } else if (ValidationTypes.isAny(expression, numeric)) {\n                        if (ValidationTypes.isAny(expression, xDir)) {\n                                result = true;\n                                ValidationTypes.isAny(expression, numeric);\n                        } else if (ValidationTypes.isAny(expression, \"center\")) {\n                            result = true;\n                        }\n                    }\n                } else if (ValidationTypes.isAny(expression, \"center\")) {\n                    if (ValidationTypes.isAny(expression, xDir + \" | \" + yDir)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, numeric);\n                    }\n                }\n            }\n\n            return result;\n        },\n\n        \"<bg-size>\": function(expression){\n            //<bg-size> = [ <length> | <percentage> | auto ]{1,2} | cover | contain\n            var types   = this,\n                result  = false,\n                numeric = \"<percentage> | <length> | auto\",\n                part,\n                i, len;\n\n            if (ValidationTypes.isAny(expression, \"cover | contain\")) {\n                result = true;\n            } else if (ValidationTypes.isAny(expression, numeric)) {\n                result = true;\n                ValidationTypes.isAny(expression, numeric);\n            }\n\n            return result;\n        },\n\n        \"<repeat-style>\": function(expression){\n            //repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}\n            var result  = false,\n                values  = \"repeat | space | round | no-repeat\",\n                part;\n\n            if (expression.hasNext()){\n                part = expression.next();\n\n                if (ValidationTypes.isLiteral(part, \"repeat-x | repeat-y\")) {\n                    result = true;\n                } else if (ValidationTypes.isLiteral(part, values)) {\n                    result = true;\n\n                    if (expression.hasNext() && ValidationTypes.isLiteral(expression.peek(), values)) {\n                        expression.next();\n                    }\n                }\n            }\n\n            return result;\n\n        },\n\n        \"<shadow>\": function(expression) {\n            //inset? && [ <length>{2,4} && <color>? ]\n            var result  = false,\n                count   = 0,\n                inset   = false,\n                color   = false,\n                part;\n\n            if (expression.hasNext()) {\n\n                if (ValidationTypes.isAny(expression, \"inset\")){\n                    inset = true;\n                }\n\n                if (ValidationTypes.isAny(expression, \"<color>\")) {\n                    color = true;\n                }\n\n                while (ValidationTypes.isAny(expression, \"<length>\") && count < 4) {\n                    count++;\n                }\n\n\n                if (expression.hasNext()) {\n                    if (!color) {\n                        ValidationTypes.isAny(expression, \"<color>\");\n                    }\n\n                    if (!inset) {\n                        ValidationTypes.isAny(expression, \"inset\");\n                    }\n\n                }\n\n                result = (count >= 2 && count <= 4);\n\n            }\n\n            return result;\n        },\n\n        \"<x-one-radius>\": function(expression) {\n            //[ <length> | <percentage> ] [ <length> | <percentage> ]?\n            var result  = false,\n                simple = \"<length> | <percentage> | inherit\";\n\n            if (ValidationTypes.isAny(expression, simple)){\n                result = true;\n                ValidationTypes.isAny(expression, simple);\n            }\n\n            return result;\n        },\n\n        \"<flex>\": function(expression) {\n            // http://www.w3.org/TR/2014/WD-css-flexbox-1-20140325/#flex-property\n            // none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]\n            // Valid syntaxes, according to https://developer.mozilla.org/en-US/docs/Web/CSS/flex#Syntax\n            // * none\n            // * <flex-grow>\n            // * <flex-basis>\n            // * <flex-grow> <flex-basis>\n            // * <flex-grow> <flex-shrink>\n            // * <flex-grow> <flex-shrink> <flex-basis>\n            // * inherit\n            var part,\n                result = false;\n            if (ValidationTypes.isAny(expression, \"none | inherit\")) {\n                result = true;\n            } else {\n                if (ValidationTypes.isType(expression, \"<flex-grow>\")) {\n                    if (expression.peek()) {\n                        if (ValidationTypes.isType(expression, \"<flex-shrink>\")) {\n                            if (expression.peek()) {\n                                result = ValidationTypes.isType(expression, \"<flex-basis>\");\n                            } else {\n                                result = true;\n                            }\n                        } else if (ValidationTypes.isType(expression, \"<flex-basis>\")) {\n                            result = expression.peek() === null;\n                        }\n                    } else {\n                        result = true;\n                    }\n                } else if (ValidationTypes.isType(expression, \"<flex-basis>\")) {\n                    result = true;\n                }\n            }\n\n            if (!result) {\n                // Generate a more verbose error than \"Expected <flex>...\"\n                part = expression.peek();\n                throw new ValidationError(\"Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '\" + expression.value.text + \"'.\", part.line, part.col);\n            }\n\n            return result;\n        }\n    }\n};\n\nparserlib.css = {\nColors              :Colors,\nCombinator          :Combinator,\nParser              :Parser,\nPropertyName        :PropertyName,\nPropertyValue       :PropertyValue,\nPropertyValuePart   :PropertyValuePart,\nMediaFeature        :MediaFeature,\nMediaQuery          :MediaQuery,\nSelector            :Selector,\nSelectorPart        :SelectorPart,\nSelectorSubPart     :SelectorSubPart,\nSpecificity         :Specificity,\nTokenStream         :TokenStream,\nTokens              :Tokens,\nValidationError     :ValidationError\n};\n})();\n\n(function(){\nfor(var prop in parserlib){\nexports[prop] = parserlib[prop];\n}\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/parserlib/lib/node-parserlib.js\n ** module id = 283\n ** module chunks = 1\n **/"],"sourceRoot":""}